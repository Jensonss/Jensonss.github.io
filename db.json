{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/image/weixin.png","path":"image/weixin.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":0,"renderable":1},{"_id":"source/image/alipay.jpg","path":"image/alipay.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"42307b78b07118ebb6e9b24011da09b0c7586b57","modified":1499965560000},{"_id":"source/CNAME","hash":"4d6ad5941eb82092c055b8495d5fad1ea792e578","modified":1492920482000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1499958683000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1499958683000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1499958683000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1499958683000},{"_id":"themes/yilia/_config.yml","hash":"b690252e28804038f157cf4771347f9f8f6a0915","modified":1499965677000},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1499958683000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1499958683000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1499958683000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1499958683000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1499958683000},{"_id":"source/_posts/.DS_Store","hash":"9073ef569b168ffd787fd9a1353a56d5fb1db9d6","modified":1494844184000},{"_id":"source/_posts/2016公司清明节坝上草原.md","hash":"13a029d458c82a899e749c59e7f954caecb84987","modified":1493114450000},{"_id":"source/_posts/30分钟搭建自己的网站.md","hash":"da25e80c1827d55cf58e540f3c32fbfbcfd2772a","modified":1492943038000},{"_id":"source/_posts/2015圆明园荷花节.md","hash":"1bfc7a4bd3ee55c1ab24309d4f7ce4df617fb79e","modified":1493111849000},{"_id":"source/_posts/Android关于Activity生命周期误解.md","hash":"c6d5fd46788830e67d66a469ec3bb95174b7e7c3","modified":1494138484000},{"_id":"source/_posts/2016圆明园荷花节.md","hash":"c9a89b6cf915239fb18efa46707fb604f027b863","modified":1493112792000},{"_id":"source/_posts/Android内存分析工具之MAT详解.md","hash":"71aa589c3fc1a352fa6b2513f4337a31a54be275","modified":1493279043000},{"_id":"source/_posts/Android开发之JNI深入解析.md","hash":"f397d89e67a8d58518a8023cbdb26d0b705adea0","modified":1493104632000},{"_id":"source/_posts/Android性能优化之内存优化.md","hash":"477f10656bb236512c44a45a9ad859da230d9fc7","modified":1492863786000},{"_id":"source/_posts/Android性能优化之耗电优化.md","hash":"cf30816f5a16cd6fed05b05efc7285be2c2d4ef9","modified":1492856640000},{"_id":"source/_posts/Android源码下载.md","hash":"f54c57d6f2b861a358057bd9ab6d8586bdfc0466","modified":1492861680000},{"_id":"source/_posts/Django创建数据表时syncdb提示Unknown-command：‘syncdb.md","hash":"ccbee079b86580a30207f7db69c2601617081e4a","modified":1498552565000},{"_id":"source/_posts/Java字符串压缩去重.md","hash":"718cd297d2d399a6e2d493fd8f1e85b6bbc4b8c0","modified":1493805866000},{"_id":"source/_posts/Android进程和线程.md","hash":"f35bf1484a09873f01d59b27881e418fad5bf082","modified":1493297965000},{"_id":"source/_posts/Java知识点.md","hash":"605d3405c83fae72dff04d2bfd34050ad8f8d8de","modified":1498822084000},{"_id":"source/_posts/Mac版eclipse中每次重启电脑后字体自动变小.md","hash":"e190ffe2601170a9f1d9624594de3c4bdc5cd322","modified":1492857868000},{"_id":"source/_posts/Python入门系列(0) OSX系统下Python3的配置与安装.md","hash":"30cec5c142146cd597e528112a82545842a393f6","modified":1492862566000},{"_id":"source/_posts/Mac下配置adb.md","hash":"db67213430c7bb2e2cd5da360797d39a8480279d","modified":1499952641000},{"_id":"source/_posts/Python入门系列(1) 如何使用Sublime text开发Python.md","hash":"34eebf3ee5630646ff6a0a2b2a6482129205561c","modified":1492862488000},{"_id":"source/_posts/Python入门系列-3-元组、列表和字典.md","hash":"20a7bc985311b5acb73c2c6bdab1c5b9cc3aafc9","modified":1499965501000},{"_id":"source/_posts/Python入门系列(2) 字符串、变量和简单数据类型的上手.md","hash":"aa0044c9b3fd3291c6b7febf3a5e518a4f1e2ff2","modified":1492862542000},{"_id":"source/_posts/Android网络框架执行流程分析.md","hash":"5dc90783a119e2ad65275c7d6c94e55a624c82c0","modified":1494349851000},{"_id":"source/_posts/UML--类图详解.md","hash":"4be21817592db5347e0bbc46140027732ebbfdc9","modified":1494408333000},{"_id":"source/_posts/Android性能优化之UI优化.md","hash":"ebfea595f94ae95930d4a496dcffe0def5fc5097","modified":1493893416000},{"_id":"source/_posts/osx下pip3安装matplotlib时The following required packages can not be built freetype.md","hash":"c07fa80299a0f444cb97601ed72ed779754fdc5f","modified":1492859764000},{"_id":"source/_posts/osx下如何使用SublimeText阅读Android系统源码.md","hash":"43b436019977125515415286835b7676bdfdf1d3","modified":1492858258000},{"_id":"source/_posts/osx如何安装Homrbrew.md","hash":"892b22d2789de7eb2c5b5518165cd40729cf3082","modified":1492858572000},{"_id":"source/_posts/pycharm黄线问题.md","hash":"4b5c68fb4fdc38882e45224d792c434c0449c2d9","modified":1492858532000},{"_id":"source/_posts/为什么我在工作线程刷新UI没报错.md","hash":"27a72e63dd0f90546170ed97bb53f4724e51ef4b","modified":1492855916000},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题.md","hash":"63c9969d407f219666f39a3b9de47552b504d055","modified":1493108291000},{"_id":"source/_posts/为什么每一个IT人员应该有一把人体工学电脑椅.md","hash":"8dd75cfc78c5acb449e2d70a4c228391d984f7b1","modified":1494848579000},{"_id":"source/_posts/使用Sublime text编译python3时中文打印异常问题.md","hash":"c9b8b67a852a458e7e70f20f64187a514c967397","modified":1492858628000},{"_id":"source/_posts/关于家庭网络宽带、路由及上网设备那些事.md","hash":"f457ca1bb8b578846981952339e8a7847f9b7e3d","modified":1492857552000},{"_id":"source/_posts/关于家庭网络宽带、路由及上网设备那些事---后续篇.md","hash":"dfe7b33713e0cc3777be37b0bfea63b7b1fa3919","modified":1492857740000},{"_id":"source/_posts/hexo博客换电脑后怎么办.md","hash":"cbea4e876c2923a173e9791172f526c1a49c2380","modified":1493726087000},{"_id":"source/_posts/如何知道下载好的aosp版本.md","hash":"7b2bbfc62a038aa2c493aa5196ffca207bc0ffee","modified":1492855258000},{"_id":"source/_posts/搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼.md","hash":"fddef626692da6e21ccb91efab47d21be14b2a04","modified":1492854954000},{"_id":"source/_posts/两个栈实现队列功能.md","hash":"c640b5dcc4051d9ae492c8bb5570270d801b6fd7","modified":1495103781000},{"_id":"source/_posts/四个人过桥问题.md","hash":"da3addb3fd1bd6facc5a4331687fe17a45eac1d8","modified":1494503431000},{"_id":"source/_posts/农夫带着狼、羊和白菜过河问题.md","hash":"f6ddffce0b0316f04dd5c899a68dc8a2f7ba43b1","modified":1494433180000},{"_id":"source/_posts/番茄工作法使用说明书.md","hash":"e968d4d30ec369a6dcde23dd1e8327c735452f3b","modified":1492863434000},{"_id":"source/_posts/数学归纳法.md","hash":"cef3dc5c30405bef196d6e6cbb33eb3c49f8687d","modified":1494992326000},{"_id":"source/_posts/算法之朴素模式匹配.md","hash":"d0882f77585197326899947dfa768d15b1ad7647","modified":1495705671000},{"_id":"source/_posts/设计一个有获取元素最小值getMin的栈.md","hash":"a4e69d3779d0e31dc838a97bccbc734777a780e9","modified":1495096109000},{"_id":"source/_posts/详解设计模式之单例模式.md","hash":"66e8a3096cc82e44a429f73abf2bf8e311104a78","modified":1492857150000},{"_id":"source/_posts/算法查找之二分查找.md","hash":"2b24c0967c08b25a1df308c5fdab9b2c6271d29c","modified":1493828078000},{"_id":"source/_posts/详解设计模式之简单工厂模式.md","hash":"d9f0298c546f057fd19a17e3f792af53108adb74","modified":1492857254000},{"_id":"source/_posts/算法排序之交换排序.md","hash":"780c025a7eab0528e5fc2b14cdd9d51034e85e5a","modified":1493821647000},{"_id":"source/_posts/详解设计模式之责任链模式.md","hash":"a9797e56e0947e73b3bce30eb22744b5bf84a7dc","modified":1494407908000},{"_id":"source/categories/index.md","hash":"3c5ec6d1300cd36a0804d8fc87dc12b2c6fddf89","modified":1492852764000},{"_id":"source/tags/index.md","hash":"cd323cee16538256e9d43471a8f82dffb8eb9ae1","modified":1492852750000},{"_id":"source/_posts/算法排序之快速排序.md","hash":"592651801d21174e58b431145d4691a1e0e0f144","modified":1494949170000},{"_id":"source/_posts/详解设计模式之建造者模式.md","hash":"b41b7269995129353377657721fb7b518214dd4f","modified":1494401051000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1499958683000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1499958683000},{"_id":"source/about/index.md","hash":"513367f1b07144f6ed4977815b3954e816183e33","modified":1499961912000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1499958683000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1499958683000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1499958683000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1499958683000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1499958683000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1499958683000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1499958683000},{"_id":"themes/yilia/.git/packed-refs","hash":"4dc64835d90ebd62d3df9c760251d3ee4fe50711","modified":1499958683000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1499958683000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1499958683000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1499958683000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1499958683000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1499958683000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1499958683000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1499958683000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1499958683000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499958183000},{"_id":"source/photos/.DS_Store","hash":"c215b51a69c2d8124411a129525c7365249fbccc","modified":1499962933000},{"_id":"source/photos/index.md","hash":"b7f20668807e9c765bc59beacc4eabc8364aabfd","modified":1499962642000},{"_id":"source/image/weixin.png","hash":"8b79c4caf0cb7c2cee0f034c77e772021cb030ef","modified":1499961665000},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1499958683000},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499958683000},{"_id":"source/image/avatar.jpg","hash":"1262fa1c2cd4a1c1e9a0475ef1865d0818175a89","modified":1499959852000},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1499958683000},{"_id":"themes/yilia/.git/index","hash":"f5573fd6d44cd3ac63ef8a668d6325c84f4ec4ad","modified":1499958683000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1499958683000},{"_id":"source/_posts/2016公司清明节坝上草原/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493113484000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112396013.jpg","hash":"9c5244967054cafe06bc2c664121cd6168779993","modified":1493112484000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112393720.jpg","hash":"b1c2c8a583fc699b06538430993c80390125c446","modified":1493112484000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112398170.jpg","hash":"96c4b59cffff416f920a82ca6b2e2b2e79cd3621","modified":1493112484000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112402523.jpg","hash":"0d5f3956b59608b523bbe1f0c90570f01cd211d6","modified":1493112482000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112400267.jpg","hash":"1963b1b85ed7ca762f5c1e4f4761a70b63830436","modified":1493112484000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112405316.jpg","hash":"80d99017a1536f5ebe650057bd03d7378070f78b","modified":1493112483000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png","hash":"68d7e653a1005d1e73024cb8ea8fbc2731777a79","modified":1493046883000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.57.46.png","hash":"9b4989e0bb92980672882b05ccf49e48c91fea9b","modified":1493049473000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png","hash":"3ca00b29315f30e0a6d715ed11aec4577b8ed4a7","modified":1493042270000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午12.26.47.png","hash":"41789b81c2fa5e7d6654d0a299aa844e4e3091d4","modified":1493051217000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午9.49.56.png","hash":"5a279dc5923c44e761031e95002e9a29bdbf0a9a","modified":1493085003000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png","hash":"c238b16f19b4ebf921d74c2580755f38eb69ac35","modified":1493103266000},{"_id":"source/_posts/2015圆明园荷花节/.DS_Store","hash":"9d37a7d6a1c665163d7ee02c6be11c651d6214e4","modified":1493111795000},{"_id":"source/_posts/Android内存分析工具之MAT详解/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493271714000},{"_id":"source/_posts/Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png","hash":"23d4d41ee705d2a53d8823da0008b1a5cb49ef1c","modified":1493271838000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.21.48.png","hash":"f6005c31a725e55955a612e075c980b638b3c801","modified":1493274119000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png","hash":"d3c407d21cca28dd6efe53c3c49c3b49636704ff","modified":1493277096000},{"_id":"source/_posts/Android网络框架执行流程分析/流程.png","hash":"6d4d1136ff206a04c1b74d6e30aae272a19eafa5","modified":1494345617000},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png","hash":"36238ae43e26397f774c65c9ce10a5f83be59215","modified":1493105599000},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png","hash":"8e07868047b036caacf006f004a3de013cb11c19","modified":1493106344000},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png","hash":"f74cf134edf54b4e55d8df0e6c9b5d3630006665","modified":1493105695000},{"_id":"source/_posts/离职出行/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493114941000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499958183000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499958183000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"b75e8fff732292fa26b5a0b47cd253d4281e321a","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1499958683000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1499958183000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1499958683000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"5dab6ee0263d7662bd566fa644d4c1bb7327e012","modified":1499958683000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1499958683000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1499958683000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1499958683000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1499958683000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"9bb1a4918c1b1ee62ce0a71381990a1978c51b2a","modified":1499958683000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1499958683000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1499958683000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1499958683000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1499958683000},{"_id":"source/image/alipay.jpg","hash":"d9c8084299f79c67cecc01242f83554dab75f9e4","modified":1499961630000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1499958683000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1499958683000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1499958683000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1499958683000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1499958683000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1499958683000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1499958683000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1499958683000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1499958683000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1499958683000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1499958683000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1499958683000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1499958683000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1499958683000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1499958683000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1499958683000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"e6e83d4863afcc589d4dd2f327e9f396f7d7b343","modified":1499958683000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1499958683000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1499958683000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1499958683000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1499958683000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1499958683000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1499958683000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1499958683000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1499958683000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1499958683000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1499958683000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1499958683000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1499958683000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1499958683000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1499958683000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1499958683000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1499958683000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1499958683000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"17a97f7c38f5dfacc3eadf354b5826d77f1c2bdb","modified":1499958683000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1499958683000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1499958683000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1499958683000},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1499958683000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1499958683000},{"_id":"source/_posts/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png","hash":"a00d2b50faeaf760c57b3ea66651b1d7193c1d39","modified":1494407844000},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112391191.jpg","hash":"2b68aeaac0f687cfa8368184faec7fdec3f97b94","modified":1493112485000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png","hash":"cdd90a2769b98ac3a51eb0c2167448bdc2c04ead","modified":1493046250000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png","hash":"bfc2e17ce7ec253dbb876f6f5f7b37541edfd893","modified":1493044162000},{"_id":"source/_posts/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png","hash":"9dbdbd65bab90c5352370e5d36acfd07273f4145","modified":1494404493000},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png","hash":"7547cac237c52b5a55c883117a4731e5fcc9a21c","modified":1493096201000},{"_id":"source/_posts/Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png","hash":"2286365e7cffc5a42624d41ed0ff862d120a0780","modified":1493271980000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png","hash":"3cbadb4dfedf23cf807dad7061666894d3d321ca","modified":1493273312000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png","hash":"d2d08200b0aba19179903417a9bc338d421accc6","modified":1493272169000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"171b130d25c36f496e4b43e3808707a8f1897729","modified":1499958683000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png","hash":"b346dd2a664e6b306369fd760fd150df576f7404","modified":1493277552000},{"_id":"themes/yilia/.git/objects/pack/pack-a960908cfbed7bfc756ea447b60b91bae06e0a89.idx","hash":"af03611ba1998b13dd8996f5b7145d3a6ffbe856","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"9f9fa4f8b0de5f87a9494fd0cb5064502a5d5ef5","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1499958683000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1499958683000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4d8071322662d313a09ff7b2e716002870d8c94c","modified":1499958683000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1499958683000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1499958683000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1499958683000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1499958683000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1499958683000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1499958683000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1499958683000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1499958683000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1499958683000},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png","hash":"50622ee73aff94b566796ec4f45a0d4fdb8b4405","modified":1493277745000},{"_id":"source/_posts/为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg","hash":"52a75130e228a32d037ec4dbec556c01c26e5fa9","modified":1494848421000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1499958683000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1499958683000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1499958683000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"5dab6ee0263d7662bd566fa644d4c1bb7327e012","modified":1499958683000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1499958683000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"5dab6ee0263d7662bd566fa644d4c1bb7327e012","modified":1499958683000},{"_id":"source/_posts/2015圆明园荷花节/psb1.jpeg","hash":"d80b5ed042dacf934c5ad1b9affbb56ba0ae7fb5","modified":1493108200000},{"_id":"source/_posts/离职出行/20160925152825_IMG_6947.JPG","hash":"e663186274e4c407629afd14c5bd4af0d888f6f8","modified":1493114712000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610081259_IMG_6245.JPG","hash":"be8e8a8a757928733830cff4537802921ad2091f","modified":1493113410000},{"_id":"source/_posts/离职出行/20160924145228_IMG_6849.JPG","hash":"e9a703a6e58b14876405a3b37403831d0d335ea3","modified":1493114713000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610091441_IMG_6323.JPG","hash":"cc389e61386b83f5ce18246b594478e423274d5c","modified":1493113411000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610080912_IMG_6235.JPG","hash":"fbeb762f3541d0954ad578558492f48a7abba4d2","modified":1493113408000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075842_IMG_6219.JPG","hash":"ae26053b2b8f4dee67bab69acbe225a80d8076fd","modified":1493113410000},{"_id":"source/_posts/离职出行/20160925140452_IMG_6864.JPG","hash":"2c7e99b3e05bc8c038c7386a859170af81db1b0f","modified":1493114715000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610082906_IMG_6261.JPG","hash":"e6e7e11f4f6de850ddf925d24896cfcd5944d14c","modified":1493113410000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610102213_IMG_6353.JPG","hash":"a2f14eb6fbfcf1fbcc084bd90a8d614030e39311","modified":1493113408000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610110010_IMG_6396.JPG","hash":"148a5f5bdb7ace4ade1791da2dba67db50122792","modified":1493113409000},{"_id":"source/_posts/2015圆明园荷花节/psb4.jpeg","hash":"2c5af6e38cd60180eb8ac7fa98a2a83f44758942","modified":1493108216000},{"_id":"source/_posts/离职出行/20160922125643_IMG_6744.JPG","hash":"738851571a28e4937d0735f9cc680557346d7676","modified":1493114713000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610083541_IMG_6276.JPG","hash":"b9d92e6e71c5984caa23d897fb5669c8981cf33d","modified":1493113410000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101355_IMG_6343.JPG","hash":"772d9ac49f90f8dd67738d41ab7b72ebd9c9015d","modified":1493113411000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610095757_IMG_6325.JPG","hash":"c579d0733c4491c8fb0fa1301a0100fe1e67d07b","modified":1493113412000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610104345_IMG_6371.JPG","hash":"7d6673579bc361052e2118c0515af3c1ece7f055","modified":1493113411000},{"_id":"source/_posts/2015圆明园荷花节/psb5.jpeg","hash":"7010bd8e83d1fa3fd1e7a246ab83d55540b5fcf4","modified":1493108220000},{"_id":"source/_posts/离职出行/20160922124759_IMG_6741.JPG","hash":"00469dd829d541504ca3debc57fa56ae6c80e8b1","modified":1493114714000},{"_id":"source/_posts/离职出行/20160922120143_IMG_6706.JPG","hash":"294bb67485e89b5cee6091cdf3352a1bb719a6b5","modified":1493114713000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075354_IMG_6200.JPG","hash":"c81a26d766979f0203d1c91427134fc9c315adbb","modified":1493113410000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610100357_IMG_6326.JPG","hash":"b677c649cb3266d7fc355ae80f99e3d714c8446f","modified":1493113412000},{"_id":"source/_posts/离职出行/20160922124730_IMG_6740.JPG","hash":"883d7adf7b2fc2cd0f3b2f1927616ab5a89cbe86","modified":1493114714000},{"_id":"source/_posts/离职出行/20160922112951_IMG_6692.JPG","hash":"ec1d1491a43959fecc40b90c2222f77e24239966","modified":1493114714000},{"_id":"source/_posts/离职出行/20160924141958_IMG_6827.JPG","hash":"7164082cdc1c5bdb3cfb5dcef4902353df4bfde5","modified":1493114713000},{"_id":"source/_posts/离职出行/20160925170135_IMG_6970.JPG","hash":"96962932e3cb18e1639cce9df43728cb3c07ffd2","modified":1493114711000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075557_IMG_6209.JPG","hash":"43e703a6c743a380d7060f11fb001a9b85edeffe","modified":1493113412000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610084538_IMG_6283.JPG","hash":"ccdb0d7a49b927a0a557ed2882d3e67127280c8e","modified":1493113411000},{"_id":"source/_posts/离职出行/20160922124939_IMG_6743.JPG","hash":"a9473be092dcf78510bd9d926143a44b2f18b959","modified":1493114713000},{"_id":"source/_posts/离职出行/20160922132332_IMG_6762.JPG","hash":"6899f4ac278cce136048554d395fbc447860d1e4","modified":1493114714000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101211_IMG_6337.JPG","hash":"7230d86300f9c0499507ac88aca12025b26274f2","modified":1493113408000},{"_id":"source/_posts/离职出行/20160924155639_IMG_6859.JPG","hash":"5a773e00d48fe86d3b2af11206b5c6727c8063cd","modified":1493114712000},{"_id":"source/_posts/为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif","hash":"0a558cb121714b05daf2673edf86b45609cb890c","modified":1494844142000},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101300_IMG_6342.JPG","hash":"fc39fea0b5ea8172840713b5cd3430b9da2a48bf","modified":1493113408000},{"_id":"source/_posts/离职出行/20160922185501_IMG_6785.JPG","hash":"53bef96b2565169f1d6723580b6a70edc8af1fde","modified":1493114715000},{"_id":"source/_posts/2015圆明园荷花节/psb3.jpeg","hash":"bbd0d8d23cea5c6136454a6b94239cf932a09dc8","modified":1493108211000},{"_id":"source/_posts/2015圆明园荷花节/psb2.jpeg","hash":"9f4b48a3f872e86bb604fd09f38fba40cf25cd09","modified":1493108206000},{"_id":"source/_posts/离职出行/20160925185719_IMG_6996(1).JPG","hash":"0ae7baafaf3ed3a9d34378eb61a3d555b117403c","modified":1493114711000},{"_id":"source/_posts/2015圆明园荷花节/psb6.jpeg","hash":"33d745b867503d31865b00e6e237d74b508b3cc0","modified":1493108224000},{"_id":"source/_posts/2015圆明园荷花节/psb7.jpeg","hash":"e5cd925b599ea52b1fc723908c425e237a357bc0","modified":1493108228000},{"_id":"source/_posts/2015圆明园荷花节/psb.jpeg","hash":"f6f6edd5fb92833d845b4d938ea3b956c3239d24","modified":1493108174000},{"_id":"themes/yilia/.git/objects/pack/pack-a960908cfbed7bfc756ea447b60b91bae06e0a89.pack","hash":"a2446a9577df51e0dda8cb90dc5d5c3de2f688a7","modified":1499958683000},{"_id":"public/content.json","hash":"7d4fa206ed6b515511d5393eb2c5511685debd71","modified":1499965735382},{"_id":"public/categories/index.html","hash":"710b3ff7cf83bae19f47341212f0dca920eee32f","modified":1499965736961},{"_id":"public/tags/index.html","hash":"29b60707add6ff265b35d4c887c521e8d8a25f45","modified":1499965737080},{"_id":"public/about/index.html","hash":"65f1a9cb64a343e7f6fdb90c25091b0d2f943d7f","modified":1499965737097},{"_id":"public/photos/index.html","hash":"be4fb06707325130f807369011d0af2e8b4a1b8b","modified":1499965737097},{"_id":"public/2017/04/21/番茄工作法使用说明书/index.html","hash":"ee83190d56ff388295006c87695bd14bf9f1148f","modified":1499965737097},{"_id":"public/2017/04/21/为什么我在工作线程刷新UI没报错/index.html","hash":"d7cb773e2b48d3c77da6f6a0880455efe5701b1b","modified":1499965737097},{"_id":"public/2017/04/21/Android性能优化之内存优化/index.html","hash":"a7fce6a40a98fca0622cb825f489212f31efcf24","modified":1499965737097},{"_id":"public/2017/04/21/Android性能优化之耗电优化/index.html","hash":"86e05403b0cfc802b360c158254715765ff65fd0","modified":1499965737098},{"_id":"public/2017/04/21/Android源码下载/index.html","hash":"513605d862806d012729a5c1d95f8b0f5e44f11d","modified":1499965737098},{"_id":"public/2017/04/21/如何知道下载好的aosp版本/index.html","hash":"a19c5e85c37596e6115f4f71a61b5c9025affd0a","modified":1499965737098},{"_id":"public/2017/04/21/搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼/index.html","hash":"91297838cfbd8dbd37c9ca98147c9ab03b07b1b1","modified":1499965737098},{"_id":"public/2017/04/21/UML--类图详解/index.html","hash":"82131e961f96bd958b2ae8a8eb0660263d9738d5","modified":1499965737098},{"_id":"public/2017/04/21/详解设计模式之简单工厂模式/index.html","hash":"7e0dcf7f04c03b000cb954d2ecf87ec711aa3ad4","modified":1499965737098},{"_id":"public/2017/04/21/详解设计模式之单例模式/index.html","hash":"0f6939e8b3f5c142f87a60fce232a61b2344f7e7","modified":1499965737099},{"_id":"public/2017/04/21/关于家庭网络宽带、路由及上网设备那些事/index.html","hash":"47ab7f718cda65b8578578509542d7dfe9a4a370","modified":1499965737099},{"_id":"public/2017/04/21/关于家庭网络宽带、路由及上网设备那些事---后续篇/index.html","hash":"517a03e38d7f69da6852639a51b1b778173449b1","modified":1499965737099},{"_id":"public/2017/04/22/Mac版eclipse中每次重启电脑后字体自动变小/index.html","hash":"e714c2bdc30c4fee7916bdd468398fa1d92a77d5","modified":1499965737099},{"_id":"public/2017/04/22/osx如何安装Homrbrew/index.html","hash":"68a6d3337bae26435564f0779ac4c1966cbb799f","modified":1499965737099},{"_id":"public/2017/04/22/Python入门系列(0) OSX系统下Python3的配置与安装/index.html","hash":"33d01535cf4acacd4d76a0e7f77f558a76495ab3","modified":1499965737100},{"_id":"public/2017/04/22/osx下pip3安装matplotlib时The following required packages can not be built freetype/index.html","hash":"ab4742980f83d122bf7ab9295c444bf29b73a14a","modified":1499965737100},{"_id":"public/2017/04/22/Python入门系列(1) 如何使用Sublime text开发Python/index.html","hash":"d8e86d80eb3aaadc9cf5a70055213aa46beb1f26","modified":1499965737100},{"_id":"public/2017/04/22/使用Sublime text编译python3时中文打印异常问题/index.html","hash":"712a1d0d0517e5a7d4d20cc090bf12cf86d8179f","modified":1499965737100},{"_id":"public/2017/04/22/Python入门系列(2) 字符串、变量和简单数据类型的上手/index.html","hash":"800ddc3cf6a90b5ba42032cfef95642cdfd20477","modified":1499965737100},{"_id":"public/2017/04/22/osx下如何使用SublimeText阅读Android系统源码/index.html","hash":"f609e2849286579510a09f7b462bae898ed8c7d3","modified":1499965737101},{"_id":"public/2017/04/22/pycharm黄线问题/index.html","hash":"9dc6ccfd4de10f80f5a553e0469bb17cf178c674","modified":1499965737101},{"_id":"public/2017/04/23/30分钟搭建自己的网站/index.html","hash":"13ff2b0b79461bccb9d8fd08df2184ca9c66bfaf","modified":1499965737101},{"_id":"public/2017/04/25/Android开发之JNI深入解析/index.html","hash":"5c0c914a5027e39d1874a5332e7a1406572c3cbd","modified":1499965737101},{"_id":"public/2017/04/25/hexo本地图片发布后不能显示的问题/index.html","hash":"657f8ef0701f871a22716786c8566c01ed54f080","modified":1499965737101},{"_id":"public/2017/04/25/2015圆明园荷花节/index.html","hash":"40f68becf09c32e6743f38bb32a0c64958408a2e","modified":1499965737101},{"_id":"public/2017/04/25/2016圆明园荷花节/index.html","hash":"89482daeb5f3ec0c240203b36b802a32c616eda7","modified":1499965737102},{"_id":"public/2017/04/25/2016公司清明节坝上草原/index.html","hash":"34a0f704d6b19d68f700aee5ddc6009774c7fe73","modified":1499965737102},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/index.html","hash":"214c42ef73ae7a6d6046f4e93c4d1e343e2cfeb2","modified":1499965737102},{"_id":"public/2017/04/27/Android进程和线程/index.html","hash":"5b53869c436221a10fd68a9282e957d1b1c653e3","modified":1499965737102},{"_id":"public/2017/05/02/hexo博客换电脑后怎么办/index.html","hash":"4633b0abb9e764fbc0c359ec2eca43062b3d868b","modified":1499965737102},{"_id":"public/2017/05/03/Java字符串压缩去重/index.html","hash":"57543c6302787ffdc648b5b563a58dbfbe377bcb","modified":1499965737102},{"_id":"public/2017/05/03/算法排序之交换排序/index.html","hash":"870eb5b9e2b4a71199882c4c5e23bd347a576e53","modified":1499965737102},{"_id":"public/2017/05/03/算法查找之二分查找/index.html","hash":"87280ec9a27ff23f7bb18fa0c4891dc225b06c8c","modified":1499965737102},{"_id":"public/2017/05/04/Android性能优化之UI优化/index.html","hash":"227417ce8b91744b4ef2e3488e54b0d2afb823d7","modified":1499965737103},{"_id":"public/2017/05/05/Android关于Activity生命周期误解/index.html","hash":"c185899856869554da8ac3a61bc5ad343c48c661","modified":1499965737103},{"_id":"public/2017/05/10/Android网络框架执行流程分析/index.html","hash":"8a1fcb284b7f85aaac7e7ee5954ee686c463e315","modified":1499965737103},{"_id":"public/2017/05/10/详解设计模式之建造者模式/index.html","hash":"8ea4f7ad266220b9c4208fce9ced0100b46f7cc3","modified":1499965737103},{"_id":"public/2017/05/10/详解设计模式之责任链模式/index.html","hash":"b35e63c1549ea5f66d615d2a023603ff09099c33","modified":1499965737103},{"_id":"public/2017/05/10/农夫带着狼、羊和白菜过河问题/index.html","hash":"02edff1b97e716c0e58869ef9e4f648f148da71d","modified":1499965737103},{"_id":"public/2017/05/11/四个人过桥问题/index.html","hash":"1f1789eac34670ef329263ce13f604930322ee7c","modified":1499965737104},{"_id":"public/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/index.html","hash":"9e3c01de62e4da64c3f0aa70ddde3303f69a2577","modified":1499965737104},{"_id":"public/2017/05/16/数学归纳法/index.html","hash":"82f37ff02743f7715a2e4f9556c1432b14e99710","modified":1499965737104},{"_id":"public/2017/05/16/算法排序之快速排序/index.html","hash":"418d35a5d5c2decd0ad3cad65b1be08d31bdbd34","modified":1499965737104},{"_id":"public/2017/05/17/设计一个有获取元素最小值getMin的栈/index.html","hash":"f5fd41173ba973584840c1164b9edc542568ef21","modified":1499965737104},{"_id":"public/2017/05/18/两个栈实现队列功能/index.html","hash":"cc0f116d5f27ecdc40cf3afb869a135ea4a25ef7","modified":1499965737104},{"_id":"public/2017/05/25/算法之朴素模式匹配/index.html","hash":"c0ab5acedc072bab459a427b221d1529ec5682b0","modified":1499965737105},{"_id":"public/2017/06/26/Python入门系列-3-元组、列表和字典/index.html","hash":"3a735706b4db7cb6b88b94b491a76b11831a523f","modified":1499965737105},{"_id":"public/2017/06/27/Django创建数据表时syncdb提示Unknown-command：‘syncdb/index.html","hash":"fb4d36be184892b1afe246f4b2cac46ab94253f2","modified":1499965737105},{"_id":"public/2017/06/30/Java知识点/index.html","hash":"54188489b9d4a93b89374ae297379601d16bc8a7","modified":1499965737105},{"_id":"public/2017/07/13/Mac下配置adb/index.html","hash":"97be7fce688eecc2a8fc1c47cf189367a1dfbff7","modified":1499965737105},{"_id":"public/archives/index.html","hash":"9dd4c0c12aa99c0567c8b5cf986ac4ece5dfee87","modified":1499965737105},{"_id":"public/archives/page/2/index.html","hash":"9183c21c3a7de5b62dc836a58d7caae6867cca6d","modified":1499965737106},{"_id":"public/archives/page/3/index.html","hash":"f9b86928fee79633100f0ba35b09403658561561","modified":1499965737107},{"_id":"public/archives/page/4/index.html","hash":"d48b08acd6460ab1e4ad45f6effa5e53de45247c","modified":1499965737108},{"_id":"public/archives/page/5/index.html","hash":"5cbd7dae3e5b8d6385dfe55ab9c5ba41017f170f","modified":1499965737108},{"_id":"public/archives/2017/index.html","hash":"4f243b0299db4a166523bab8b41dfc4cc57bfc0e","modified":1499965737108},{"_id":"public/archives/2017/page/2/index.html","hash":"f484bf5fa234283ac06fc59c585db189af4a9028","modified":1499965737108},{"_id":"public/archives/2017/page/3/index.html","hash":"bdafdd077f28df1ec7630bfa0dc2b88d05afd0d9","modified":1499965737108},{"_id":"public/archives/2017/page/4/index.html","hash":"3cce6cbc7384e5fc8d83916e460a82cdc3b5173b","modified":1499965737108},{"_id":"public/archives/2017/page/5/index.html","hash":"0c715d3bb1e43af7d29fa2bfba6f1b737c6108f1","modified":1499965737108},{"_id":"public/archives/2017/04/index.html","hash":"30c9f3d670e9c0893bc2cf01370f9612ad8fcc9a","modified":1499965737109},{"_id":"public/archives/2017/04/page/2/index.html","hash":"54db571d74cd742646195427156f8345731525af","modified":1499965737109},{"_id":"public/archives/2017/04/page/3/index.html","hash":"ca85f97f3f2e0411fa60eb5dc137908734be4bb2","modified":1499965737109},{"_id":"public/archives/2017/05/index.html","hash":"4b41128f175620cbfb4136349705e4af3bdffd8e","modified":1499965737109},{"_id":"public/archives/2017/05/page/2/index.html","hash":"264e50eebb85061ba9e127d8debe0609f90395d7","modified":1499965737109},{"_id":"public/archives/2017/06/index.html","hash":"9721df376ff8d7ea075911fa50351e4a3db44bd2","modified":1499965737109},{"_id":"public/archives/2017/07/index.html","hash":"6d603826cbcd3064cfa629abc5f155c68a0afa5d","modified":1499965737109},{"_id":"public/categories/生活/index.html","hash":"699bac60bb6436f042d0ae125a5222653ed7ee36","modified":1499965737109},{"_id":"public/categories/网络/index.html","hash":"fca614bb6ab897bab0d0b39d465e094274caa307","modified":1499965737110},{"_id":"public/categories/Android/index.html","hash":"7f40698ef730fb9a41ac6d657541ecc462ec77a0","modified":1499965737110},{"_id":"public/categories/Android/page/2/index.html","hash":"e98e61e04f2921debcdc0e26e71d18f510a18a65","modified":1499965737110},{"_id":"public/categories/Python/index.html","hash":"a24d4f12b27c132457aafd8e97b2d11790243392","modified":1499965737110},{"_id":"public/categories/Java/index.html","hash":"84c6e641f57ce739f978eb4077b05c58be03d8b0","modified":1499965737110},{"_id":"public/categories/工具/index.html","hash":"95ab659a959558a1c9f01c02b1d5b50b891e5324","modified":1499965737110},{"_id":"public/categories/设计模式/index.html","hash":"30923c42e2ecf11b496294944446bd1ffde4a3cb","modified":1499965737110},{"_id":"public/categories/职场杂谈/index.html","hash":"47d57f51e63e86f64416ddcab87367fde7220c70","modified":1499965737110},{"_id":"public/categories/算法/index.html","hash":"b0b565503e18da51d284fd989a612cade3bc0b74","modified":1499965737110},{"_id":"public/categories/趣题/index.html","hash":"c218add2d7834e6ad2c3548657c1d5eb7a9ddce2","modified":1499965737111},{"_id":"public/categories/程序员的数学/index.html","hash":"b37de1366ba6efc452f4c016eaea88b48e2e7b1b","modified":1499965737111},{"_id":"public/index.html","hash":"27d4b9ab8392e41221c74ba56f30fdf983028ad9","modified":1499965737111},{"_id":"public/page/2/index.html","hash":"498bd72f3c5f926a7c62a839fcc800af7131c02a","modified":1499965737111},{"_id":"public/page/3/index.html","hash":"1a9d5cd13d65324f16e46087f828effd3ffae09e","modified":1499965737111},{"_id":"public/page/4/index.html","hash":"7e48991070629b044e5654d15f5a33c49b2f54d1","modified":1499965737111},{"_id":"public/page/5/index.html","hash":"880fcd48a18f46b76a156c4aab730137619046ec","modified":1499965737137},{"_id":"public/tags/生活/index.html","hash":"fe5d62c4be96d5607801a562b00ed18c0fdecb3d","modified":1499965737137},{"_id":"public/tags/网络/index.html","hash":"d8aeee98165ac95feff5c57dbdbe8e74fd8a436b","modified":1499965737137},{"_id":"public/tags/Android/index.html","hash":"c9fb95bf347b837b6e18430d5da9cac4ee3a958f","modified":1499965737137},{"_id":"public/tags/Android/page/2/index.html","hash":"b6ae0e57ddb4d72f39dac0b00be217b5eddde760","modified":1499965737137},{"_id":"public/tags/Python/index.html","hash":"452f713e0550e30aae441c72030b2eaaa264a471","modified":1499965737137},{"_id":"public/tags/Java/index.html","hash":"9af9ae3a2abd41b4313fd661dad28c1e7916e793","modified":1499965737137},{"_id":"public/tags/工具/index.html","hash":"1e8bbf0d8deb9577d1dcafe0a9a72ecf2472cf8a","modified":1499965737137},{"_id":"public/tags/设计模式/index.html","hash":"790ef3d24c31ad2b3a9b1da40805f0979ae76029","modified":1499965737138},{"_id":"public/tags/职场杂谈/index.html","hash":"ab710d3650f69c55e8763b7b7161c6dc9a51b50b","modified":1499965737138},{"_id":"public/tags/算法/index.html","hash":"b4f00ed1a3aeef1eb06cd81b6272dee3efb04103","modified":1499965737138},{"_id":"public/tags/趣题/index.html","hash":"91f3f3c693dbbde6370be3f4ab1854efb518a024","modified":1499965737138},{"_id":"public/tags/程序员的数学/index.html","hash":"270192322f50e5de71450184e599f60b596a7172","modified":1499965737138},{"_id":"public/CNAME","hash":"4d6ad5941eb82092c055b8495d5fad1ea792e578","modified":1499965737138},{"_id":"public/image/weixin.png","hash":"8b79c4caf0cb7c2cee0f034c77e772021cb030ef","modified":1499965737138},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1499965737138},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1499965737138},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1499965737138},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1499965737138},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1499965737138},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1499965737138},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1499965737139},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1499965737139},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1499965737139},{"_id":"public/2017/05/10/Android网络框架执行流程分析/流程.png","hash":"6d4d1136ff206a04c1b74d6e30aae272a19eafa5","modified":1499965737139},{"_id":"public/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png","hash":"9dbdbd65bab90c5352370e5d36acfd07273f4145","modified":1499965737139},{"_id":"public/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png","hash":"a00d2b50faeaf760c57b3ea66651b1d7193c1d39","modified":1499965737139},{"_id":"public/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png","hash":"36238ae43e26397f774c65c9ce10a5f83be59215","modified":1499965737139},{"_id":"public/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png","hash":"f74cf134edf54b4e55d8df0e6c9b5d3630006665","modified":1499965737139},{"_id":"public/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png","hash":"8e07868047b036caacf006f004a3de013cb11c19","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112393720.jpg","hash":"b1c2c8a583fc699b06538430993c80390125c446","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112396013.jpg","hash":"9c5244967054cafe06bc2c664121cd6168779993","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112398170.jpg","hash":"96c4b59cffff416f920a82ca6b2e2b2e79cd3621","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112400267.jpg","hash":"1963b1b85ed7ca762f5c1e4f4761a70b63830436","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112402523.jpg","hash":"0d5f3956b59608b523bbe1f0c90570f01cd211d6","modified":1499965737139},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112405316.jpg","hash":"80d99017a1536f5ebe650057bd03d7378070f78b","modified":1499965737139},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png","hash":"23d4d41ee705d2a53d8823da0008b1a5cb49ef1c","modified":1499965737139},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.21.48.png","hash":"f6005c31a725e55955a612e075c980b638b3c801","modified":1499965737139},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png","hash":"d3c407d21cca28dd6efe53c3c49c3b49636704ff","modified":1499965737139},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png","hash":"68d7e653a1005d1e73024cb8ea8fbc2731777a79","modified":1499965737139},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png","hash":"3ca00b29315f30e0a6d715ed11aec4577b8ed4a7","modified":1499965737139},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.57.46.png","hash":"9b4989e0bb92980672882b05ccf49e48c91fea9b","modified":1499965737139},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午12.26.47.png","hash":"41789b81c2fa5e7d6654d0a299aa844e4e3091d4","modified":1499965737139},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午9.49.56.png","hash":"5a279dc5923c44e761031e95002e9a29bdbf0a9a","modified":1499965737140},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png","hash":"c238b16f19b4ebf921d74c2580755f38eb69ac35","modified":1499965737140},{"_id":"public/image/avatar.jpg","hash":"1262fa1c2cd4a1c1e9a0475ef1865d0818175a89","modified":1499965737156},{"_id":"public/2017/04/25/2016圆明园荷花节/mmexport1493112391191.jpg","hash":"2b68aeaac0f687cfa8368184faec7fdec3f97b94","modified":1499965737158},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png","hash":"2286365e7cffc5a42624d41ed0ff862d120a0780","modified":1499965737159},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png","hash":"d2d08200b0aba19179903417a9bc338d421accc6","modified":1499965737160},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png","hash":"3cbadb4dfedf23cf807dad7061666894d3d321ca","modified":1499965737160},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png","hash":"bfc2e17ce7ec253dbb876f6f5f7b37541edfd893","modified":1499965737160},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png","hash":"cdd90a2769b98ac3a51eb0c2167448bdc2c04ead","modified":1499965737160},{"_id":"public/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png","hash":"7547cac237c52b5a55c883117a4731e5fcc9a21c","modified":1499965737160},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1499965737180},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1499965737180},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1499965737181},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1499965737181},{"_id":"public/image/alipay.jpg","hash":"d9c8084299f79c67cecc01242f83554dab75f9e4","modified":1499965737181},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png","hash":"b346dd2a664e6b306369fd760fd150df576f7404","modified":1499965737181},{"_id":"public/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png","hash":"50622ee73aff94b566796ec4f45a0d4fdb8b4405","modified":1499965737189},{"_id":"public/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg","hash":"52a75130e228a32d037ec4dbec556c01c26e5fa9","modified":1499965737189},{"_id":"public/2017/04/25/2015圆明园荷花节/psb1.jpeg","hash":"d80b5ed042dacf934c5ad1b9affbb56ba0ae7fb5","modified":1499965737245},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610081259_IMG_6245.JPG","hash":"be8e8a8a757928733830cff4537802921ad2091f","modified":1499965737289},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610091441_IMG_6323.JPG","hash":"cc389e61386b83f5ce18246b594478e423274d5c","modified":1499965737305},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610075842_IMG_6219.JPG","hash":"ae26053b2b8f4dee67bab69acbe225a80d8076fd","modified":1499965737321},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610080912_IMG_6235.JPG","hash":"fbeb762f3541d0954ad578558492f48a7abba4d2","modified":1499965737321},{"_id":"public/2017/04/25/2015圆明园荷花节/psb4.jpeg","hash":"2c5af6e38cd60180eb8ac7fa98a2a83f44758942","modified":1499965737350},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610082906_IMG_6261.JPG","hash":"e6e7e11f4f6de850ddf925d24896cfcd5944d14c","modified":1499965737353},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610102213_IMG_6353.JPG","hash":"a2f14eb6fbfcf1fbcc084bd90a8d614030e39311","modified":1499965737390},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610110010_IMG_6396.JPG","hash":"148a5f5bdb7ace4ade1791da2dba67db50122792","modified":1499965737390},{"_id":"public/2017/04/25/2015圆明园荷花节/psb5.jpeg","hash":"7010bd8e83d1fa3fd1e7a246ab83d55540b5fcf4","modified":1499965737835},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610083541_IMG_6276.JPG","hash":"b9d92e6e71c5984caa23d897fb5669c8981cf33d","modified":1499965738153},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610095757_IMG_6325.JPG","hash":"c579d0733c4491c8fb0fa1301a0100fe1e67d07b","modified":1499965738153},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610104345_IMG_6371.JPG","hash":"7d6673579bc361052e2118c0515af3c1ece7f055","modified":1499965738154},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610101355_IMG_6343.JPG","hash":"772d9ac49f90f8dd67738d41ab7b72ebd9c9015d","modified":1499965738156},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610075354_IMG_6200.JPG","hash":"c81a26d766979f0203d1c91427134fc9c315adbb","modified":1499965738161},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610100357_IMG_6326.JPG","hash":"b677c649cb3266d7fc355ae80f99e3d714c8446f","modified":1499965738163},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610075557_IMG_6209.JPG","hash":"43e703a6c743a380d7060f11fb001a9b85edeffe","modified":1499965738187},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610084538_IMG_6283.JPG","hash":"ccdb0d7a49b927a0a557ed2882d3e67127280c8e","modified":1499965738217},{"_id":"public/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif","hash":"0a558cb121714b05daf2673edf86b45609cb890c","modified":1499965738379},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610101211_IMG_6337.JPG","hash":"7230d86300f9c0499507ac88aca12025b26274f2","modified":1499965738381},{"_id":"public/2017/04/25/2016公司清明节坝上草原/20160610101300_IMG_6342.JPG","hash":"fc39fea0b5ea8172840713b5cd3430b9da2a48bf","modified":1499965738724},{"_id":"public/2017/04/25/2015圆明园荷花节/psb2.jpeg","hash":"9f4b48a3f872e86bb604fd09f38fba40cf25cd09","modified":1499965739114},{"_id":"public/2017/04/25/2015圆明园荷花节/psb3.jpeg","hash":"bbd0d8d23cea5c6136454a6b94239cf932a09dc8","modified":1499965739118},{"_id":"public/2017/04/25/2015圆明园荷花节/psb6.jpeg","hash":"33d745b867503d31865b00e6e237d74b508b3cc0","modified":1499965739120},{"_id":"public/2017/04/25/2015圆明园荷花节/psb7.jpeg","hash":"e5cd925b599ea52b1fc723908c425e237a357bc0","modified":1499965739131},{"_id":"public/2017/04/25/2015圆明园荷花节/psb.jpeg","hash":"f6f6edd5fb92833d845b4d938ea3b956c3239d24","modified":1499965739367}],"Category":[{"name":"生活","_id":"cj52ot7jr0004449csztgoes6"},{"name":"网络","_id":"cj52ot7kf0009449cjp2ziduv"},{"name":"Android","_id":"cj52ot7l1000n449cwr4rqd4g"},{"name":"Python","_id":"cj52ot7m0001m449cxwjrpad1"},{"name":"Java","_id":"cj52ot7ma001u449cxlslhntt"},{"name":"工具","_id":"cj52ot7mv002b449c9v5np2c3"},{"name":"设计模式","_id":"cj52ot7o10037449crqkp7tp0"},{"name":"职场杂谈","_id":"cj52ot7ok003n449cnxxgabtg"},{"name":"算法","_id":"cj52ot7ot003x449ceqt4vjji"},{"name":"趣题","_id":"cj52ot7p30046449cqoihvyjy"},{"name":"程序员的数学","_id":"cj52ot7pp004m449cuzc0x32a"}],"Data":[],"Page":[{"title":"分类","date":"2017-04-22T09:16:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-04-22 17:16:26\ntype: \"categories\"\n---\n","updated":"2017-04-22T09:19:24.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj52ot7jg0001449cuv2wvosu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-04-22T09:16:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-04-22 17:16:02\ntype: \"tags\"\n---\n","updated":"2017-04-22T09:19:10.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj52ot7jo0003449csr3pin85","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-04-22T09:00:42.000Z","_content":"\n>一个从运维转战开发的程序猿。2012年因为兴趣自学Android。\n\n#### 我的经历\n- 2010年野鸡专科毕业\n- 2011年，财政局做了一年的数据维护\n- 2013年，做了一年的IPTV Android机顶盒开发\n- 2014年3-6月，做了三个月政府审查上报类项目Android客户端，负责框架搭建\n- 2014年9月到2016年10月，做了两年Android IM即时通讯APP聊天功能开发及维护并各种性能优化。\n\n#### 自我评价\n- 热爱编程，喜欢看书自我驱动型学习，\n- 热爱户外，喜欢和驴友徒步穿越\n- 喜欢摄影，喜欢用镜头留住精彩的瞬间\n\n#### 联系我\n\nQQ:\t840418528\nEmail:\tsongjlforever@foxmail.com","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-04-22 17:00:42\n---\n\n>一个从运维转战开发的程序猿。2012年因为兴趣自学Android。\n\n#### 我的经历\n- 2010年野鸡专科毕业\n- 2011年，财政局做了一年的数据维护\n- 2013年，做了一年的IPTV Android机顶盒开发\n- 2014年3-6月，做了三个月政府审查上报类项目Android客户端，负责框架搭建\n- 2014年9月到2016年10月，做了两年Android IM即时通讯APP聊天功能开发及维护并各种性能优化。\n\n#### 自我评价\n- 热爱编程，喜欢看书自我驱动型学习，\n- 热爱户外，喜欢和驴友徒步穿越\n- 喜欢摄影，喜欢用镜头留住精彩的瞬间\n\n#### 联系我\n\nQQ:\t840418528\nEmail:\tsongjlforever@foxmail.com","updated":"2017-07-13T16:05:12.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj52ot7r2005g449clamxayvr","content":"<blockquote>\n<p>一个从运维转战开发的程序猿。2012年因为兴趣自学Android。</p>\n</blockquote>\n<h4 id=\"我的经历\"><a href=\"#我的经历\" class=\"headerlink\" title=\"我的经历\"></a>我的经历</h4><ul>\n<li>2010年野鸡专科毕业</li>\n<li>2011年，财政局做了一年的数据维护</li>\n<li>2013年，做了一年的IPTV Android机顶盒开发</li>\n<li>2014年3-6月，做了三个月政府审查上报类项目Android客户端，负责框架搭建</li>\n<li>2014年9月到2016年10月，做了两年Android IM即时通讯APP聊天功能开发及维护并各种性能优化。</li>\n</ul>\n<h4 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h4><ul>\n<li>热爱编程，喜欢看书自我驱动型学习，</li>\n<li>热爱户外，喜欢和驴友徒步穿越</li>\n<li>喜欢摄影，喜欢用镜头留住精彩的瞬间</li>\n</ul>\n<h4 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h4><p>QQ:    840418528<br>Email:    songjlforever@foxmail.com</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一个从运维转战开发的程序猿。2012年因为兴趣自学Android。</p>\n</blockquote>\n<h4 id=\"我的经历\"><a href=\"#我的经历\" class=\"headerlink\" title=\"我的经历\"></a>我的经历</h4><ul>\n<li>2010年野鸡专科毕业</li>\n<li>2011年，财政局做了一年的数据维护</li>\n<li>2013年，做了一年的IPTV Android机顶盒开发</li>\n<li>2014年3-6月，做了三个月政府审查上报类项目Android客户端，负责框架搭建</li>\n<li>2014年9月到2016年10月，做了两年Android IM即时通讯APP聊天功能开发及维护并各种性能优化。</li>\n</ul>\n<h4 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h4><ul>\n<li>热爱编程，喜欢看书自我驱动型学习，</li>\n<li>热爱户外，喜欢和驴友徒步穿越</li>\n<li>喜欢摄影，喜欢用镜头留住精彩的瞬间</li>\n</ul>\n<h4 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h4><p>QQ:    840418528<br>Email:    songjlforever@foxmail.com</p>\n"},{"title":"photos","date":"2017-07-13T16:17:22.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2017-07-14 00:17:22\n---\n","updated":"2017-07-13T16:17:22.000Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cj52ot7rc005h449chzh3i810","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2016公司清明节坝上草原","date":"2017-04-25T09:35:56.000Z","_content":"\n\n\n# 说在前面的话\n\n公司应承了很久的出游终于兑现了。不过讲真公司还是比较抠门，两年一次的出游只有两天时间，其中赶路时间就占了一半。\n\n目的：丰宁坝上草原\n\n人物：公司同事\n\n在草原玩的照片基本没有拍，当天到那就下午三四点。而后又阴天下雨了，基本没有怎么玩，拍的比较多的是行宫和湖边。\n\n# 上图\n\n\n\n到了行宫，看到骑兵都忍不住上前合影：\n\n小鱼同志，身高不够，蹦起来够~\n\n![20160610075354_IMG_6200](2016公司清明节坝上草原/20160610075354_IMG_6200.JPG)\n\n\n\n\n\n我就刚刚好了。\n\n![20160610075557_IMG_6209](2016公司清明节坝上草原/20160610075557_IMG_6209.JPG)\n\n\n\n主任幸福的一家~\n\n![20160610075842_IMG_6219](2016公司清明节坝上草原/20160610075842_IMG_6219.JPG)\n\n\n\n进入行宫大门不久后需要经过的南天门：\n\n![20160610080912_IMG_6235](2016公司清明节坝上草原/20160610080912_IMG_6235.JPG)\n\n\n\n回顾行宫大门，白云压顶，壮观~\n\n![20160610081259_IMG_6245](2016公司清明节坝上草原/20160610081259_IMG_6245.JPG)\n\n\n\n这好似是一个古代官员的蒙古包~\n\n![20160610082906_IMG_6261](2016公司清明节坝上草原/20160610082906_IMG_6261.JPG)\n\n\n\n嗯~没错，三贱客哈哈\n\n![20160610083541_IMG_6276](2016公司清明节坝上草原/20160610083541_IMG_6276.JPG)\n\n\n\n从小迷宫走出来时，工作人员给的哈达~妥妥的披上。\n\n![20160610084538_IMG_6283](2016公司清明节坝上草原/20160610084538_IMG_6283.JPG)\n\n\n\n\n\n蓝天白云南天门，怎一个美字了得！\n\n![20160610091441_IMG_6323](2016公司清明节坝上草原/20160610091441_IMG_6323.JPG)\n\n\n\n\n\n湿地大门口留念。小鱼、佳姐和李博。\n\n![20160610100357_IMG_6326](2016公司清明节坝上草原/20160610100357_IMG_6326.JPG)\n\n\n\n老李的风采，感觉要立地成佛。\n\n![20160610101211_IMG_6337](2016公司清明节坝上草原/20160610101211_IMG_6337.JPG)\n\n\n\n小末哥看起来好厉害的样子，这样子回公司会不会挨收拾？\n\n![20160610101300_IMG_6342](2016公司清明节坝上草原/20160610101300_IMG_6342.JPG)\n\n\n\n主任家的公子套上小鱼的衣服。可爱，那么小就那么帅，长大了还了得\n\n![20160610101355_IMG_6343](2016公司清明节坝上草原/20160610101355_IMG_6343.JPG)\n\n\n\n远处的白云、草浪\n\n![20160610102213_IMG_6353](2016公司清明节坝上草原/20160610102213_IMG_6353.JPG)","source":"_posts/2016公司清明节坝上草原.md","raw":"---\ntitle: 2016公司清明节坝上草原\ndate: 2017-04-25 17:35:56\ntags: 生活\ncategories: 生活\n---\n\n\n\n# 说在前面的话\n\n公司应承了很久的出游终于兑现了。不过讲真公司还是比较抠门，两年一次的出游只有两天时间，其中赶路时间就占了一半。\n\n目的：丰宁坝上草原\n\n人物：公司同事\n\n在草原玩的照片基本没有拍，当天到那就下午三四点。而后又阴天下雨了，基本没有怎么玩，拍的比较多的是行宫和湖边。\n\n# 上图\n\n\n\n到了行宫，看到骑兵都忍不住上前合影：\n\n小鱼同志，身高不够，蹦起来够~\n\n![20160610075354_IMG_6200](2016公司清明节坝上草原/20160610075354_IMG_6200.JPG)\n\n\n\n\n\n我就刚刚好了。\n\n![20160610075557_IMG_6209](2016公司清明节坝上草原/20160610075557_IMG_6209.JPG)\n\n\n\n主任幸福的一家~\n\n![20160610075842_IMG_6219](2016公司清明节坝上草原/20160610075842_IMG_6219.JPG)\n\n\n\n进入行宫大门不久后需要经过的南天门：\n\n![20160610080912_IMG_6235](2016公司清明节坝上草原/20160610080912_IMG_6235.JPG)\n\n\n\n回顾行宫大门，白云压顶，壮观~\n\n![20160610081259_IMG_6245](2016公司清明节坝上草原/20160610081259_IMG_6245.JPG)\n\n\n\n这好似是一个古代官员的蒙古包~\n\n![20160610082906_IMG_6261](2016公司清明节坝上草原/20160610082906_IMG_6261.JPG)\n\n\n\n嗯~没错，三贱客哈哈\n\n![20160610083541_IMG_6276](2016公司清明节坝上草原/20160610083541_IMG_6276.JPG)\n\n\n\n从小迷宫走出来时，工作人员给的哈达~妥妥的披上。\n\n![20160610084538_IMG_6283](2016公司清明节坝上草原/20160610084538_IMG_6283.JPG)\n\n\n\n\n\n蓝天白云南天门，怎一个美字了得！\n\n![20160610091441_IMG_6323](2016公司清明节坝上草原/20160610091441_IMG_6323.JPG)\n\n\n\n\n\n湿地大门口留念。小鱼、佳姐和李博。\n\n![20160610100357_IMG_6326](2016公司清明节坝上草原/20160610100357_IMG_6326.JPG)\n\n\n\n老李的风采，感觉要立地成佛。\n\n![20160610101211_IMG_6337](2016公司清明节坝上草原/20160610101211_IMG_6337.JPG)\n\n\n\n小末哥看起来好厉害的样子，这样子回公司会不会挨收拾？\n\n![20160610101300_IMG_6342](2016公司清明节坝上草原/20160610101300_IMG_6342.JPG)\n\n\n\n主任家的公子套上小鱼的衣服。可爱，那么小就那么帅，长大了还了得\n\n![20160610101355_IMG_6343](2016公司清明节坝上草原/20160610101355_IMG_6343.JPG)\n\n\n\n远处的白云、草浪\n\n![20160610102213_IMG_6353](2016公司清明节坝上草原/20160610102213_IMG_6353.JPG)","slug":"2016公司清明节坝上草原","published":1,"updated":"2017-04-25T10:00:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7j80000449cz3tjvh3x","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>公司应承了很久的出游终于兑现了。不过讲真公司还是比较抠门，两年一次的出游只有两天时间，其中赶路时间就占了一半。</p>\n<p>目的：丰宁坝上草原</p>\n<p>人物：公司同事</p>\n<p>在草原玩的照片基本没有拍，当天到那就下午三四点。而后又阴天下雨了，基本没有怎么玩，拍的比较多的是行宫和湖边。</p>\n<h1 id=\"上图\"><a href=\"#上图\" class=\"headerlink\" title=\"上图\"></a>上图</h1><p>到了行宫，看到骑兵都忍不住上前合影：</p>\n<p>小鱼同志，身高不够，蹦起来够~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075354_IMG_6200.JPG\" alt=\"20160610075354_IMG_6200\"></p>\n<p>我就刚刚好了。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075557_IMG_6209.JPG\" alt=\"20160610075557_IMG_6209\"></p>\n<p>主任幸福的一家~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075842_IMG_6219.JPG\" alt=\"20160610075842_IMG_6219\"></p>\n<p>进入行宫大门不久后需要经过的南天门：</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610080912_IMG_6235.JPG\" alt=\"20160610080912_IMG_6235\"></p>\n<p>回顾行宫大门，白云压顶，壮观~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610081259_IMG_6245.JPG\" alt=\"20160610081259_IMG_6245\"></p>\n<p>这好似是一个古代官员的蒙古包~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610082906_IMG_6261.JPG\" alt=\"20160610082906_IMG_6261\"></p>\n<p>嗯~没错，三贱客哈哈</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610083541_IMG_6276.JPG\" alt=\"20160610083541_IMG_6276\"></p>\n<p>从小迷宫走出来时，工作人员给的哈达~妥妥的披上。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610084538_IMG_6283.JPG\" alt=\"20160610084538_IMG_6283\"></p>\n<p>蓝天白云南天门，怎一个美字了得！</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610091441_IMG_6323.JPG\" alt=\"20160610091441_IMG_6323\"></p>\n<p>湿地大门口留念。小鱼、佳姐和李博。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610100357_IMG_6326.JPG\" alt=\"20160610100357_IMG_6326\"></p>\n<p>老李的风采，感觉要立地成佛。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101211_IMG_6337.JPG\" alt=\"20160610101211_IMG_6337\"></p>\n<p>小末哥看起来好厉害的样子，这样子回公司会不会挨收拾？</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101300_IMG_6342.JPG\" alt=\"20160610101300_IMG_6342\"></p>\n<p>主任家的公子套上小鱼的衣服。可爱，那么小就那么帅，长大了还了得</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101355_IMG_6343.JPG\" alt=\"20160610101355_IMG_6343\"></p>\n<p>远处的白云、草浪</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610102213_IMG_6353.JPG\" alt=\"20160610102213_IMG_6353\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>公司应承了很久的出游终于兑现了。不过讲真公司还是比较抠门，两年一次的出游只有两天时间，其中赶路时间就占了一半。</p>\n<p>目的：丰宁坝上草原</p>\n<p>人物：公司同事</p>\n<p>在草原玩的照片基本没有拍，当天到那就下午三四点。而后又阴天下雨了，基本没有怎么玩，拍的比较多的是行宫和湖边。</p>\n<h1 id=\"上图\"><a href=\"#上图\" class=\"headerlink\" title=\"上图\"></a>上图</h1><p>到了行宫，看到骑兵都忍不住上前合影：</p>\n<p>小鱼同志，身高不够，蹦起来够~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075354_IMG_6200.JPG\" alt=\"20160610075354_IMG_6200\"></p>\n<p>我就刚刚好了。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075557_IMG_6209.JPG\" alt=\"20160610075557_IMG_6209\"></p>\n<p>主任幸福的一家~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610075842_IMG_6219.JPG\" alt=\"20160610075842_IMG_6219\"></p>\n<p>进入行宫大门不久后需要经过的南天门：</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610080912_IMG_6235.JPG\" alt=\"20160610080912_IMG_6235\"></p>\n<p>回顾行宫大门，白云压顶，壮观~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610081259_IMG_6245.JPG\" alt=\"20160610081259_IMG_6245\"></p>\n<p>这好似是一个古代官员的蒙古包~</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610082906_IMG_6261.JPG\" alt=\"20160610082906_IMG_6261\"></p>\n<p>嗯~没错，三贱客哈哈</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610083541_IMG_6276.JPG\" alt=\"20160610083541_IMG_6276\"></p>\n<p>从小迷宫走出来时，工作人员给的哈达~妥妥的披上。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610084538_IMG_6283.JPG\" alt=\"20160610084538_IMG_6283\"></p>\n<p>蓝天白云南天门，怎一个美字了得！</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610091441_IMG_6323.JPG\" alt=\"20160610091441_IMG_6323\"></p>\n<p>湿地大门口留念。小鱼、佳姐和李博。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610100357_IMG_6326.JPG\" alt=\"20160610100357_IMG_6326\"></p>\n<p>老李的风采，感觉要立地成佛。</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101211_IMG_6337.JPG\" alt=\"20160610101211_IMG_6337\"></p>\n<p>小末哥看起来好厉害的样子，这样子回公司会不会挨收拾？</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101300_IMG_6342.JPG\" alt=\"20160610101300_IMG_6342\"></p>\n<p>主任家的公子套上小鱼的衣服。可爱，那么小就那么帅，长大了还了得</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610101355_IMG_6343.JPG\" alt=\"20160610101355_IMG_6343\"></p>\n<p>远处的白云、草浪</p>\n<p><img src=\"/2017/04/25/2016公司清明节坝上草原/20160610102213_IMG_6353.JPG\" alt=\"20160610102213_IMG_6353\"></p>\n"},{"title":"Hexo+GitHub 30分钟拥有属于自己的网站","date":"2017-04-23T04:57:00.000Z","_content":"# 说在前面的话\n\n>很多ITer都想拥有一个个人网站，记录自己工作经验和生活。哪怕已经有了简书这样好的一个平台，但是那种情节并没有就此打消。下面给大家分享下我个人网站创建流程及中途遇到的坑，希望对那些想建站却又嫌麻烦的朋友有所帮助。\n\n# 准备工作\n在开始前要做好系列准备工作，如环境搭建、GitHub账号注册等。下面分别来看下要做哪些：\n\n## GitHub官网\n- 账号注册\n\t如果你还没有GitHub账号，请前往[官网注册](https://github.com/)。如果已经注册过，请登录\n\t\n- 创建仓库\n\t登录后，点击左上角+号创建仓库：\n  ![index.png](http://upload-images.jianshu.io/upload_images/1796052-076ccee5f6f8713c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 在新的创建页面，写上   yourname.github.io ，然后下方选框勾上(我当时没有勾后来本地文件向git提交时出了点小问题)。yourname最好就是你的GitHub的名字，\n\n![index1.png](http://upload-images.jianshu.io/upload_images/1796052-68a0ed4e1dd8fc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Git客户端安装\n\n- 安装\n\tGit可以直接从[官网下载](https://git-scm.com/downloads) 系统版本自行选择。\nGit安装基本也可以认为一路next点过来，如果你的 on the Desktop没有勾选的话，为了方便可以勾选上\n\n![index3.png](http://upload-images.jianshu.io/upload_images/1796052-1b1909354d7db0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 验证\n\t同样为了查看是否正确安装，需要从命令行查看能否正确显示版本信息：\n\t```\n\tgit --version\n\t```\n如果显示了版本信息，则说明正确安装：\n```\ngit version 2.12.2.windows.2\n```\n- 配置git\n\t- 配置Git的user name和email：\n\t```\n\tgit config --global user.name \"你的名字\"\n\tgit config --global user.email \"你的git使用的邮箱\"\n\t```\n\t- 生成密钥：\n\t\t使用ssh-keygen -t rsa -C 你的git使用的邮箱 命令生成密钥，输入命令后连续点击好像三四次回车就行，出现的一些设置提示不用管，全部默认就行。执行完成后会生成密钥文件如图：\n\n![index4.png](http://upload-images.jianshu.io/upload_images/1796052-6a752a526843a255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 密钥和GitHub关联\n\t编辑器打开id_rsa.pub复制所有内容。\n\t打开GitHub Setting如图：\n\n  ![index5.png](http://upload-images.jianshu.io/upload_images/1796052-fbd7fecb18c1669f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 找到SSH key，点击new SSH key，把内容粘贴到key文本框中，title随意起，保存，如下图：\n![index6.png](http://upload-images.jianshu.io/upload_images/1796052-091de6d5aa8682a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Node.js\n- 安装\n\t我笔记本是win系统，所以关于Node.js下载：\n [32位下载](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi) \n [64位下载](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n 如果是其他系统，需要自行去官网下载。\n 关于安装没有什么注意的，反正我是一路next，如图：\n\n![index7.png](http://upload-images.jianshu.io/upload_images/1796052-c67fd55dd0a8089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 验证\n\t安装完成后，可以像JDK一样，使用命令行验证是否正确安装，在cmd命令窗口执行以下：\n\t```\n\tnode -v\n\tnpm -v\n\t```\n\t如果正确显示了当前版本号，则说明安装成功：\n\n\t```\n\tv4.2.3\n\t2.14.7\n\t```\n\t否则，请根据具体异常信息搜索下。\n\n## Hexo\n- 安装\n\t在合适地方创建一个文件夹并命名，例如我在 E盘 下创建了hexo文件夹：\n\t通过命令行进入该文件夹目录下：\n\t```\n\tC:\\Users\\Jenson>E:\n\tE:\\>cd hexo\n\tE:\\hexo>\n\t```\n\t执行 npm命令 安装hexo：\n\t```\n\tnpm install hexo-cli -g\n\t```\n\t期间cmd窗口会自动刷出一些信息，可能会有warn不过不要紧。待命令执行完毕，继续执行\n\t```\n\tnpm install hexo --save\n\t```\n\t这时又会有信息刷屏，信息滚动完毕，通过\n\n\t```\n\thexo -v\n\t```\n\t命令验证是否安装成功。\n\t如果出现了下面字样，说明安装成功了：\n![index12.png](http://upload-images.jianshu.io/upload_images/1796052-89811acc016bd532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 初体验\n\t- 窗口中继续执行\n\t``` \n\thexo init \n\t```\n\t初始化\n\t- 执行\n\t```\n\tnpm install\n\t```\n\t自动安装所需组件，直到完成\n\t- 执行\n\t```\n\thexo g\n\t```\n\t- 执行\n\t```\n\thexo s\n\t```\n\t启动本地服务，在浏览器地址栏输入\n\t```\n\thttp://localhost:4000/\n\t```\n\t看能否打开本地部署的网站，如果成功打开，恭喜你本地部署完成。\n\n# 本地hexo关联到GitHub\n\n本地网站已经可以打开，接下来要把hexo部署到GitHub上，让别人也能访问。\n在hexo目录下找到_config.yml文件，按如下格式修改成你的：\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jensonss/Jensonss.github.io.git\n  branch: master\n```\n修改完成后，执行\n```\nhexo d -g\n```\n生成部署，这样就会根据刚才的GitHub地址commit到GitHub仓库，首次的话会弹窗让你输入你的GitHub登录的用户名和密码。登录成功后就会自动commit了。\n此时通过 ```xxx.github.io``` 应该是可以访问你的网站了。\n\n# 个性域名绑定\n\n\n## 购买域名\n\n我的域名是在万网购买的，不过进入网站才发现万网成了阿里云的二级域名，不知道什么时候被阿里云收购了。购买通道[猛戳](https://wanwang.aliyun.com/),用淘宝账号直接登录，由于是个人使用所以我选了 .me 类型的，而且13元/首年价格比较便宜，以后续费价格好像是89元/年。\n\n付款时会让选择持有者是个人还是企业，选择个人，然后创建一个个人使用的信息模板，可能由于我的是.me域名，所以没有进行身份证验证也能使用。\n\n## 域名DNS解析\n购买后的域名不能直接使用，因为现在只是把域名颁发给你，但是还没有和IP地址绑定，还需要进行DNS解析。\n在你购买后，可以直接点击域名进入域名控制台，页面长这样：\n![index8.png](http://upload-images.jianshu.io/upload_images/1796052-d32c7d57b43b7559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击左侧的菜单-云解析DNS，然后再点击你的域名：\n\n![index9.png](http://upload-images.jianshu.io/upload_images/1796052-bbca539b61e74602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进入了新手引导设置：\n\n![index10.png](http://upload-images.jianshu.io/upload_images/1796052-97f979d9b478abb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果点击设置网站解析，进入的页面只能输入一个IP地址，由于GitHub有2个IP地址要绑定，所以我直接选择了高级设置，点击 添加解析，添加如下三条记录，其中xxx.github.io  ，xxx为你得GitHub配置的名称：\n\n![index11.png](http://upload-images.jianshu.io/upload_images/1796052-15f930f4842f9ba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意：CNAME 必须大写\n这样过几分钟域名就会生效了，\n\n\n\n## 域名绑定\n上一步DNS解析用到了CNAME ，现在在hexo/source目录下创建一个不带后缀的文件，名为CNAME，内容只填写你购买的域名：\n\n![图片.png](http://upload-images.jianshu.io/upload_images/1796052-617ebc06eda88723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后执行```hexo d -g```部署到GitHub上。这样就能通过你的新域名访问你的网站了。\n\n如果只是把hexo部署到GitHub上，半个小时是足够的，但是入果从找网站买域名、DNS解析、绑定。前前后后大概花了近1个小时。可能因为我有强迫症的缘故，填写一些信息时总是要想好久。\n\n话不多说，看看完成后的网站吧：[我的站点](www.jensondev.me)","source":"_posts/30分钟搭建自己的网站.md","raw":"---\ntitle: Hexo+GitHub 30分钟拥有属于自己的网站\ndate: 2017-04-23 12:57:00\ntags: 网络\ncategories: 网络\n---\n# 说在前面的话\n\n>很多ITer都想拥有一个个人网站，记录自己工作经验和生活。哪怕已经有了简书这样好的一个平台，但是那种情节并没有就此打消。下面给大家分享下我个人网站创建流程及中途遇到的坑，希望对那些想建站却又嫌麻烦的朋友有所帮助。\n\n# 准备工作\n在开始前要做好系列准备工作，如环境搭建、GitHub账号注册等。下面分别来看下要做哪些：\n\n## GitHub官网\n- 账号注册\n\t如果你还没有GitHub账号，请前往[官网注册](https://github.com/)。如果已经注册过，请登录\n\t\n- 创建仓库\n\t登录后，点击左上角+号创建仓库：\n  ![index.png](http://upload-images.jianshu.io/upload_images/1796052-076ccee5f6f8713c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 在新的创建页面，写上   yourname.github.io ，然后下方选框勾上(我当时没有勾后来本地文件向git提交时出了点小问题)。yourname最好就是你的GitHub的名字，\n\n![index1.png](http://upload-images.jianshu.io/upload_images/1796052-68a0ed4e1dd8fc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Git客户端安装\n\n- 安装\n\tGit可以直接从[官网下载](https://git-scm.com/downloads) 系统版本自行选择。\nGit安装基本也可以认为一路next点过来，如果你的 on the Desktop没有勾选的话，为了方便可以勾选上\n\n![index3.png](http://upload-images.jianshu.io/upload_images/1796052-1b1909354d7db0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 验证\n\t同样为了查看是否正确安装，需要从命令行查看能否正确显示版本信息：\n\t```\n\tgit --version\n\t```\n如果显示了版本信息，则说明正确安装：\n```\ngit version 2.12.2.windows.2\n```\n- 配置git\n\t- 配置Git的user name和email：\n\t```\n\tgit config --global user.name \"你的名字\"\n\tgit config --global user.email \"你的git使用的邮箱\"\n\t```\n\t- 生成密钥：\n\t\t使用ssh-keygen -t rsa -C 你的git使用的邮箱 命令生成密钥，输入命令后连续点击好像三四次回车就行，出现的一些设置提示不用管，全部默认就行。执行完成后会生成密钥文件如图：\n\n![index4.png](http://upload-images.jianshu.io/upload_images/1796052-6a752a526843a255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 密钥和GitHub关联\n\t编辑器打开id_rsa.pub复制所有内容。\n\t打开GitHub Setting如图：\n\n  ![index5.png](http://upload-images.jianshu.io/upload_images/1796052-fbd7fecb18c1669f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 找到SSH key，点击new SSH key，把内容粘贴到key文本框中，title随意起，保存，如下图：\n![index6.png](http://upload-images.jianshu.io/upload_images/1796052-091de6d5aa8682a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Node.js\n- 安装\n\t我笔记本是win系统，所以关于Node.js下载：\n [32位下载](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi) \n [64位下载](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n 如果是其他系统，需要自行去官网下载。\n 关于安装没有什么注意的，反正我是一路next，如图：\n\n![index7.png](http://upload-images.jianshu.io/upload_images/1796052-c67fd55dd0a8089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 验证\n\t安装完成后，可以像JDK一样，使用命令行验证是否正确安装，在cmd命令窗口执行以下：\n\t```\n\tnode -v\n\tnpm -v\n\t```\n\t如果正确显示了当前版本号，则说明安装成功：\n\n\t```\n\tv4.2.3\n\t2.14.7\n\t```\n\t否则，请根据具体异常信息搜索下。\n\n## Hexo\n- 安装\n\t在合适地方创建一个文件夹并命名，例如我在 E盘 下创建了hexo文件夹：\n\t通过命令行进入该文件夹目录下：\n\t```\n\tC:\\Users\\Jenson>E:\n\tE:\\>cd hexo\n\tE:\\hexo>\n\t```\n\t执行 npm命令 安装hexo：\n\t```\n\tnpm install hexo-cli -g\n\t```\n\t期间cmd窗口会自动刷出一些信息，可能会有warn不过不要紧。待命令执行完毕，继续执行\n\t```\n\tnpm install hexo --save\n\t```\n\t这时又会有信息刷屏，信息滚动完毕，通过\n\n\t```\n\thexo -v\n\t```\n\t命令验证是否安装成功。\n\t如果出现了下面字样，说明安装成功了：\n![index12.png](http://upload-images.jianshu.io/upload_images/1796052-89811acc016bd532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 初体验\n\t- 窗口中继续执行\n\t``` \n\thexo init \n\t```\n\t初始化\n\t- 执行\n\t```\n\tnpm install\n\t```\n\t自动安装所需组件，直到完成\n\t- 执行\n\t```\n\thexo g\n\t```\n\t- 执行\n\t```\n\thexo s\n\t```\n\t启动本地服务，在浏览器地址栏输入\n\t```\n\thttp://localhost:4000/\n\t```\n\t看能否打开本地部署的网站，如果成功打开，恭喜你本地部署完成。\n\n# 本地hexo关联到GitHub\n\n本地网站已经可以打开，接下来要把hexo部署到GitHub上，让别人也能访问。\n在hexo目录下找到_config.yml文件，按如下格式修改成你的：\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jensonss/Jensonss.github.io.git\n  branch: master\n```\n修改完成后，执行\n```\nhexo d -g\n```\n生成部署，这样就会根据刚才的GitHub地址commit到GitHub仓库，首次的话会弹窗让你输入你的GitHub登录的用户名和密码。登录成功后就会自动commit了。\n此时通过 ```xxx.github.io``` 应该是可以访问你的网站了。\n\n# 个性域名绑定\n\n\n## 购买域名\n\n我的域名是在万网购买的，不过进入网站才发现万网成了阿里云的二级域名，不知道什么时候被阿里云收购了。购买通道[猛戳](https://wanwang.aliyun.com/),用淘宝账号直接登录，由于是个人使用所以我选了 .me 类型的，而且13元/首年价格比较便宜，以后续费价格好像是89元/年。\n\n付款时会让选择持有者是个人还是企业，选择个人，然后创建一个个人使用的信息模板，可能由于我的是.me域名，所以没有进行身份证验证也能使用。\n\n## 域名DNS解析\n购买后的域名不能直接使用，因为现在只是把域名颁发给你，但是还没有和IP地址绑定，还需要进行DNS解析。\n在你购买后，可以直接点击域名进入域名控制台，页面长这样：\n![index8.png](http://upload-images.jianshu.io/upload_images/1796052-d32c7d57b43b7559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击左侧的菜单-云解析DNS，然后再点击你的域名：\n\n![index9.png](http://upload-images.jianshu.io/upload_images/1796052-bbca539b61e74602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n进入了新手引导设置：\n\n![index10.png](http://upload-images.jianshu.io/upload_images/1796052-97f979d9b478abb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果点击设置网站解析，进入的页面只能输入一个IP地址，由于GitHub有2个IP地址要绑定，所以我直接选择了高级设置，点击 添加解析，添加如下三条记录，其中xxx.github.io  ，xxx为你得GitHub配置的名称：\n\n![index11.png](http://upload-images.jianshu.io/upload_images/1796052-15f930f4842f9ba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n注意：CNAME 必须大写\n这样过几分钟域名就会生效了，\n\n\n\n## 域名绑定\n上一步DNS解析用到了CNAME ，现在在hexo/source目录下创建一个不带后缀的文件，名为CNAME，内容只填写你购买的域名：\n\n![图片.png](http://upload-images.jianshu.io/upload_images/1796052-617ebc06eda88723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后执行```hexo d -g```部署到GitHub上。这样就能通过你的新域名访问你的网站了。\n\n如果只是把hexo部署到GitHub上，半个小时是足够的，但是入果从找网站买域名、DNS解析、绑定。前前后后大概花了近1个小时。可能因为我有强迫症的缘故，填写一些信息时总是要想好久。\n\n话不多说，看看完成后的网站吧：[我的站点](www.jensondev.me)","slug":"30分钟搭建自己的网站","published":1,"updated":"2017-04-23T10:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ji0002449cds6j97e5","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><blockquote>\n<p>很多ITer都想拥有一个个人网站，记录自己工作经验和生活。哪怕已经有了简书这样好的一个平台，但是那种情节并没有就此打消。下面给大家分享下我个人网站创建流程及中途遇到的坑，希望对那些想建站却又嫌麻烦的朋友有所帮助。</p>\n</blockquote>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>在开始前要做好系列准备工作，如环境搭建、GitHub账号注册等。下面分别来看下要做哪些：</p>\n<h2 id=\"GitHub官网\"><a href=\"#GitHub官网\" class=\"headerlink\" title=\"GitHub官网\"></a>GitHub官网</h2><ul>\n<li><p>账号注册<br>  如果你还没有GitHub账号，请前往<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">官网注册</a>。如果已经注册过，请登录</p>\n</li>\n<li><p>创建仓库<br>  登录后，点击左上角+号创建仓库：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-076ccee5f6f8713c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index.png\"><br>在新的创建页面，写上   yourname.github.io ，然后下方选框勾上(我当时没有勾后来本地文件向git提交时出了点小问题)。yourname最好就是你的GitHub的名字，</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-68a0ed4e1dd8fc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index1.png\"></p>\n<h2 id=\"Git客户端安装\"><a href=\"#Git客户端安装\" class=\"headerlink\" title=\"Git客户端安装\"></a>Git客户端安装</h2><ul>\n<li>安装<br>  Git可以直接从<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">官网下载</a> 系统版本自行选择。<br>Git安装基本也可以认为一路next点过来，如果你的 on the Desktop没有勾选的话，为了方便可以勾选上</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-1b1909354d7db0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index3.png\"></p>\n<ul>\n<li>验证<br>  同样为了查看是否正确安装，需要从命令行查看能否正确显示版本信息：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果显示了版本信息，则说明正确安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git version 2.12.2.windows.2</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>配置git</p>\n<ul>\n<li><p>配置Git的user name和email：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;你的名字&quot;</div><div class=\"line\">git config --global user.email &quot;你的git使用的邮箱&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>生成密钥：<br>  使用ssh-keygen -t rsa -C 你的git使用的邮箱 命令生成密钥，输入命令后连续点击好像三四次回车就行，出现的一些设置提示不用管，全部默认就行。执行完成后会生成密钥文件如图：</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6a752a526843a255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index4.png\"></p>\n<ul>\n<li><p>密钥和GitHub关联<br>  编辑器打开id_rsa.pub复制所有内容。<br>  打开GitHub Setting如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fbd7fecb18c1669f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index5.png\"><br>找到SSH key，点击new SSH key，把内容粘贴到key文本框中，title随意起，保存，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-091de6d5aa8682a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index6.png\"></p>\n</li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>安装<br>  我笔记本是win系统，所以关于Node.js下载：<br><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi\" target=\"_blank\" rel=\"external\">32位下载</a><br><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\" target=\"_blank\" rel=\"external\">64位下载</a><br>如果是其他系统，需要自行去官网下载。<br>关于安装没有什么注意的，反正我是一路next，如图：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c67fd55dd0a8089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index7.png\"></p>\n<ul>\n<li><p>验证<br>  安装完成后，可以像JDK一样，使用命令行验证是否正确安装，在cmd命令窗口执行以下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p>  如果正确显示了当前版本号，则说明安装成功：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">v4.2.3</div><div class=\"line\">2.14.7</div></pre></td></tr></table></figure>\n<p>  否则，请根据具体异常信息搜索下。</p>\n</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>安装<br>  在合适地方创建一个文件夹并命名，例如我在 E盘 下创建了hexo文件夹：<br>  通过命令行进入该文件夹目录下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\Jenson&gt;E:</div><div class=\"line\">E:\\&gt;cd hexo</div><div class=\"line\">E:\\hexo&gt;</div></pre></td></tr></table></figure>\n<p>  执行 npm命令 安装hexo：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>  期间cmd窗口会自动刷出一些信息，可能会有warn不过不要紧。待命令执行完毕，继续执行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure>\n<p>  这时又会有信息刷屏，信息滚动完毕，通过</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>\n<p>  命令验证是否安装成功。<br>  如果出现了下面字样，说明安装成功了：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-89811acc016bd532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index12.png\"></p>\n</li>\n<li><p>初体验</p>\n<ul>\n<li><p>窗口中继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>初始化</p>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>自动安装所需组件，直到完成</p>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>启动本地服务，在浏览器地址栏输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:4000/</div></pre></td></tr></table></figure>\n<p>看能否打开本地部署的网站，如果成功打开，恭喜你本地部署完成。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"本地hexo关联到GitHub\"><a href=\"#本地hexo关联到GitHub\" class=\"headerlink\" title=\"本地hexo关联到GitHub\"></a>本地hexo关联到GitHub</h1><p>本地网站已经可以打开，接下来要把hexo部署到GitHub上，让别人也能访问。<br>在hexo目录下找到_config.yml文件，按如下格式修改成你的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/Jensonss/Jensonss.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>修改完成后，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<p>生成部署，这样就会根据刚才的GitHub地址commit到GitHub仓库，首次的话会弹窗让你输入你的GitHub登录的用户名和密码。登录成功后就会自动commit了。<br>此时通过 <code>xxx.github.io</code> 应该是可以访问你的网站了。</p>\n<h1 id=\"个性域名绑定\"><a href=\"#个性域名绑定\" class=\"headerlink\" title=\"个性域名绑定\"></a>个性域名绑定</h1><h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>我的域名是在万网购买的，不过进入网站才发现万网成了阿里云的二级域名，不知道什么时候被阿里云收购了。购买通道<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">猛戳</a>,用淘宝账号直接登录，由于是个人使用所以我选了 .me 类型的，而且13元/首年价格比较便宜，以后续费价格好像是89元/年。</p>\n<p>付款时会让选择持有者是个人还是企业，选择个人，然后创建一个个人使用的信息模板，可能由于我的是.me域名，所以没有进行身份证验证也能使用。</p>\n<h2 id=\"域名DNS解析\"><a href=\"#域名DNS解析\" class=\"headerlink\" title=\"域名DNS解析\"></a>域名DNS解析</h2><p>购买后的域名不能直接使用，因为现在只是把域名颁发给你，但是还没有和IP地址绑定，还需要进行DNS解析。<br>在你购买后，可以直接点击域名进入域名控制台，页面长这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-d32c7d57b43b7559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index8.png\"></p>\n<p>点击左侧的菜单-云解析DNS，然后再点击你的域名：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-bbca539b61e74602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index9.png\"></p>\n<p>进入了新手引导设置：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-97f979d9b478abb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index10.png\"></p>\n<p>如果点击设置网站解析，进入的页面只能输入一个IP地址，由于GitHub有2个IP地址要绑定，所以我直接选择了高级设置，点击 添加解析，添加如下三条记录，其中xxx.github.io  ，xxx为你得GitHub配置的名称：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-15f930f4842f9ba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index11.png\"></p>\n<p>注意：CNAME 必须大写<br>这样过几分钟域名就会生效了，</p>\n<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><p>上一步DNS解析用到了CNAME ，现在在hexo/source目录下创建一个不带后缀的文件，名为CNAME，内容只填写你购买的域名：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-617ebc06eda88723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>然后执行<code>hexo d -g</code>部署到GitHub上。这样就能通过你的新域名访问你的网站了。</p>\n<p>如果只是把hexo部署到GitHub上，半个小时是足够的，但是入果从找网站买域名、DNS解析、绑定。前前后后大概花了近1个小时。可能因为我有强迫症的缘故，填写一些信息时总是要想好久。</p>\n<p>话不多说，看看完成后的网站吧：<a href=\"www.jensondev.me\">我的站点</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><blockquote>\n<p>很多ITer都想拥有一个个人网站，记录自己工作经验和生活。哪怕已经有了简书这样好的一个平台，但是那种情节并没有就此打消。下面给大家分享下我个人网站创建流程及中途遇到的坑，希望对那些想建站却又嫌麻烦的朋友有所帮助。</p>\n</blockquote>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>在开始前要做好系列准备工作，如环境搭建、GitHub账号注册等。下面分别来看下要做哪些：</p>\n<h2 id=\"GitHub官网\"><a href=\"#GitHub官网\" class=\"headerlink\" title=\"GitHub官网\"></a>GitHub官网</h2><ul>\n<li><p>账号注册<br>  如果你还没有GitHub账号，请前往<a href=\"https://github.com/\">官网注册</a>。如果已经注册过，请登录</p>\n</li>\n<li><p>创建仓库<br>  登录后，点击左上角+号创建仓库：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-076ccee5f6f8713c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index.png\"><br>在新的创建页面，写上   yourname.github.io ，然后下方选框勾上(我当时没有勾后来本地文件向git提交时出了点小问题)。yourname最好就是你的GitHub的名字，</p>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-68a0ed4e1dd8fc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index1.png\"></p>\n<h2 id=\"Git客户端安装\"><a href=\"#Git客户端安装\" class=\"headerlink\" title=\"Git客户端安装\"></a>Git客户端安装</h2><ul>\n<li>安装<br>  Git可以直接从<a href=\"https://git-scm.com/downloads\">官网下载</a> 系统版本自行选择。<br>Git安装基本也可以认为一路next点过来，如果你的 on the Desktop没有勾选的话，为了方便可以勾选上</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-1b1909354d7db0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index3.png\"></p>\n<ul>\n<li>验证<br>  同样为了查看是否正确安装，需要从命令行查看能否正确显示版本信息：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果显示了版本信息，则说明正确安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git version 2.12.2.windows.2</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>配置git</p>\n<ul>\n<li><p>配置Git的user name和email：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;你的名字&quot;</div><div class=\"line\">git config --global user.email &quot;你的git使用的邮箱&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>生成密钥：<br>  使用ssh-keygen -t rsa -C 你的git使用的邮箱 命令生成密钥，输入命令后连续点击好像三四次回车就行，出现的一些设置提示不用管，全部默认就行。执行完成后会生成密钥文件如图：</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6a752a526843a255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index4.png\"></p>\n<ul>\n<li><p>密钥和GitHub关联<br>  编辑器打开id_rsa.pub复制所有内容。<br>  打开GitHub Setting如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fbd7fecb18c1669f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index5.png\"><br>找到SSH key，点击new SSH key，把内容粘贴到key文本框中，title随意起，保存，如下图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-091de6d5aa8682a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index6.png\"></p>\n</li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>安装<br>  我笔记本是win系统，所以关于Node.js下载：<br><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi\">32位下载</a><br><a href=\"https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\">64位下载</a><br>如果是其他系统，需要自行去官网下载。<br>关于安装没有什么注意的，反正我是一路next，如图：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c67fd55dd0a8089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index7.png\"></p>\n<ul>\n<li><p>验证<br>  安装完成后，可以像JDK一样，使用命令行验证是否正确安装，在cmd命令窗口执行以下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p>  如果正确显示了当前版本号，则说明安装成功：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">v4.2.3</div><div class=\"line\">2.14.7</div></pre></td></tr></table></figure>\n<p>  否则，请根据具体异常信息搜索下。</p>\n</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>安装<br>  在合适地方创建一个文件夹并命名，例如我在 E盘 下创建了hexo文件夹：<br>  通过命令行进入该文件夹目录下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Users\\Jenson&gt;E:</div><div class=\"line\">E:\\&gt;cd hexo</div><div class=\"line\">E:\\hexo&gt;</div></pre></td></tr></table></figure>\n<p>  执行 npm命令 安装hexo：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>  期间cmd窗口会自动刷出一些信息，可能会有warn不过不要紧。待命令执行完毕，继续执行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure>\n<p>  这时又会有信息刷屏，信息滚动完毕，通过</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>\n<p>  命令验证是否安装成功。<br>  如果出现了下面字样，说明安装成功了：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-89811acc016bd532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index12.png\"></p>\n</li>\n<li><p>初体验</p>\n<ul>\n<li><p>窗口中继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<p>初始化</p>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p>自动安装所需组件，直到完成</p>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>启动本地服务，在浏览器地址栏输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:4000/</div></pre></td></tr></table></figure>\n<p>看能否打开本地部署的网站，如果成功打开，恭喜你本地部署完成。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"本地hexo关联到GitHub\"><a href=\"#本地hexo关联到GitHub\" class=\"headerlink\" title=\"本地hexo关联到GitHub\"></a>本地hexo关联到GitHub</h1><p>本地网站已经可以打开，接下来要把hexo部署到GitHub上，让别人也能访问。<br>在hexo目录下找到_config.yml文件，按如下格式修改成你的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://github.com/Jensonss/Jensonss.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>修改完成后，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<p>生成部署，这样就会根据刚才的GitHub地址commit到GitHub仓库，首次的话会弹窗让你输入你的GitHub登录的用户名和密码。登录成功后就会自动commit了。<br>此时通过 <code>xxx.github.io</code> 应该是可以访问你的网站了。</p>\n<h1 id=\"个性域名绑定\"><a href=\"#个性域名绑定\" class=\"headerlink\" title=\"个性域名绑定\"></a>个性域名绑定</h1><h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>我的域名是在万网购买的，不过进入网站才发现万网成了阿里云的二级域名，不知道什么时候被阿里云收购了。购买通道<a href=\"https://wanwang.aliyun.com/\">猛戳</a>,用淘宝账号直接登录，由于是个人使用所以我选了 .me 类型的，而且13元/首年价格比较便宜，以后续费价格好像是89元/年。</p>\n<p>付款时会让选择持有者是个人还是企业，选择个人，然后创建一个个人使用的信息模板，可能由于我的是.me域名，所以没有进行身份证验证也能使用。</p>\n<h2 id=\"域名DNS解析\"><a href=\"#域名DNS解析\" class=\"headerlink\" title=\"域名DNS解析\"></a>域名DNS解析</h2><p>购买后的域名不能直接使用，因为现在只是把域名颁发给你，但是还没有和IP地址绑定，还需要进行DNS解析。<br>在你购买后，可以直接点击域名进入域名控制台，页面长这样：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-d32c7d57b43b7559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index8.png\"></p>\n<p>点击左侧的菜单-云解析DNS，然后再点击你的域名：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-bbca539b61e74602.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index9.png\"></p>\n<p>进入了新手引导设置：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-97f979d9b478abb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index10.png\"></p>\n<p>如果点击设置网站解析，进入的页面只能输入一个IP地址，由于GitHub有2个IP地址要绑定，所以我直接选择了高级设置，点击 添加解析，添加如下三条记录，其中xxx.github.io  ，xxx为你得GitHub配置的名称：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-15f930f4842f9ba2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"index11.png\"></p>\n<p>注意：CNAME 必须大写<br>这样过几分钟域名就会生效了，</p>\n<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><p>上一步DNS解析用到了CNAME ，现在在hexo/source目录下创建一个不带后缀的文件，名为CNAME，内容只填写你购买的域名：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-617ebc06eda88723.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片.png\"></p>\n<p>然后执行<code>hexo d -g</code>部署到GitHub上。这样就能通过你的新域名访问你的网站了。</p>\n<p>如果只是把hexo部署到GitHub上，半个小时是足够的，但是入果从找网站买域名、DNS解析、绑定。前前后后大概花了近1个小时。可能因为我有强迫症的缘故，填写一些信息时总是要想好久。</p>\n<p>话不多说，看看完成后的网站吧：<a href=\"www.jensondev.me\">我的站点</a></p>\n"},{"title":"2015圆明园荷花节","date":"2017-04-25T08:15:01.000Z","_content":"\n# 说在前面的话\n\n圆明园每年夏季荷花盛开时都会有荷花节。而我也已经2015、2016两年都去参观了，当然今年也不会例外。每年参观人很多，如果天气比较热，最好早点去，如果去的太晚可能拍不到状态好的荷花。盛开又饱满的荷花一般都距离岸边比较远，最好用长焦拍摄。\n\n# 直接上图\n\n![psb (2)](2015圆明园荷花节/psb2.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (3)](2015圆明园荷花节/psb3.jpeg)\n\n\n\n\n\n\n\n![psb (4)](2015圆明园荷花节/psb4.jpeg)\n\n\n\n\n\n\n\n![psb (5)](2015圆明园荷花节/psb5.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (6)](2015圆明园荷花节/psb6.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (7)](2015圆明园荷花节/psb7.jpeg)\n\n\n\n这个小孩和猫德照片说下：当时是已经拍完荷花在出来的路上，到大门口了，看到路边土坡上有一只猫咪，我个人比较喜欢猫狗，就上前逗了几下，这时一个小孩也上来，好像他也很喜欢的样子，摸着猫咪竟没注意到他左手的雪糕其实已经化了。孩子妈在旁边站着看着。小孩摸着猫咪，猫咪竟也不怕眼生，自顾的舔舐腿毛~~画面好不温馨，赶紧后退几步(镜头最近对焦距离1.2米)拍下这一幕。\n\n\n\n\n\n\n\n![psb](2015圆明园荷花节/psb.jpeg)\n\n\n\n\n\n\n\n\n\n\n\n![psb (1)](2015圆明园荷花节/psb1.jpeg)\n\n\n\n再说下这个蜻蜓的图片：这个蜻蜓是在圆明园的黑天鹅区？名字好像忘了，但是那个区确实有个很大的石雕还是金属的天鹅塑像。在那部分水域也有些荷花。拿镜头扫射时发现的蜻蜓正落在荷叶杆上休憩。其实那片区域是有围栏的，不能靠近。幸亏长焦镜头直接拉到最远才看得清。换个角度把荷叶作为背景。咔嚓按下快门~~\n\n\n\n\n\n\n\n","source":"_posts/2015圆明园荷花节.md","raw":"---\ntitle: 2015圆明园荷花节\ndate: 2017-04-25 16:15:01\ntags: 生活\ncategories: 生活\n---\n\n# 说在前面的话\n\n圆明园每年夏季荷花盛开时都会有荷花节。而我也已经2015、2016两年都去参观了，当然今年也不会例外。每年参观人很多，如果天气比较热，最好早点去，如果去的太晚可能拍不到状态好的荷花。盛开又饱满的荷花一般都距离岸边比较远，最好用长焦拍摄。\n\n# 直接上图\n\n![psb (2)](2015圆明园荷花节/psb2.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (3)](2015圆明园荷花节/psb3.jpeg)\n\n\n\n\n\n\n\n![psb (4)](2015圆明园荷花节/psb4.jpeg)\n\n\n\n\n\n\n\n![psb (5)](2015圆明园荷花节/psb5.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (6)](2015圆明园荷花节/psb6.jpeg)\n\n\n\n\n\n\n\n\n\n![psb (7)](2015圆明园荷花节/psb7.jpeg)\n\n\n\n这个小孩和猫德照片说下：当时是已经拍完荷花在出来的路上，到大门口了，看到路边土坡上有一只猫咪，我个人比较喜欢猫狗，就上前逗了几下，这时一个小孩也上来，好像他也很喜欢的样子，摸着猫咪竟没注意到他左手的雪糕其实已经化了。孩子妈在旁边站着看着。小孩摸着猫咪，猫咪竟也不怕眼生，自顾的舔舐腿毛~~画面好不温馨，赶紧后退几步(镜头最近对焦距离1.2米)拍下这一幕。\n\n\n\n\n\n\n\n![psb](2015圆明园荷花节/psb.jpeg)\n\n\n\n\n\n\n\n\n\n\n\n![psb (1)](2015圆明园荷花节/psb1.jpeg)\n\n\n\n再说下这个蜻蜓的图片：这个蜻蜓是在圆明园的黑天鹅区？名字好像忘了，但是那个区确实有个很大的石雕还是金属的天鹅塑像。在那部分水域也有些荷花。拿镜头扫射时发现的蜻蜓正落在荷叶杆上休憩。其实那片区域是有围栏的，不能靠近。幸亏长焦镜头直接拉到最远才看得清。换个角度把荷叶作为背景。咔嚓按下快门~~\n\n\n\n\n\n\n\n","slug":"2015圆明园荷花节","published":1,"updated":"2017-04-25T09:17:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7jy0006449cs6uq05h3","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>圆明园每年夏季荷花盛开时都会有荷花节。而我也已经2015、2016两年都去参观了，当然今年也不会例外。每年参观人很多，如果天气比较热，最好早点去，如果去的太晚可能拍不到状态好的荷花。盛开又饱满的荷花一般都距离岸边比较远，最好用长焦拍摄。</p>\n<h1 id=\"直接上图\"><a href=\"#直接上图\" class=\"headerlink\" title=\"直接上图\"></a>直接上图</h1><p><img src=\"/2017/04/25/2015圆明园荷花节/psb2.jpeg\" alt=\"psb (2)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb3.jpeg\" alt=\"psb (3)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb4.jpeg\" alt=\"psb (4)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb5.jpeg\" alt=\"psb (5)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb6.jpeg\" alt=\"psb (6)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb7.jpeg\" alt=\"psb (7)\"></p>\n<p>这个小孩和猫德照片说下：当时是已经拍完荷花在出来的路上，到大门口了，看到路边土坡上有一只猫咪，我个人比较喜欢猫狗，就上前逗了几下，这时一个小孩也上来，好像他也很喜欢的样子，摸着猫咪竟没注意到他左手的雪糕其实已经化了。孩子妈在旁边站着看着。小孩摸着猫咪，猫咪竟也不怕眼生，自顾的舔舐腿毛~~画面好不温馨，赶紧后退几步(镜头最近对焦距离1.2米)拍下这一幕。</p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb.jpeg\" alt=\"psb\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb1.jpeg\" alt=\"psb (1)\"></p>\n<p>再说下这个蜻蜓的图片：这个蜻蜓是在圆明园的黑天鹅区？名字好像忘了，但是那个区确实有个很大的石雕还是金属的天鹅塑像。在那部分水域也有些荷花。拿镜头扫射时发现的蜻蜓正落在荷叶杆上休憩。其实那片区域是有围栏的，不能靠近。幸亏长焦镜头直接拉到最远才看得清。换个角度把荷叶作为背景。咔嚓按下快门~~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>圆明园每年夏季荷花盛开时都会有荷花节。而我也已经2015、2016两年都去参观了，当然今年也不会例外。每年参观人很多，如果天气比较热，最好早点去，如果去的太晚可能拍不到状态好的荷花。盛开又饱满的荷花一般都距离岸边比较远，最好用长焦拍摄。</p>\n<h1 id=\"直接上图\"><a href=\"#直接上图\" class=\"headerlink\" title=\"直接上图\"></a>直接上图</h1><p><img src=\"/2017/04/25/2015圆明园荷花节/psb2.jpeg\" alt=\"psb (2)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb3.jpeg\" alt=\"psb (3)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb4.jpeg\" alt=\"psb (4)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb5.jpeg\" alt=\"psb (5)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb6.jpeg\" alt=\"psb (6)\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb7.jpeg\" alt=\"psb (7)\"></p>\n<p>这个小孩和猫德照片说下：当时是已经拍完荷花在出来的路上，到大门口了，看到路边土坡上有一只猫咪，我个人比较喜欢猫狗，就上前逗了几下，这时一个小孩也上来，好像他也很喜欢的样子，摸着猫咪竟没注意到他左手的雪糕其实已经化了。孩子妈在旁边站着看着。小孩摸着猫咪，猫咪竟也不怕眼生，自顾的舔舐腿毛~~画面好不温馨，赶紧后退几步(镜头最近对焦距离1.2米)拍下这一幕。</p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb.jpeg\" alt=\"psb\"></p>\n<p><img src=\"/2017/04/25/2015圆明园荷花节/psb1.jpeg\" alt=\"psb (1)\"></p>\n<p>再说下这个蜻蜓的图片：这个蜻蜓是在圆明园的黑天鹅区？名字好像忘了，但是那个区确实有个很大的石雕还是金属的天鹅塑像。在那部分水域也有些荷花。拿镜头扫射时发现的蜻蜓正落在荷叶杆上休憩。其实那片区域是有围栏的，不能靠近。幸亏长焦镜头直接拉到最远才看得清。换个角度把荷叶作为背景。咔嚓按下快门~~</p>\n"},{"title":"Android关于Activity生命周期误解","date":"2017-05-05T03:03:36.000Z","_content":"\n两个Activity  A和B，先启动A，通过A打开B，在关闭B，这时候两个Activity的生命周期分别是如何执行的？\n\n我的答案是：\n\nA启动时\n\n`A onCreate onStart onResume`\n\n点击启动B之后\n\n`\tA onPause onStop, B onCreate onStart onResume`\n\nB关闭之后\n\n` B onPause onStop onDestory ,A onRestart onStart onResume`\n\n但是想的太简单了，我以为的并不是我以为的。下面是打印的生命周期执行：\n\n```\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onCreate\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume\n05-05 11:01:33.861 5494-5542/com.example.jenson.myapplication I/OpenGLRenderer: Initialized EGL, version 1.4\n05-05 11:01:46.391 5494-5494/com.example.jenson.myapplication I/MainActivity: onPause\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onCreate\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStart\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onResume\n05-05 11:01:46.691 5494-5494/com.example.jenson.myapplication I/MainActivity: onStop\n05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 0\n05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 1\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/FirstActivity: onPause\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onRestart\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume\n05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStop\n05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onDestroy\n```\n\n> 记住一点：启动一个新Activity，先把自己onPause，然后等新Activity启动成功即onResume后再onStop，关闭当前Activity时，还是先把自己onPause，下一帧的Activity(相对于Activity栈来说)执行恢复onResume，然后自己再执行onStop、onDestory\n\n虽然知道了真相，但是现在还不清楚为什么要这样设计，，有时间还要看看这里的源码，mark下。\n\n","source":"_posts/Android关于Activity生命周期误解.md","raw":"---\ntitle: Android关于Activity生命周期误解\ndate: 2017-05-05 11:03:36\ntags: Android\ncategories: Android\n---\n\n两个Activity  A和B，先启动A，通过A打开B，在关闭B，这时候两个Activity的生命周期分别是如何执行的？\n\n我的答案是：\n\nA启动时\n\n`A onCreate onStart onResume`\n\n点击启动B之后\n\n`\tA onPause onStop, B onCreate onStart onResume`\n\nB关闭之后\n\n` B onPause onStop onDestory ,A onRestart onStart onResume`\n\n但是想的太简单了，我以为的并不是我以为的。下面是打印的生命周期执行：\n\n```\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onCreate\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart\n05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume\n05-05 11:01:33.861 5494-5542/com.example.jenson.myapplication I/OpenGLRenderer: Initialized EGL, version 1.4\n05-05 11:01:46.391 5494-5494/com.example.jenson.myapplication I/MainActivity: onPause\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onCreate\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStart\n05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onResume\n05-05 11:01:46.691 5494-5494/com.example.jenson.myapplication I/MainActivity: onStop\n05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 0\n05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 1\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/FirstActivity: onPause\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onRestart\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart\n05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume\n05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStop\n05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onDestroy\n```\n\n> 记住一点：启动一个新Activity，先把自己onPause，然后等新Activity启动成功即onResume后再onStop，关闭当前Activity时，还是先把自己onPause，下一帧的Activity(相对于Activity栈来说)执行恢复onResume，然后自己再执行onStop、onDestory\n\n虽然知道了真相，但是现在还不清楚为什么要这样设计，，有时间还要看看这里的源码，mark下。\n\n","slug":"Android关于Activity生命周期误解","published":1,"updated":"2017-05-07T06:28:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7k10007449cz0bt5xb3","content":"<p>两个Activity  A和B，先启动A，通过A打开B，在关闭B，这时候两个Activity的生命周期分别是如何执行的？</p>\n<p>我的答案是：</p>\n<p>A启动时</p>\n<p><code>A onCreate onStart onResume</code></p>\n<p>点击启动B之后</p>\n<p><code>A onPause onStop, B onCreate onStart onResume</code></p>\n<p>B关闭之后</p>\n<p><code>B onPause onStop onDestory ,A onRestart onStart onResume</code></p>\n<p>但是想的太简单了，我以为的并不是我以为的。下面是打印的生命周期执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onCreate</div><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart</div><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume</div><div class=\"line\">05-05 11:01:33.861 5494-5542/com.example.jenson.myapplication I/OpenGLRenderer: Initialized EGL, version 1.4</div><div class=\"line\">05-05 11:01:46.391 5494-5494/com.example.jenson.myapplication I/MainActivity: onPause</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onCreate</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStart</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onResume</div><div class=\"line\">05-05 11:01:46.691 5494-5494/com.example.jenson.myapplication I/MainActivity: onStop</div><div class=\"line\">05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 0</div><div class=\"line\">05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 1</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/FirstActivity: onPause</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onRestart</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume</div><div class=\"line\">05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStop</div><div class=\"line\">05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onDestroy</div></pre></td></tr></table></figure>\n<blockquote>\n<p>记住一点：启动一个新Activity，先把自己onPause，然后等新Activity启动成功即onResume后再onStop，关闭当前Activity时，还是先把自己onPause，下一帧的Activity(相对于Activity栈来说)执行恢复onResume，然后自己再执行onStop、onDestory</p>\n</blockquote>\n<p>虽然知道了真相，但是现在还不清楚为什么要这样设计，，有时间还要看看这里的源码，mark下。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>两个Activity  A和B，先启动A，通过A打开B，在关闭B，这时候两个Activity的生命周期分别是如何执行的？</p>\n<p>我的答案是：</p>\n<p>A启动时</p>\n<p><code>A onCreate onStart onResume</code></p>\n<p>点击启动B之后</p>\n<p><code>A onPause onStop, B onCreate onStart onResume</code></p>\n<p>B关闭之后</p>\n<p><code>B onPause onStop onDestory ,A onRestart onStart onResume</code></p>\n<p>但是想的太简单了，我以为的并不是我以为的。下面是打印的生命周期执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onCreate</div><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart</div><div class=\"line\">05-05 11:01:33.801 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume</div><div class=\"line\">05-05 11:01:33.861 5494-5542/com.example.jenson.myapplication I/OpenGLRenderer: Initialized EGL, version 1.4</div><div class=\"line\">05-05 11:01:46.391 5494-5494/com.example.jenson.myapplication I/MainActivity: onPause</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onCreate</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStart</div><div class=\"line\">05-05 11:01:46.411 5494-5494/com.example.jenson.myapplication I/FirstActivity: onResume</div><div class=\"line\">05-05 11:01:46.691 5494-5494/com.example.jenson.myapplication I/MainActivity: onStop</div><div class=\"line\">05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 0</div><div class=\"line\">05-05 11:02:20.641 5494-5494/com.example.jenson.myapplication I/ViewRootImpl: WindowInputEventReceiver onInputEvent!! KeyCode is 4, action is 1</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/FirstActivity: onPause</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onRestart</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onStart</div><div class=\"line\">05-05 11:02:20.651 5494-5494/com.example.jenson.myapplication I/MainActivity: onResume</div><div class=\"line\">05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onStop</div><div class=\"line\">05-05 11:02:20.871 5494-5494/com.example.jenson.myapplication I/FirstActivity: onDestroy</div></pre></td></tr></table></figure>\n<blockquote>\n<p>记住一点：启动一个新Activity，先把自己onPause，然后等新Activity启动成功即onResume后再onStop，关闭当前Activity时，还是先把自己onPause，下一帧的Activity(相对于Activity栈来说)执行恢复onResume，然后自己再执行onStop、onDestory</p>\n</blockquote>\n<p>虽然知道了真相，但是现在还不清楚为什么要这样设计，，有时间还要看看这里的源码，mark下。</p>\n"},{"title":"2016圆明园荷花节","date":"2017-04-25T09:27:35.000Z","_content":"\n# 说在前面的话\n\n2016年的圆明园荷花节热闹不亚于往年，但是这次拍照片却没有多少可观的。感觉好照片也要讲缘分，比如这次就没有遇到蜻蜓，更没有遇到小孩和猫咪。只能干巴巴的拍荷花。\n\n# 上图\n\n![mmexport1493112391191](2016圆明园荷花节/mmexport1493112391191.jpg)\n\n\n\n\n\n\n\n![mmexport1493112393720](2016圆明园荷花节/mmexport1493112393720.jpg)\n\n\n\n\n\n![mmexport1493112396013](2016圆明园荷花节/mmexport1493112396013.jpg)\n\n\n\n\n\n\n\n![mmexport1493112398170](2016圆明园荷花节/mmexport1493112398170.jpg)\n\n\n\n\n\n\n\n![mmexport1493112400267](2016圆明园荷花节/mmexport1493112400267.jpg)\n\n\n\n\n\n\n\n\n\n![mmexport1493112402523](2016圆明园荷花节/mmexport1493112402523.jpg)\n\n\n\n\n\n![mmexport1493112405316](2016圆明园荷花节/mmexport1493112405316.jpg)\n\n\n\n\n\n","source":"_posts/2016圆明园荷花节.md","raw":"---\ntitle: 2016圆明园荷花节\ndate: 2017-04-25 17:27:35\ntags: 生活\ncategories: 生活\n---\n\n# 说在前面的话\n\n2016年的圆明园荷花节热闹不亚于往年，但是这次拍照片却没有多少可观的。感觉好照片也要讲缘分，比如这次就没有遇到蜻蜓，更没有遇到小孩和猫咪。只能干巴巴的拍荷花。\n\n# 上图\n\n![mmexport1493112391191](2016圆明园荷花节/mmexport1493112391191.jpg)\n\n\n\n\n\n\n\n![mmexport1493112393720](2016圆明园荷花节/mmexport1493112393720.jpg)\n\n\n\n\n\n![mmexport1493112396013](2016圆明园荷花节/mmexport1493112396013.jpg)\n\n\n\n\n\n\n\n![mmexport1493112398170](2016圆明园荷花节/mmexport1493112398170.jpg)\n\n\n\n\n\n\n\n![mmexport1493112400267](2016圆明园荷花节/mmexport1493112400267.jpg)\n\n\n\n\n\n\n\n\n\n![mmexport1493112402523](2016圆明园荷花节/mmexport1493112402523.jpg)\n\n\n\n\n\n![mmexport1493112405316](2016圆明园荷花节/mmexport1493112405316.jpg)\n\n\n\n\n\n","slug":"2016圆明园荷花节","published":1,"updated":"2017-04-25T09:33:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ke0008449cf44fad8h","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>2016年的圆明园荷花节热闹不亚于往年，但是这次拍照片却没有多少可观的。感觉好照片也要讲缘分，比如这次就没有遇到蜻蜓，更没有遇到小孩和猫咪。只能干巴巴的拍荷花。</p>\n<h1 id=\"上图\"><a href=\"#上图\" class=\"headerlink\" title=\"上图\"></a>上图</h1><p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112391191.jpg\" alt=\"mmexport1493112391191\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112393720.jpg\" alt=\"mmexport1493112393720\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112396013.jpg\" alt=\"mmexport1493112396013\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112398170.jpg\" alt=\"mmexport1493112398170\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112400267.jpg\" alt=\"mmexport1493112400267\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112402523.jpg\" alt=\"mmexport1493112402523\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112405316.jpg\" alt=\"mmexport1493112405316\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>2016年的圆明园荷花节热闹不亚于往年，但是这次拍照片却没有多少可观的。感觉好照片也要讲缘分，比如这次就没有遇到蜻蜓，更没有遇到小孩和猫咪。只能干巴巴的拍荷花。</p>\n<h1 id=\"上图\"><a href=\"#上图\" class=\"headerlink\" title=\"上图\"></a>上图</h1><p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112391191.jpg\" alt=\"mmexport1493112391191\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112393720.jpg\" alt=\"mmexport1493112393720\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112396013.jpg\" alt=\"mmexport1493112396013\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112398170.jpg\" alt=\"mmexport1493112398170\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112400267.jpg\" alt=\"mmexport1493112400267\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112402523.jpg\" alt=\"mmexport1493112402523\"></p>\n<p><img src=\"/2017/04/25/2016圆明园荷花节/mmexport1493112405316.jpg\" alt=\"mmexport1493112405316\"></p>\n"},{"title":"Android内存分析工具之MAT详解","date":"2017-04-27T05:07:09.000Z","_content":"\n# 说在前面的话\n\n关于Android内存优化可参见我的另一篇文章[[Android性能优化之内存优化](http://www.jensondev.me/2017/04/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/)]。Android性能优化中内存优化可谓重中之重，而内存泄露又是Android内存优化的重灾区。重灾区就要重拳出击，整治内存泄露，Mat是必备的利器。\n\n# 关于Mat\n\n\n\nMat，全面Memory Analyzer Tool，Java内存分析工具。注意一点，Mat是由eclipse社区维护，所以如果使用Android studio开发的话，需要单独下载，[官方通道](http://www.eclipse.org/mat/downloads.php)。我用的是mac版，后面也会使用mac版来分析。\n\n# Mat使用\n\n注意：我的测试app包名为：com.example.jenson.myapplication\n\n在eclipse中集成了Mat，可以直接拿来使用，而使用Android studio时。这两个是分开的，所以我们要先导出dump文件。\n\n## Android studio导出dump文件\n\n打开Android Monitor窗口，![0B8D42B7-E5A5-431D-9658-2A99C923CF4E](Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png)\n\n点击圆圈中的按钮，过几秒中会自动生成一个dump文件，然后自动打开如下图的窗口：![1A94CD89-1BE9-46BC-9449-8B55EE34D741](Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png)\n\n在Heap Snapshot下的几个文件就是自动生成的dump文件，但是这不是标准的dump文件，所以需要选择文件右键导出标准dump文件，保存到一个目录下：\n\n![屏幕快照 2017-04-27 下午1.49.26](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png)\n\n\n\n## Mat打开标准dump文件\n\n使用Mat，菜单open File选择刚才导出的dump文件，经过分析后回显示如下所示的项目：\n\n![屏幕快照 2017-04-27 下午2.08.27](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png)\n\n\n\nMat从多角度提供了内存分析，其中包括Histogram、Dominator Tree、Leak Suspects和Top consumers等。\n\noverview是一个概况图，把内存的消耗以饼状图形式显示出来，鼠标在每个饼块区域划过或者点击，就会在Inspector栏目显示这块区域的相关信息。\n\nLeak Suspectss是一个关于内存泄露猜想的饼图，Problem Suspect 1是泄露猜想的描述。看我这里说的像是字节数组，这么大的数组难不成是图片，要知道图片在内存中就是以字节数组形式存在的。\n\n平常内存分析比较常用的还是Histogram、Dominator Tree。\n\n## 开始分析内存\n\n这里我们使用Histogram进行分析，切换到Histogram页面。这个页面主要有4个列，Class Name、Objects、Shallow Heap和Retained Heap。其中Class Name是全类名，Objects是这个类的对象实例个数。Shallow Heap是对象本身占用内存大小，非数组的常规对象，本身内存占用很小，所以这个对泄露分析作用不大。Retained Heap指当前对象大小和当前对象能直接或间接引用的对象大小的总和。这个栏目是分析重点。\n\n内存分析是分析的整个系统的内存泄露，而我们只要查找我们APP的内存泄露情况。这无疑增加了很多工作，不过幸亏Histogram支持正则表达式查找，在Regex中输入我们的包名进行过滤，直奔和我们APP有关的内存泄露：\n\n![屏幕快照 2017-04-27 下午3.11.33](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png)\n\n过滤后就显示了我们APP相关内存信息，按Retained Heap大小排列下，发现Student和MainActivity这两个类问题比较大。但是MainActivity的Objects数量为1，而Student的为130，看起来Student问题更严重，所以先从Student入手：\n\n首先看下是哪里的引用导致了Student不能被GC回收。![屏幕快照 2017-04-27 下午3.19.06](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png)\n\n右键使用Merge Shortest Paths to GC Roots显示距GC Root最短路径，当然选择过程中要排除软引用和弱引用，因为这些标记的一般都是可以被回收的。进入结果页查看：\n\n![屏幕快照 2017-04-27 下午3.22.23](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png)\n\n啧啧，原来Student不能被回收竟然就是这个MainActivity搞的鬼，可以看到这个类里面有个students集合里面存放的正式不能回收的Student对象。\n\n看代码：\n\n```\n    static List<Student> students=new ArrayList<>();\n    static final String tag=\"MainActivity\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sample_text = (TextView) findViewById(R.id.sample_text);\n        TestNative testNative = new TestNative();\n        sample_text.setText(testNative.stringFromJNI());\n        for (int i = 0; i < 10; i++) {\n\n            Student student = new Student(\"jenson\" + i, i);\n            students.add(student);\n        }\n    }\n```\n\n原来不能被回收是因为用static修饰了students集合。这导致其生命周期边长，在Activity销毁时，仍然存在。问题找到了，去掉static完成内存泄露修复。\n\n","source":"_posts/Android内存分析工具之MAT详解.md","raw":"---\ntitle: Android内存分析工具之MAT详解\ndate: 2017-04-27 13:07:09\ntags: Android\ncategories: Android\n---\n\n# 说在前面的话\n\n关于Android内存优化可参见我的另一篇文章[[Android性能优化之内存优化](http://www.jensondev.me/2017/04/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/)]。Android性能优化中内存优化可谓重中之重，而内存泄露又是Android内存优化的重灾区。重灾区就要重拳出击，整治内存泄露，Mat是必备的利器。\n\n# 关于Mat\n\n\n\nMat，全面Memory Analyzer Tool，Java内存分析工具。注意一点，Mat是由eclipse社区维护，所以如果使用Android studio开发的话，需要单独下载，[官方通道](http://www.eclipse.org/mat/downloads.php)。我用的是mac版，后面也会使用mac版来分析。\n\n# Mat使用\n\n注意：我的测试app包名为：com.example.jenson.myapplication\n\n在eclipse中集成了Mat，可以直接拿来使用，而使用Android studio时。这两个是分开的，所以我们要先导出dump文件。\n\n## Android studio导出dump文件\n\n打开Android Monitor窗口，![0B8D42B7-E5A5-431D-9658-2A99C923CF4E](Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png)\n\n点击圆圈中的按钮，过几秒中会自动生成一个dump文件，然后自动打开如下图的窗口：![1A94CD89-1BE9-46BC-9449-8B55EE34D741](Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png)\n\n在Heap Snapshot下的几个文件就是自动生成的dump文件，但是这不是标准的dump文件，所以需要选择文件右键导出标准dump文件，保存到一个目录下：\n\n![屏幕快照 2017-04-27 下午1.49.26](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png)\n\n\n\n## Mat打开标准dump文件\n\n使用Mat，菜单open File选择刚才导出的dump文件，经过分析后回显示如下所示的项目：\n\n![屏幕快照 2017-04-27 下午2.08.27](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png)\n\n\n\nMat从多角度提供了内存分析，其中包括Histogram、Dominator Tree、Leak Suspects和Top consumers等。\n\noverview是一个概况图，把内存的消耗以饼状图形式显示出来，鼠标在每个饼块区域划过或者点击，就会在Inspector栏目显示这块区域的相关信息。\n\nLeak Suspectss是一个关于内存泄露猜想的饼图，Problem Suspect 1是泄露猜想的描述。看我这里说的像是字节数组，这么大的数组难不成是图片，要知道图片在内存中就是以字节数组形式存在的。\n\n平常内存分析比较常用的还是Histogram、Dominator Tree。\n\n## 开始分析内存\n\n这里我们使用Histogram进行分析，切换到Histogram页面。这个页面主要有4个列，Class Name、Objects、Shallow Heap和Retained Heap。其中Class Name是全类名，Objects是这个类的对象实例个数。Shallow Heap是对象本身占用内存大小，非数组的常规对象，本身内存占用很小，所以这个对泄露分析作用不大。Retained Heap指当前对象大小和当前对象能直接或间接引用的对象大小的总和。这个栏目是分析重点。\n\n内存分析是分析的整个系统的内存泄露，而我们只要查找我们APP的内存泄露情况。这无疑增加了很多工作，不过幸亏Histogram支持正则表达式查找，在Regex中输入我们的包名进行过滤，直奔和我们APP有关的内存泄露：\n\n![屏幕快照 2017-04-27 下午3.11.33](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png)\n\n过滤后就显示了我们APP相关内存信息，按Retained Heap大小排列下，发现Student和MainActivity这两个类问题比较大。但是MainActivity的Objects数量为1，而Student的为130，看起来Student问题更严重，所以先从Student入手：\n\n首先看下是哪里的引用导致了Student不能被GC回收。![屏幕快照 2017-04-27 下午3.19.06](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png)\n\n右键使用Merge Shortest Paths to GC Roots显示距GC Root最短路径，当然选择过程中要排除软引用和弱引用，因为这些标记的一般都是可以被回收的。进入结果页查看：\n\n![屏幕快照 2017-04-27 下午3.22.23](Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png)\n\n啧啧，原来Student不能被回收竟然就是这个MainActivity搞的鬼，可以看到这个类里面有个students集合里面存放的正式不能回收的Student对象。\n\n看代码：\n\n```\n    static List<Student> students=new ArrayList<>();\n    static final String tag=\"MainActivity\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        sample_text = (TextView) findViewById(R.id.sample_text);\n        TestNative testNative = new TestNative();\n        sample_text.setText(testNative.stringFromJNI());\n        for (int i = 0; i < 10; i++) {\n\n            Student student = new Student(\"jenson\" + i, i);\n            students.add(student);\n        }\n    }\n```\n\n原来不能被回收是因为用static修饰了students集合。这导致其生命周期边长，在Activity销毁时，仍然存在。问题找到了，去掉static完成内存泄露修复。\n\n","slug":"Android内存分析工具之MAT详解","published":1,"updated":"2017-04-27T07:44:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7kh000c449cdvrl7qnq","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>关于Android内存优化可参见我的另一篇文章[<a href=\"http://www.jensondev.me/2017/04/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"external\">Android性能优化之内存优化</a>]。Android性能优化中内存优化可谓重中之重，而内存泄露又是Android内存优化的重灾区。重灾区就要重拳出击，整治内存泄露，Mat是必备的利器。</p>\n<h1 id=\"关于Mat\"><a href=\"#关于Mat\" class=\"headerlink\" title=\"关于Mat\"></a>关于Mat</h1><p>Mat，全面Memory Analyzer Tool，Java内存分析工具。注意一点，Mat是由eclipse社区维护，所以如果使用Android studio开发的话，需要单独下载，<a href=\"http://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"external\">官方通道</a>。我用的是mac版，后面也会使用mac版来分析。</p>\n<h1 id=\"Mat使用\"><a href=\"#Mat使用\" class=\"headerlink\" title=\"Mat使用\"></a>Mat使用</h1><p>注意：我的测试app包名为：com.example.jenson.myapplication</p>\n<p>在eclipse中集成了Mat，可以直接拿来使用，而使用Android studio时。这两个是分开的，所以我们要先导出dump文件。</p>\n<h2 id=\"Android-studio导出dump文件\"><a href=\"#Android-studio导出dump文件\" class=\"headerlink\" title=\"Android studio导出dump文件\"></a>Android studio导出dump文件</h2><p>打开Android Monitor窗口，<img src=\"/2017/04/27/Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png\" alt=\"0B8D42B7-E5A5-431D-9658-2A99C923CF4E\"></p>\n<p>点击圆圈中的按钮，过几秒中会自动生成一个dump文件，然后自动打开如下图的窗口：<img src=\"/2017/04/27/Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png\" alt=\"1A94CD89-1BE9-46BC-9449-8B55EE34D741\"></p>\n<p>在Heap Snapshot下的几个文件就是自动生成的dump文件，但是这不是标准的dump文件，所以需要选择文件右键导出标准dump文件，保存到一个目录下：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png\" alt=\"屏幕快照 2017-04-27 下午1.49.26\"></p>\n<h2 id=\"Mat打开标准dump文件\"><a href=\"#Mat打开标准dump文件\" class=\"headerlink\" title=\"Mat打开标准dump文件\"></a>Mat打开标准dump文件</h2><p>使用Mat，菜单open File选择刚才导出的dump文件，经过分析后回显示如下所示的项目：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png\" alt=\"屏幕快照 2017-04-27 下午2.08.27\"></p>\n<p>Mat从多角度提供了内存分析，其中包括Histogram、Dominator Tree、Leak Suspects和Top consumers等。</p>\n<p>overview是一个概况图，把内存的消耗以饼状图形式显示出来，鼠标在每个饼块区域划过或者点击，就会在Inspector栏目显示这块区域的相关信息。</p>\n<p>Leak Suspectss是一个关于内存泄露猜想的饼图，Problem Suspect 1是泄露猜想的描述。看我这里说的像是字节数组，这么大的数组难不成是图片，要知道图片在内存中就是以字节数组形式存在的。</p>\n<p>平常内存分析比较常用的还是Histogram、Dominator Tree。</p>\n<h2 id=\"开始分析内存\"><a href=\"#开始分析内存\" class=\"headerlink\" title=\"开始分析内存\"></a>开始分析内存</h2><p>这里我们使用Histogram进行分析，切换到Histogram页面。这个页面主要有4个列，Class Name、Objects、Shallow Heap和Retained Heap。其中Class Name是全类名，Objects是这个类的对象实例个数。Shallow Heap是对象本身占用内存大小，非数组的常规对象，本身内存占用很小，所以这个对泄露分析作用不大。Retained Heap指当前对象大小和当前对象能直接或间接引用的对象大小的总和。这个栏目是分析重点。</p>\n<p>内存分析是分析的整个系统的内存泄露，而我们只要查找我们APP的内存泄露情况。这无疑增加了很多工作，不过幸亏Histogram支持正则表达式查找，在Regex中输入我们的包名进行过滤，直奔和我们APP有关的内存泄露：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png\" alt=\"屏幕快照 2017-04-27 下午3.11.33\"></p>\n<p>过滤后就显示了我们APP相关内存信息，按Retained Heap大小排列下，发现Student和MainActivity这两个类问题比较大。但是MainActivity的Objects数量为1，而Student的为130，看起来Student问题更严重，所以先从Student入手：</p>\n<p>首先看下是哪里的引用导致了Student不能被GC回收。<img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png\" alt=\"屏幕快照 2017-04-27 下午3.19.06\"></p>\n<p>右键使用Merge Shortest Paths to GC Roots显示距GC Root最短路径，当然选择过程中要排除软引用和弱引用，因为这些标记的一般都是可以被回收的。进入结果页查看：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png\" alt=\"屏幕快照 2017-04-27 下午3.22.23\"></p>\n<p>啧啧，原来Student不能被回收竟然就是这个MainActivity搞的鬼，可以看到这个类里面有个students集合里面存放的正式不能回收的Student对象。</p>\n<p>看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">static List&lt;Student&gt; students=new ArrayList&lt;&gt;();</div><div class=\"line\">static final String tag=&quot;MainActivity&quot;;</div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    sample_text = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">    TestNative testNative = new TestNative();</div><div class=\"line\">    sample_text.setText(testNative.stringFromJNI());</div><div class=\"line\">    for (int i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        Student student = new Student(&quot;jenson&quot; + i, i);</div><div class=\"line\">        students.add(student);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原来不能被回收是因为用static修饰了students集合。这导致其生命周期边长，在Activity销毁时，仍然存在。问题找到了，去掉static完成内存泄露修复。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>关于Android内存优化可参见我的另一篇文章[<a href=\"http://www.jensondev.me/2017/04/21/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/\">Android性能优化之内存优化</a>]。Android性能优化中内存优化可谓重中之重，而内存泄露又是Android内存优化的重灾区。重灾区就要重拳出击，整治内存泄露，Mat是必备的利器。</p>\n<h1 id=\"关于Mat\"><a href=\"#关于Mat\" class=\"headerlink\" title=\"关于Mat\"></a>关于Mat</h1><p>Mat，全面Memory Analyzer Tool，Java内存分析工具。注意一点，Mat是由eclipse社区维护，所以如果使用Android studio开发的话，需要单独下载，<a href=\"http://www.eclipse.org/mat/downloads.php\">官方通道</a>。我用的是mac版，后面也会使用mac版来分析。</p>\n<h1 id=\"Mat使用\"><a href=\"#Mat使用\" class=\"headerlink\" title=\"Mat使用\"></a>Mat使用</h1><p>注意：我的测试app包名为：com.example.jenson.myapplication</p>\n<p>在eclipse中集成了Mat，可以直接拿来使用，而使用Android studio时。这两个是分开的，所以我们要先导出dump文件。</p>\n<h2 id=\"Android-studio导出dump文件\"><a href=\"#Android-studio导出dump文件\" class=\"headerlink\" title=\"Android studio导出dump文件\"></a>Android studio导出dump文件</h2><p>打开Android Monitor窗口，<img src=\"/2017/04/27/Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png\" alt=\"0B8D42B7-E5A5-431D-9658-2A99C923CF4E\"></p>\n<p>点击圆圈中的按钮，过几秒中会自动生成一个dump文件，然后自动打开如下图的窗口：<img src=\"/2017/04/27/Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png\" alt=\"1A94CD89-1BE9-46BC-9449-8B55EE34D741\"></p>\n<p>在Heap Snapshot下的几个文件就是自动生成的dump文件，但是这不是标准的dump文件，所以需要选择文件右键导出标准dump文件，保存到一个目录下：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png\" alt=\"屏幕快照 2017-04-27 下午1.49.26\"></p>\n<h2 id=\"Mat打开标准dump文件\"><a href=\"#Mat打开标准dump文件\" class=\"headerlink\" title=\"Mat打开标准dump文件\"></a>Mat打开标准dump文件</h2><p>使用Mat，菜单open File选择刚才导出的dump文件，经过分析后回显示如下所示的项目：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png\" alt=\"屏幕快照 2017-04-27 下午2.08.27\"></p>\n<p>Mat从多角度提供了内存分析，其中包括Histogram、Dominator Tree、Leak Suspects和Top consumers等。</p>\n<p>overview是一个概况图，把内存的消耗以饼状图形式显示出来，鼠标在每个饼块区域划过或者点击，就会在Inspector栏目显示这块区域的相关信息。</p>\n<p>Leak Suspectss是一个关于内存泄露猜想的饼图，Problem Suspect 1是泄露猜想的描述。看我这里说的像是字节数组，这么大的数组难不成是图片，要知道图片在内存中就是以字节数组形式存在的。</p>\n<p>平常内存分析比较常用的还是Histogram、Dominator Tree。</p>\n<h2 id=\"开始分析内存\"><a href=\"#开始分析内存\" class=\"headerlink\" title=\"开始分析内存\"></a>开始分析内存</h2><p>这里我们使用Histogram进行分析，切换到Histogram页面。这个页面主要有4个列，Class Name、Objects、Shallow Heap和Retained Heap。其中Class Name是全类名，Objects是这个类的对象实例个数。Shallow Heap是对象本身占用内存大小，非数组的常规对象，本身内存占用很小，所以这个对泄露分析作用不大。Retained Heap指当前对象大小和当前对象能直接或间接引用的对象大小的总和。这个栏目是分析重点。</p>\n<p>内存分析是分析的整个系统的内存泄露，而我们只要查找我们APP的内存泄露情况。这无疑增加了很多工作，不过幸亏Histogram支持正则表达式查找，在Regex中输入我们的包名进行过滤，直奔和我们APP有关的内存泄露：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png\" alt=\"屏幕快照 2017-04-27 下午3.11.33\"></p>\n<p>过滤后就显示了我们APP相关内存信息，按Retained Heap大小排列下，发现Student和MainActivity这两个类问题比较大。但是MainActivity的Objects数量为1，而Student的为130，看起来Student问题更严重，所以先从Student入手：</p>\n<p>首先看下是哪里的引用导致了Student不能被GC回收。<img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png\" alt=\"屏幕快照 2017-04-27 下午3.19.06\"></p>\n<p>右键使用Merge Shortest Paths to GC Roots显示距GC Root最短路径，当然选择过程中要排除软引用和弱引用，因为这些标记的一般都是可以被回收的。进入结果页查看：</p>\n<p><img src=\"/2017/04/27/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png\" alt=\"屏幕快照 2017-04-27 下午3.22.23\"></p>\n<p>啧啧，原来Student不能被回收竟然就是这个MainActivity搞的鬼，可以看到这个类里面有个students集合里面存放的正式不能回收的Student对象。</p>\n<p>看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">static List&lt;Student&gt; students=new ArrayList&lt;&gt;();</div><div class=\"line\">static final String tag=&quot;MainActivity&quot;;</div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    sample_text = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">    TestNative testNative = new TestNative();</div><div class=\"line\">    sample_text.setText(testNative.stringFromJNI());</div><div class=\"line\">    for (int i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">        Student student = new Student(&quot;jenson&quot; + i, i);</div><div class=\"line\">        students.add(student);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原来不能被回收是因为用static修饰了students集合。这导致其生命周期边长，在Activity销毁时，仍然存在。问题找到了，去掉static完成内存泄露修复。</p>\n"},{"title":"Android开发之JNI深入解析","date":"2017-04-24T16:55:54.000Z","_content":"\n# 说在前面的话\n\n>本来是没有打算写JNI的，因为本来是在看Binder机制原理的，但是看着看着就跑偏看到了JNI。。。\n\n# 通过本章可以了解到这些：\n\n\n\n- jni介绍\n\n- 为什么要学习jni\n\n- jni使用流程是怎样的\n\n- 如何Java调用C\n\n- 如何C调用Java\n\n- 了解jni源码和机制\n\n  ​\n\n# 什么是jni、ndk\n\n\n\njni(java native interface)，Java本地接口。在Java中接口就是一套协议标准，同样这里也是如此，jni是一套让Java和C互通有无的一套标准。看到这脑子里应该有个大概情况：\n\n![屏幕快照 2017-04-21 下午12.17.32.png](http://upload-images.jianshu.io/upload_images/1796052-062e7ea6f0c17ef3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nndk,它只是一套开发工具集，如果再给它加个形容词，那就是本地开发工具集，即Native Development Kit。\n>注意区别ndk和jni，一个是一套软件，一个是套标准。\n\n\n\n# 为什么使用jni\n\n\n\n- 1、效率问题\n\n  C和C++效率比Java要高一些，虽然这种差距随着Java性能优化有越来越小的趋势，但是总归还是存在的。\n\n- 2、安全问题\n\n  虽然没有绝对的安全，但是相对来说C语言的反汇编比Java更不容易看懂\n\n- 3、代码复用\n\n  C语言年代久远，有很多现成的库，如果Java需要使用同样的功能，不需要自己从新实现，jni直接调用库即可。\n\n# jni步骤流程\n\n\n\n就像使用Java类要先加载类文件一样，要使用jni，首先要加载类库，然后通过Java层方法调用JNI层方法。调用流程如下：\n\n![屏幕快照 2017-04-21 下午1.29.01.png](http://upload-images.jianshu.io/upload_images/1796052-a4792879d689f210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面是调用流程，调用的前提是先完成开发，也就是说开发流程是要先完成Java层方法和Native层方法。\n\n基础介绍的差不多了，下面开始进入实际开发部分：\n\n\n\n#  Java调用C\n\n##  看看一般开发时Java如何调用C\n\nJava层和JNI层之间源码是有对应规律的。\n\nJNI实现文件命名为：Java全类名(下划线作分隔符)\n\nJNI实现方法命名为：Java_为前缀+全类名(下划线作分隔符)+方法名\n\n例如，现在Java定义native方法如下：\n\n```\npublic class TestNative {\n    // Used to load the 'native-lib' library on application startup.\n    public native int add(int a,int b);\n    public native String stringFromJNI();\n}\n```\n\n那么按照规范，jni实现方法名为：\n\n```\nJava_com_example_jenson_myapplication_TestNative_add(JNIEnv *env, jobject instance, jint a,\n                                                     jint b) {\n    return a+b;\n}\n```\n\nJava声明方法和jni实现方法都已经实现了，接下来就是调用实现库(.so文件，关于so的编译不在讲):\n\n```\n static {\n        System.loadLibrary(\"native-lib\");\n    }\n```\n\n上面是最普通也是最简单的jni开发流程三步走，但是其中有很多问题没有弄明白，比如JNIENV是什么，Java中参数int为什么变为jint了等等。\n\n学习最好的方法就是看代码，那么我们就看看系统jni使用示例：Log打印系统。\n\n## 看看Log打印系统Java如何调用C\n\n首先我们看下Log.java的源码才好下手。\n\n### 简单介绍Log.java源码\n\n看看Log.i()方法实现：\n\n    public static int i(String tag, String msg, Throwable tr) {\n        return println_native(LOG_ID_MAIN, INFO, tag, msg + '\\n' + getStackTraceString(tr));\n    }\n    \n    public static int w(String tag, String msg) {\n        return println_native(LOG_ID_MAIN, WARN, tag, msg);\n    }\n可以看出真正的打印是在 println_native 方法中，而这个方法是一个本地方法：\n\n```\npublic static native int println_native(int bufID,int priority, String tag, String msg);\npublic static native boolean isLoggable(String tag, int level);\n```\n\n\n\n> 原来JNI中Java层的实现这么简单，只需要声明一个native修饰的方法，传入必须的参数就行了。\n\n下面研究中心要转移到jni层实现了，源码那么多如何找到jni实现呢？\n\n### JNI层源码探究\n\n- 查找JNI层实现\n\n  按照上面说的规范，直接查找Java类Log的全类名。\n\n  例如 Log类全类名为android.util.Log，其对应的Native文件名称应该为android_util_Log。我们试下：\n\n  ![屏幕快照 2017-04-24 下午9.57.43](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png)\n\n  果真找到了，下面开始探究源码：\n\n- JNI源码开扒\n\n  我们首先找到Java层println_native方法JNI层的实现，按照上面的命名规范，没有找到 Java_android_util_Log_println_native ，但是却找到了这个方法：android_util_Log_println_native ，看来Android系统级的JNI没有遵循规范啊。不过没关系，*只要记住JNI有两种方式：一种是遵守JNI命名规范的日常使用方法，另一种是是这种系统级JNI没有Java_前缀就行了* 。不影响我们看代码：\n\n  ![屏幕快照 2017-04-24 下午10.29.17](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png)\n\n  可以看出该方法代码比较少，因为我们是研究JNI，而不是研究Log如何打印，所以方法中对于其他方法调用不再深入研究，但是现在Java声明方法和JNI实现方法都找到了，但是系统式如何把这两个给关联起来的呢？我们继续往下看：\n\n  ​\n\n- Java和JNI双方的方法如何对上眼的\n\n  在该文件中有这样一个方法 register_android_util_Log，我们看下实现：\n\n  ![屏幕快照 2017-04-24 下午11.04.06](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png)\n\n  这个方法前面大部分代码给我的第一感觉就是：这么TM和Java的反射好像啊！难道是C++版反射？反正意思就是通过Java的Log类拿到该类的几个变量(C语言中习惯称为域)\n\n  看最后一行调用了AndroidRunTime的方法，顾名思义是注册本地方法，其中参数 gMethods  值得一看：\n\n  ![屏幕快照 2017-04-24 下午11.14.36](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png)\n\n  这是一个静态结构体数组，这个比较有意思，看注释可以看出大括弧的三个元素分别是名称、签名和函数指针。而名称恰恰是Java里面声明的本地方法，签名是本地方法的签名，函数指针指向的是Native实现方法。一个数组就把Java方法和Native方法给关联起来了。因为Java支持方法重载，为了确保调用的唯一性，于是就有了方法签名，下面说说方法签名机制：\n\n  首先看下签名规则：\n\n  | Java类型  | 类型签名    |\n  | ------- | ------- |\n  | boolean | Z       |\n  | byte    | B       |\n  | char    | C       |\n  | long    | J       |\n  | float   | F       |\n  | double  | D       |\n  | short   | S       |\n  | int     | I       |\n  | 其他类     | L全类名;   |\n  | 数组      | [元素类型签名 |\n\n  > 注意：方法签名格式分为两部分：参数类型签名+返回值类型签名，类型签名之间没有空格，其中参数类型签名使用()括起来，有多少参数就有多少参数类型签名，格式为： *(参数1类型签名参数n类型签名)返回值类型签名* ,注意全类名用\"/\"分隔。\n\n  拿 boolean isLoggable(String tag, int level) 举例来说其方法签名为(Ljava/lang/String;I)Z 。\n\n  说完了方法签名规则，我们继续，在android_util_Log文件中有jni方法，所以有了 register_android_util_Log 来注册该文件的jni方法，那么在其他有jni方法的文件中是不是也有类似的register_xxx方法呢？怀着好奇心，打开Parcel看看：\n\n  ```\n  int register_android_os_Parcel(JNIEnv* env)\n  {\n      jclass clazz;\n\n      clazz = env->FindClass(kParcelPathName);\n      LOG_FATAL_IF(clazz == NULL, \"Unable to find class android.os.Parcel\");\n\n      gParcelOffsets.clazz = (jclass) env->NewGlobalRef(clazz);\n      gParcelOffsets.mNativePtr = env->GetFieldID(clazz, \"mNativePtr\", \"J\");\n      gParcelOffsets.obtain = env->GetStaticMethodID(clazz, \"obtain\",\n                                                     \"()Landroid/os/Parcel;\");\n      gParcelOffsets.recycle = env->GetMethodID(clazz, \"recycle\", \"()V\");\n\n      return AndroidRuntime::registerNativeMethods(\n          env, kParcelPathName,\n          gParcelMethods, NELEM(gParcelMethods));\n  }\n  ```\n\n  看到register_android_os_Parcel 方法证实了我的猜测，所以根据归纳法暂且可以认为系统的涉及jni方法的文件中都会有对应的注册方法而且最终都调用了AndroidRunTime::registerNativeMethods()。\n\n  其实registerNativeMethods方法的第二个参数是类文件路径：\n\n  ```\n  AndroidRuntime::registerNativeMethods(env, \"android/util/Log\", gMethods, NELEM(gMethods));\n  ```\n\n  而mMethods数组中又对应了JNI实现方法和Java方法，通过registerNativeMethods方法调用jniRegisterNativeMethods()然后调用RegisterNatives方法最终告诉了JVM Java类和JNI实现方法的映射关系，这样就完了Java调用C。\n\n  ​\n\n- Java类型和JNI类型如何对应的\n\n  首先看下基本类型的对应关系：\n\n  | Java类型  | JNI类型    | 字长   |\n  | ------- | -------- | ---- |\n  | boolean | jboolean | 8位   |\n  | byte    | jbyte    | 8位   |\n  | char    | jchar    | 16位  |\n  | short   | jshort   | 16位  |\n  | int     | jint     | 32位  |\n  | long    | jlong    | 64位  |\n  | float   | jfloat   | 32位  |\n  | double  | jdouble  | 64位  |\n  | void    | void     |      |\n\n  很好奇jboolean这些类型是怎么来的，既然是jni类型就先去jni.h头文件下看看有没有定义：\n\n  ![屏幕快照 2017-04-25 下午12.56.36](Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png)\n\n  竟然找到了，本来以为jxx是jni新开发的类型，原来就是对C类型起了一个别名。简单理解就是把Java基本类型的值给到了占用同样字节大小的C类型上。\n\n  下面再看看引用类型对应关系：\n\n  | Java类型                                   | JNI类型                                    |\n  | ---------------------------------------- | ---------------------------------------- |\n  | java.lang.Class                          | class                                    |\n  | java.lang.String                         | string                                   |\n  | java.lang.Throwable                      | throwable                                |\n  | Object[]、boolean[]、byte[]、char[]、short[]、int[]、long[]、float[]、double[] | jobjectArray、jbooleanArray、jbyteArray、jcharArray、jshortArray、jintArray、jlongArray、jfloatArray、jdoubleArray |\n  | java.lang.Object                         | jobject                                  |\n\n  ​\n\n#  C调用Java\n\n上面介绍了Java如何调用C，本节讲下C如何调用Java：\n\nC调用Java按流程走也很简单，通过全类名找到类，找到类构造方法，根据构造方法构建对象，根据对象调用变量和方法。OK，我们通过一个示例来讲解下：\n\n示例流程是这样子，我们通过Java方法stringFromJNI调用JNI实现方法，但是在实现方法中并没有直接返回一个字符串，而是该方法中调用了一个Java方法，其实现如下：\n\n```\n    public String callByNative( ){\n        return \"callByNative\";\n    }\n```\n\n返回的字符串直接显示在TextView中：\n\n```\n    sample_text = (TextView) findViewById(R.id.sample_text);\n    TestNative testNative = new TestNative();\n    sample_text.setText(testNative.stringFromJNI());\n```\n\n接下来我们需要自己在stringFromJNI的实现方法中调用Java层的callByNative：\n\n首先通过全类名找到类，通过FindClass方法,参数为全类名：\n\n```\n    jclass clazz = env->FindClass(\"com/example/jenson/myapplication/TestNative\");\n```\n\n然后通过构造方法构建对象，要调用构造方法先找到构造方法的ID：\n\n```\njmethodID mid = env->GetMethodID(clazz,\"<init>\",\"()V\");\njobject  obj= env->NewObject(clazz,mid);\n```\n\n要注意的是：构造方法比较特殊，所以第二个参数的方法名要传”<init>“，第三个参数为方法签名，至于签名规则上面有介绍，根据参数自己填写签名。\n\n创建对象时使用NewObject，需要传入创建对象使用的类及构造方法对应的id。\n\n对象上面已经创建完成，接下来可以调用实例方法callByNative了：\n\n```\n mid = env->GetMethodID(clazz,\"callByNative\",\"()Ljava/lang/String;\");\n jstring js = (jstring) env->CallObjectMethod(obj, mid);\n```\n\n注意调用一个方法前要先获取方法ID，然后通过Call<Type>Method方法传入对象和方法ID，达到实例方法调用。\n\n因为callByNative方法返回的是String，所以按照上面说的应该调用CallStringMethod方法，但是jni没有这个方法，所以直接使用了CallObjectMethod，然后强制转换来得到String，比较Object是一切类基类。\n\n最终stringFromJNI实现代码如下：\n\n```\nJava_com_example_jenson_myapplication_TestNative_stringFromJNI(JNIEnv *env, jobject instance) {\n\n    // 这里通过C调用callByNative方法\n    jclass clazz = env->FindClass(\"com/example/jenson/myapplication/TestNative\");\n    jmethodID mid = env->GetMethodID(clazz,\"<init>\",\"()V\");\n    jobject  obj= env->NewObject(clazz,mid);\n    mid = env->GetMethodID(clazz,\"callByNative\",\"()Ljava/lang/String;\");\n    jstring js = (jstring) env->CallObjectMethod(obj, mid);\n    if (js ==NULL) {\n        js = (jstring) \"hello\";\n    }\n    return js;\n}\n```\n\n\n\n看下执行结果，达到了我们的要求：![屏幕快照 2017-04-25 下午2.54.18](Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png)\n\n\n\njnienv提供了很多参数实现C调用Java，诸如：GetMethodID、FindClass、GetFieldID，还有静态方法和域：GetStaticMethodID、GetStaticFieldID等，感兴趣的可以去jni.h去研究下。\n\n\n\n# JNIENV是什么鬼\n\n\n\n\n\n# JNI异常处理\n\n","source":"_posts/Android开发之JNI深入解析.md","raw":"---\ntitle: Android开发之JNI深入解析\ndate: 2017-04-25 00:55:54\ntags: Android\ncategories: Android\n---\n\n# 说在前面的话\n\n>本来是没有打算写JNI的，因为本来是在看Binder机制原理的，但是看着看着就跑偏看到了JNI。。。\n\n# 通过本章可以了解到这些：\n\n\n\n- jni介绍\n\n- 为什么要学习jni\n\n- jni使用流程是怎样的\n\n- 如何Java调用C\n\n- 如何C调用Java\n\n- 了解jni源码和机制\n\n  ​\n\n# 什么是jni、ndk\n\n\n\njni(java native interface)，Java本地接口。在Java中接口就是一套协议标准，同样这里也是如此，jni是一套让Java和C互通有无的一套标准。看到这脑子里应该有个大概情况：\n\n![屏幕快照 2017-04-21 下午12.17.32.png](http://upload-images.jianshu.io/upload_images/1796052-062e7ea6f0c17ef3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nndk,它只是一套开发工具集，如果再给它加个形容词，那就是本地开发工具集，即Native Development Kit。\n>注意区别ndk和jni，一个是一套软件，一个是套标准。\n\n\n\n# 为什么使用jni\n\n\n\n- 1、效率问题\n\n  C和C++效率比Java要高一些，虽然这种差距随着Java性能优化有越来越小的趋势，但是总归还是存在的。\n\n- 2、安全问题\n\n  虽然没有绝对的安全，但是相对来说C语言的反汇编比Java更不容易看懂\n\n- 3、代码复用\n\n  C语言年代久远，有很多现成的库，如果Java需要使用同样的功能，不需要自己从新实现，jni直接调用库即可。\n\n# jni步骤流程\n\n\n\n就像使用Java类要先加载类文件一样，要使用jni，首先要加载类库，然后通过Java层方法调用JNI层方法。调用流程如下：\n\n![屏幕快照 2017-04-21 下午1.29.01.png](http://upload-images.jianshu.io/upload_images/1796052-a4792879d689f210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n上面是调用流程，调用的前提是先完成开发，也就是说开发流程是要先完成Java层方法和Native层方法。\n\n基础介绍的差不多了，下面开始进入实际开发部分：\n\n\n\n#  Java调用C\n\n##  看看一般开发时Java如何调用C\n\nJava层和JNI层之间源码是有对应规律的。\n\nJNI实现文件命名为：Java全类名(下划线作分隔符)\n\nJNI实现方法命名为：Java_为前缀+全类名(下划线作分隔符)+方法名\n\n例如，现在Java定义native方法如下：\n\n```\npublic class TestNative {\n    // Used to load the 'native-lib' library on application startup.\n    public native int add(int a,int b);\n    public native String stringFromJNI();\n}\n```\n\n那么按照规范，jni实现方法名为：\n\n```\nJava_com_example_jenson_myapplication_TestNative_add(JNIEnv *env, jobject instance, jint a,\n                                                     jint b) {\n    return a+b;\n}\n```\n\nJava声明方法和jni实现方法都已经实现了，接下来就是调用实现库(.so文件，关于so的编译不在讲):\n\n```\n static {\n        System.loadLibrary(\"native-lib\");\n    }\n```\n\n上面是最普通也是最简单的jni开发流程三步走，但是其中有很多问题没有弄明白，比如JNIENV是什么，Java中参数int为什么变为jint了等等。\n\n学习最好的方法就是看代码，那么我们就看看系统jni使用示例：Log打印系统。\n\n## 看看Log打印系统Java如何调用C\n\n首先我们看下Log.java的源码才好下手。\n\n### 简单介绍Log.java源码\n\n看看Log.i()方法实现：\n\n    public static int i(String tag, String msg, Throwable tr) {\n        return println_native(LOG_ID_MAIN, INFO, tag, msg + '\\n' + getStackTraceString(tr));\n    }\n    \n    public static int w(String tag, String msg) {\n        return println_native(LOG_ID_MAIN, WARN, tag, msg);\n    }\n可以看出真正的打印是在 println_native 方法中，而这个方法是一个本地方法：\n\n```\npublic static native int println_native(int bufID,int priority, String tag, String msg);\npublic static native boolean isLoggable(String tag, int level);\n```\n\n\n\n> 原来JNI中Java层的实现这么简单，只需要声明一个native修饰的方法，传入必须的参数就行了。\n\n下面研究中心要转移到jni层实现了，源码那么多如何找到jni实现呢？\n\n### JNI层源码探究\n\n- 查找JNI层实现\n\n  按照上面说的规范，直接查找Java类Log的全类名。\n\n  例如 Log类全类名为android.util.Log，其对应的Native文件名称应该为android_util_Log。我们试下：\n\n  ![屏幕快照 2017-04-24 下午9.57.43](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png)\n\n  果真找到了，下面开始探究源码：\n\n- JNI源码开扒\n\n  我们首先找到Java层println_native方法JNI层的实现，按照上面的命名规范，没有找到 Java_android_util_Log_println_native ，但是却找到了这个方法：android_util_Log_println_native ，看来Android系统级的JNI没有遵循规范啊。不过没关系，*只要记住JNI有两种方式：一种是遵守JNI命名规范的日常使用方法，另一种是是这种系统级JNI没有Java_前缀就行了* 。不影响我们看代码：\n\n  ![屏幕快照 2017-04-24 下午10.29.17](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png)\n\n  可以看出该方法代码比较少，因为我们是研究JNI，而不是研究Log如何打印，所以方法中对于其他方法调用不再深入研究，但是现在Java声明方法和JNI实现方法都找到了，但是系统式如何把这两个给关联起来的呢？我们继续往下看：\n\n  ​\n\n- Java和JNI双方的方法如何对上眼的\n\n  在该文件中有这样一个方法 register_android_util_Log，我们看下实现：\n\n  ![屏幕快照 2017-04-24 下午11.04.06](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png)\n\n  这个方法前面大部分代码给我的第一感觉就是：这么TM和Java的反射好像啊！难道是C++版反射？反正意思就是通过Java的Log类拿到该类的几个变量(C语言中习惯称为域)\n\n  看最后一行调用了AndroidRunTime的方法，顾名思义是注册本地方法，其中参数 gMethods  值得一看：\n\n  ![屏幕快照 2017-04-24 下午11.14.36](Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png)\n\n  这是一个静态结构体数组，这个比较有意思，看注释可以看出大括弧的三个元素分别是名称、签名和函数指针。而名称恰恰是Java里面声明的本地方法，签名是本地方法的签名，函数指针指向的是Native实现方法。一个数组就把Java方法和Native方法给关联起来了。因为Java支持方法重载，为了确保调用的唯一性，于是就有了方法签名，下面说说方法签名机制：\n\n  首先看下签名规则：\n\n  | Java类型  | 类型签名    |\n  | ------- | ------- |\n  | boolean | Z       |\n  | byte    | B       |\n  | char    | C       |\n  | long    | J       |\n  | float   | F       |\n  | double  | D       |\n  | short   | S       |\n  | int     | I       |\n  | 其他类     | L全类名;   |\n  | 数组      | [元素类型签名 |\n\n  > 注意：方法签名格式分为两部分：参数类型签名+返回值类型签名，类型签名之间没有空格，其中参数类型签名使用()括起来，有多少参数就有多少参数类型签名，格式为： *(参数1类型签名参数n类型签名)返回值类型签名* ,注意全类名用\"/\"分隔。\n\n  拿 boolean isLoggable(String tag, int level) 举例来说其方法签名为(Ljava/lang/String;I)Z 。\n\n  说完了方法签名规则，我们继续，在android_util_Log文件中有jni方法，所以有了 register_android_util_Log 来注册该文件的jni方法，那么在其他有jni方法的文件中是不是也有类似的register_xxx方法呢？怀着好奇心，打开Parcel看看：\n\n  ```\n  int register_android_os_Parcel(JNIEnv* env)\n  {\n      jclass clazz;\n\n      clazz = env->FindClass(kParcelPathName);\n      LOG_FATAL_IF(clazz == NULL, \"Unable to find class android.os.Parcel\");\n\n      gParcelOffsets.clazz = (jclass) env->NewGlobalRef(clazz);\n      gParcelOffsets.mNativePtr = env->GetFieldID(clazz, \"mNativePtr\", \"J\");\n      gParcelOffsets.obtain = env->GetStaticMethodID(clazz, \"obtain\",\n                                                     \"()Landroid/os/Parcel;\");\n      gParcelOffsets.recycle = env->GetMethodID(clazz, \"recycle\", \"()V\");\n\n      return AndroidRuntime::registerNativeMethods(\n          env, kParcelPathName,\n          gParcelMethods, NELEM(gParcelMethods));\n  }\n  ```\n\n  看到register_android_os_Parcel 方法证实了我的猜测，所以根据归纳法暂且可以认为系统的涉及jni方法的文件中都会有对应的注册方法而且最终都调用了AndroidRunTime::registerNativeMethods()。\n\n  其实registerNativeMethods方法的第二个参数是类文件路径：\n\n  ```\n  AndroidRuntime::registerNativeMethods(env, \"android/util/Log\", gMethods, NELEM(gMethods));\n  ```\n\n  而mMethods数组中又对应了JNI实现方法和Java方法，通过registerNativeMethods方法调用jniRegisterNativeMethods()然后调用RegisterNatives方法最终告诉了JVM Java类和JNI实现方法的映射关系，这样就完了Java调用C。\n\n  ​\n\n- Java类型和JNI类型如何对应的\n\n  首先看下基本类型的对应关系：\n\n  | Java类型  | JNI类型    | 字长   |\n  | ------- | -------- | ---- |\n  | boolean | jboolean | 8位   |\n  | byte    | jbyte    | 8位   |\n  | char    | jchar    | 16位  |\n  | short   | jshort   | 16位  |\n  | int     | jint     | 32位  |\n  | long    | jlong    | 64位  |\n  | float   | jfloat   | 32位  |\n  | double  | jdouble  | 64位  |\n  | void    | void     |      |\n\n  很好奇jboolean这些类型是怎么来的，既然是jni类型就先去jni.h头文件下看看有没有定义：\n\n  ![屏幕快照 2017-04-25 下午12.56.36](Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png)\n\n  竟然找到了，本来以为jxx是jni新开发的类型，原来就是对C类型起了一个别名。简单理解就是把Java基本类型的值给到了占用同样字节大小的C类型上。\n\n  下面再看看引用类型对应关系：\n\n  | Java类型                                   | JNI类型                                    |\n  | ---------------------------------------- | ---------------------------------------- |\n  | java.lang.Class                          | class                                    |\n  | java.lang.String                         | string                                   |\n  | java.lang.Throwable                      | throwable                                |\n  | Object[]、boolean[]、byte[]、char[]、short[]、int[]、long[]、float[]、double[] | jobjectArray、jbooleanArray、jbyteArray、jcharArray、jshortArray、jintArray、jlongArray、jfloatArray、jdoubleArray |\n  | java.lang.Object                         | jobject                                  |\n\n  ​\n\n#  C调用Java\n\n上面介绍了Java如何调用C，本节讲下C如何调用Java：\n\nC调用Java按流程走也很简单，通过全类名找到类，找到类构造方法，根据构造方法构建对象，根据对象调用变量和方法。OK，我们通过一个示例来讲解下：\n\n示例流程是这样子，我们通过Java方法stringFromJNI调用JNI实现方法，但是在实现方法中并没有直接返回一个字符串，而是该方法中调用了一个Java方法，其实现如下：\n\n```\n    public String callByNative( ){\n        return \"callByNative\";\n    }\n```\n\n返回的字符串直接显示在TextView中：\n\n```\n    sample_text = (TextView) findViewById(R.id.sample_text);\n    TestNative testNative = new TestNative();\n    sample_text.setText(testNative.stringFromJNI());\n```\n\n接下来我们需要自己在stringFromJNI的实现方法中调用Java层的callByNative：\n\n首先通过全类名找到类，通过FindClass方法,参数为全类名：\n\n```\n    jclass clazz = env->FindClass(\"com/example/jenson/myapplication/TestNative\");\n```\n\n然后通过构造方法构建对象，要调用构造方法先找到构造方法的ID：\n\n```\njmethodID mid = env->GetMethodID(clazz,\"<init>\",\"()V\");\njobject  obj= env->NewObject(clazz,mid);\n```\n\n要注意的是：构造方法比较特殊，所以第二个参数的方法名要传”<init>“，第三个参数为方法签名，至于签名规则上面有介绍，根据参数自己填写签名。\n\n创建对象时使用NewObject，需要传入创建对象使用的类及构造方法对应的id。\n\n对象上面已经创建完成，接下来可以调用实例方法callByNative了：\n\n```\n mid = env->GetMethodID(clazz,\"callByNative\",\"()Ljava/lang/String;\");\n jstring js = (jstring) env->CallObjectMethod(obj, mid);\n```\n\n注意调用一个方法前要先获取方法ID，然后通过Call<Type>Method方法传入对象和方法ID，达到实例方法调用。\n\n因为callByNative方法返回的是String，所以按照上面说的应该调用CallStringMethod方法，但是jni没有这个方法，所以直接使用了CallObjectMethod，然后强制转换来得到String，比较Object是一切类基类。\n\n最终stringFromJNI实现代码如下：\n\n```\nJava_com_example_jenson_myapplication_TestNative_stringFromJNI(JNIEnv *env, jobject instance) {\n\n    // 这里通过C调用callByNative方法\n    jclass clazz = env->FindClass(\"com/example/jenson/myapplication/TestNative\");\n    jmethodID mid = env->GetMethodID(clazz,\"<init>\",\"()V\");\n    jobject  obj= env->NewObject(clazz,mid);\n    mid = env->GetMethodID(clazz,\"callByNative\",\"()Ljava/lang/String;\");\n    jstring js = (jstring) env->CallObjectMethod(obj, mid);\n    if (js ==NULL) {\n        js = (jstring) \"hello\";\n    }\n    return js;\n}\n```\n\n\n\n看下执行结果，达到了我们的要求：![屏幕快照 2017-04-25 下午2.54.18](Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png)\n\n\n\njnienv提供了很多参数实现C调用Java，诸如：GetMethodID、FindClass、GetFieldID，还有静态方法和域：GetStaticMethodID、GetStaticFieldID等，感兴趣的可以去jni.h去研究下。\n\n\n\n# JNIENV是什么鬼\n\n\n\n\n\n# JNI异常处理\n\n","slug":"Android开发之JNI深入解析","published":1,"updated":"2017-04-25T07:17:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7km000f449clfuma3fn","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><blockquote>\n<p>本来是没有打算写JNI的，因为本来是在看Binder机制原理的，但是看着看着就跑偏看到了JNI。。。</p>\n</blockquote>\n<h1 id=\"通过本章可以了解到这些：\"><a href=\"#通过本章可以了解到这些：\" class=\"headerlink\" title=\"通过本章可以了解到这些：\"></a>通过本章可以了解到这些：</h1><ul>\n<li><p>jni介绍</p>\n</li>\n<li><p>为什么要学习jni</p>\n</li>\n<li><p>jni使用流程是怎样的</p>\n</li>\n<li><p>如何Java调用C</p>\n</li>\n<li><p>如何C调用Java</p>\n</li>\n<li><p>了解jni源码和机制</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"什么是jni、ndk\"><a href=\"#什么是jni、ndk\" class=\"headerlink\" title=\"什么是jni、ndk\"></a>什么是jni、ndk</h1><p>jni(java native interface)，Java本地接口。在Java中接口就是一套协议标准，同样这里也是如此，jni是一套让Java和C互通有无的一套标准。看到这脑子里应该有个大概情况：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-062e7ea6f0c17ef3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-21 下午12.17.32.png\"><br>ndk,它只是一套开发工具集，如果再给它加个形容词，那就是本地开发工具集，即Native Development Kit。</p>\n<blockquote>\n<p>注意区别ndk和jni，一个是一套软件，一个是套标准。</p>\n</blockquote>\n<h1 id=\"为什么使用jni\"><a href=\"#为什么使用jni\" class=\"headerlink\" title=\"为什么使用jni\"></a>为什么使用jni</h1><ul>\n<li><p>1、效率问题</p>\n<p>C和C++效率比Java要高一些，虽然这种差距随着Java性能优化有越来越小的趋势，但是总归还是存在的。</p>\n</li>\n<li><p>2、安全问题</p>\n<p>虽然没有绝对的安全，但是相对来说C语言的反汇编比Java更不容易看懂</p>\n</li>\n<li><p>3、代码复用</p>\n<p>C语言年代久远，有很多现成的库，如果Java需要使用同样的功能，不需要自己从新实现，jni直接调用库即可。</p>\n</li>\n</ul>\n<h1 id=\"jni步骤流程\"><a href=\"#jni步骤流程\" class=\"headerlink\" title=\"jni步骤流程\"></a>jni步骤流程</h1><p>就像使用Java类要先加载类文件一样，要使用jni，首先要加载类库，然后通过Java层方法调用JNI层方法。调用流程如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a4792879d689f210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-21 下午1.29.01.png\"></p>\n<p>上面是调用流程，调用的前提是先完成开发，也就是说开发流程是要先完成Java层方法和Native层方法。</p>\n<p>基础介绍的差不多了，下面开始进入实际开发部分：</p>\n<h1 id=\"Java调用C\"><a href=\"#Java调用C\" class=\"headerlink\" title=\"Java调用C\"></a>Java调用C</h1><h2 id=\"看看一般开发时Java如何调用C\"><a href=\"#看看一般开发时Java如何调用C\" class=\"headerlink\" title=\"看看一般开发时Java如何调用C\"></a>看看一般开发时Java如何调用C</h2><p>Java层和JNI层之间源码是有对应规律的。</p>\n<p>JNI实现文件命名为：Java全类名(下划线作分隔符)</p>\n<p>JNI实现方法命名为：Java_为前缀+全类名(下划线作分隔符)+方法名</p>\n<p>例如，现在Java定义native方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TestNative &#123;</div><div class=\"line\">    // Used to load the &apos;native-lib&apos; library on application startup.</div><div class=\"line\">    public native int add(int a,int b);</div><div class=\"line\">    public native String stringFromJNI();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么按照规范，jni实现方法名为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java_com_example_jenson_myapplication_TestNative_add(JNIEnv *env, jobject instance, jint a,</div><div class=\"line\">                                                     jint b) &#123;</div><div class=\"line\">    return a+b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Java声明方法和jni实现方法都已经实现了，接下来就是调用实现库(.so文件，关于so的编译不在讲):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static &#123;</div><div class=\"line\">       System.loadLibrary(&quot;native-lib&quot;);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面是最普通也是最简单的jni开发流程三步走，但是其中有很多问题没有弄明白，比如JNIENV是什么，Java中参数int为什么变为jint了等等。</p>\n<p>学习最好的方法就是看代码，那么我们就看看系统jni使用示例：Log打印系统。</p>\n<h2 id=\"看看Log打印系统Java如何调用C\"><a href=\"#看看Log打印系统Java如何调用C\" class=\"headerlink\" title=\"看看Log打印系统Java如何调用C\"></a>看看Log打印系统Java如何调用C</h2><p>首先我们看下Log.java的源码才好下手。</p>\n<h3 id=\"简单介绍Log-java源码\"><a href=\"#简单介绍Log-java源码\" class=\"headerlink\" title=\"简单介绍Log.java源码\"></a>简单介绍Log.java源码</h3><p>看看Log.i()方法实现：</p>\n<pre><code>public static int i(String tag, String msg, Throwable tr) {\n    return println_native(LOG_ID_MAIN, INFO, tag, msg + &apos;\\n&apos; + getStackTraceString(tr));\n}\n\npublic static int w(String tag, String msg) {\n    return println_native(LOG_ID_MAIN, WARN, tag, msg);\n}\n</code></pre><p>可以看出真正的打印是在 println_native 方法中，而这个方法是一个本地方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static native int println_native(int bufID,int priority, String tag, String msg);</div><div class=\"line\">public static native boolean isLoggable(String tag, int level);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原来JNI中Java层的实现这么简单，只需要声明一个native修饰的方法，传入必须的参数就行了。</p>\n</blockquote>\n<p>下面研究中心要转移到jni层实现了，源码那么多如何找到jni实现呢？</p>\n<h3 id=\"JNI层源码探究\"><a href=\"#JNI层源码探究\" class=\"headerlink\" title=\"JNI层源码探究\"></a>JNI层源码探究</h3><ul>\n<li><p>查找JNI层实现</p>\n<p>按照上面说的规范，直接查找Java类Log的全类名。</p>\n<p>例如 Log类全类名为android.util.Log，其对应的Native文件名称应该为android_util_Log。我们试下：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png\" alt=\"屏幕快照 2017-04-24 下午9.57.43\"></p>\n<p>果真找到了，下面开始探究源码：</p>\n</li>\n<li><p>JNI源码开扒</p>\n<p>我们首先找到Java层println_native方法JNI层的实现，按照上面的命名规范，没有找到 Java_android_util_Log_println_native ，但是却找到了这个方法：android_util_Log_println<em>native ，看来Android系统级的JNI没有遵循规范啊。不过没关系，*只要记住JNI有两种方式：一种是遵守JNI命名规范的日常使用方法，另一种是是这种系统级JNI没有Java</em>前缀就行了* 。不影响我们看代码：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png\" alt=\"屏幕快照 2017-04-24 下午10.29.17\"></p>\n<p>可以看出该方法代码比较少，因为我们是研究JNI，而不是研究Log如何打印，所以方法中对于其他方法调用不再深入研究，但是现在Java声明方法和JNI实现方法都找到了，但是系统式如何把这两个给关联起来的呢？我们继续往下看：</p>\n<p>​</p>\n</li>\n<li><p>Java和JNI双方的方法如何对上眼的</p>\n<p>在该文件中有这样一个方法 register_android_util_Log，我们看下实现：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png\" alt=\"屏幕快照 2017-04-24 下午11.04.06\"></p>\n<p>这个方法前面大部分代码给我的第一感觉就是：这么TM和Java的反射好像啊！难道是C++版反射？反正意思就是通过Java的Log类拿到该类的几个变量(C语言中习惯称为域)</p>\n<p>看最后一行调用了AndroidRunTime的方法，顾名思义是注册本地方法，其中参数 gMethods  值得一看：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png\" alt=\"屏幕快照 2017-04-24 下午11.14.36\"></p>\n<p>这是一个静态结构体数组，这个比较有意思，看注释可以看出大括弧的三个元素分别是名称、签名和函数指针。而名称恰恰是Java里面声明的本地方法，签名是本地方法的签名，函数指针指向的是Native实现方法。一个数组就把Java方法和Native方法给关联起来了。因为Java支持方法重载，为了确保调用的唯一性，于是就有了方法签名，下面说说方法签名机制：</p>\n<p>首先看下签名规则：</p>\n<p>| Java类型  | 类型签名    |<br>| ——- | ——- |<br>| boolean | Z       |<br>| byte    | B       |<br>| char    | C       |<br>| long    | J       |<br>| float   | F       |<br>| double  | D       |<br>| short   | S       |<br>| int     | I       |<br>| 其他类     | L全类名;   |<br>| 数组      | [元素类型签名 |</p>\n<blockquote>\n<p>注意：方法签名格式分为两部分：参数类型签名+返回值类型签名，类型签名之间没有空格，其中参数类型签名使用()括起来，有多少参数就有多少参数类型签名，格式为： <em>(参数1类型签名参数n类型签名)返回值类型签名</em> ,注意全类名用”/“分隔。</p>\n</blockquote>\n<p>拿 boolean isLoggable(String tag, int level) 举例来说其方法签名为(Ljava/lang/String;I)Z 。</p>\n<p>说完了方法签名规则，我们继续，在android_util_Log文件中有jni方法，所以有了 register_android_util_Log 来注册该文件的jni方法，那么在其他有jni方法的文件中是不是也有类似的register_xxx方法呢？怀着好奇心，打开Parcel看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">int register_android_os_Parcel(JNIEnv* env)</div><div class=\"line\">&#123;</div><div class=\"line\">    jclass clazz;</div><div class=\"line\"></div><div class=\"line\">    clazz = env-&gt;FindClass(kParcelPathName);</div><div class=\"line\">    LOG_FATAL_IF(clazz == NULL, &quot;Unable to find class android.os.Parcel&quot;);</div><div class=\"line\"></div><div class=\"line\">    gParcelOffsets.clazz = (jclass) env-&gt;NewGlobalRef(clazz);</div><div class=\"line\">    gParcelOffsets.mNativePtr = env-&gt;GetFieldID(clazz, &quot;mNativePtr&quot;, &quot;J&quot;);</div><div class=\"line\">    gParcelOffsets.obtain = env-&gt;GetStaticMethodID(clazz, &quot;obtain&quot;,</div><div class=\"line\">                                                   &quot;()Landroid/os/Parcel;&quot;);</div><div class=\"line\">    gParcelOffsets.recycle = env-&gt;GetMethodID(clazz, &quot;recycle&quot;, &quot;()V&quot;);</div><div class=\"line\"></div><div class=\"line\">    return AndroidRuntime::registerNativeMethods(</div><div class=\"line\">        env, kParcelPathName,</div><div class=\"line\">        gParcelMethods, NELEM(gParcelMethods));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到register_android_os_Parcel 方法证实了我的猜测，所以根据归纳法暂且可以认为系统的涉及jni方法的文件中都会有对应的注册方法而且最终都调用了AndroidRunTime::registerNativeMethods()。</p>\n<p>其实registerNativeMethods方法的第二个参数是类文件路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AndroidRuntime::registerNativeMethods(env, &quot;android/util/Log&quot;, gMethods, NELEM(gMethods));</div></pre></td></tr></table></figure>\n<p>而mMethods数组中又对应了JNI实现方法和Java方法，通过registerNativeMethods方法调用jniRegisterNativeMethods()然后调用RegisterNatives方法最终告诉了JVM Java类和JNI实现方法的映射关系，这样就完了Java调用C。</p>\n<p>​</p>\n</li>\n<li><p>Java类型和JNI类型如何对应的</p>\n<p>首先看下基本类型的对应关系：</p>\n<p>| Java类型  | JNI类型    | 字长   |<br>| ——- | ——– | —- |<br>| boolean | jboolean | 8位   |<br>| byte    | jbyte    | 8位   |<br>| char    | jchar    | 16位  |<br>| short   | jshort   | 16位  |<br>| int     | jint     | 32位  |<br>| long    | jlong    | 64位  |<br>| float   | jfloat   | 32位  |<br>| double  | jdouble  | 64位  |<br>| void    | void     |      |</p>\n<p>很好奇jboolean这些类型是怎么来的，既然是jni类型就先去jni.h头文件下看看有没有定义：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png\" alt=\"屏幕快照 2017-04-25 下午12.56.36\"></p>\n<p>竟然找到了，本来以为jxx是jni新开发的类型，原来就是对C类型起了一个别名。简单理解就是把Java基本类型的值给到了占用同样字节大小的C类型上。</p>\n<p>下面再看看引用类型对应关系：</p>\n<p>| Java类型                                   | JNI类型                                    |<br>| —————————————- | —————————————- |<br>| java.lang.Class                          | class                                    |<br>| java.lang.String                         | string                                   |<br>| java.lang.Throwable                      | throwable                                |<br>| Object[]、boolean[]、byte[]、char[]、short[]、int[]、long[]、float[]、double[] | jobjectArray、jbooleanArray、jbyteArray、jcharArray、jshortArray、jintArray、jlongArray、jfloatArray、jdoubleArray |<br>| java.lang.Object                         | jobject                                  |</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"C调用Java\"><a href=\"#C调用Java\" class=\"headerlink\" title=\"C调用Java\"></a>C调用Java</h1><p>上面介绍了Java如何调用C，本节讲下C如何调用Java：</p>\n<p>C调用Java按流程走也很简单，通过全类名找到类，找到类构造方法，根据构造方法构建对象，根据对象调用变量和方法。OK，我们通过一个示例来讲解下：</p>\n<p>示例流程是这样子，我们通过Java方法stringFromJNI调用JNI实现方法，但是在实现方法中并没有直接返回一个字符串，而是该方法中调用了一个Java方法，其实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String callByNative( )&#123;</div><div class=\"line\">    return &quot;callByNative&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回的字符串直接显示在TextView中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sample_text = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">TestNative testNative = new TestNative();</div><div class=\"line\">sample_text.setText(testNative.stringFromJNI());</div></pre></td></tr></table></figure>\n<p>接下来我们需要自己在stringFromJNI的实现方法中调用Java层的callByNative：</p>\n<p>首先通过全类名找到类，通过FindClass方法,参数为全类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass clazz = env-&gt;FindClass(&quot;com/example/jenson/myapplication/TestNative&quot;);</div></pre></td></tr></table></figure>\n<p>然后通过构造方法构建对象，要调用构造方法先找到构造方法的ID：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jmethodID mid = env-&gt;GetMethodID(clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</div><div class=\"line\">jobject  obj= env-&gt;NewObject(clazz,mid);</div></pre></td></tr></table></figure>\n<p>要注意的是：构造方法比较特殊，所以第二个参数的方法名要传”<init>“，第三个参数为方法签名，至于签名规则上面有介绍，根据参数自己填写签名。</init></p>\n<p>创建对象时使用NewObject，需要传入创建对象使用的类及构造方法对应的id。</p>\n<p>对象上面已经创建完成，接下来可以调用实例方法callByNative了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mid = env-&gt;GetMethodID(clazz,&quot;callByNative&quot;,&quot;()Ljava/lang/String;&quot;);</div><div class=\"line\">jstring js = (jstring) env-&gt;CallObjectMethod(obj, mid);</div></pre></td></tr></table></figure>\n<p>注意调用一个方法前要先获取方法ID，然后通过Call<type>Method方法传入对象和方法ID，达到实例方法调用。</type></p>\n<p>因为callByNative方法返回的是String，所以按照上面说的应该调用CallStringMethod方法，但是jni没有这个方法，所以直接使用了CallObjectMethod，然后强制转换来得到String，比较Object是一切类基类。</p>\n<p>最终stringFromJNI实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java_com_example_jenson_myapplication_TestNative_stringFromJNI(JNIEnv *env, jobject instance) &#123;</div><div class=\"line\"></div><div class=\"line\">    // 这里通过C调用callByNative方法</div><div class=\"line\">    jclass clazz = env-&gt;FindClass(&quot;com/example/jenson/myapplication/TestNative&quot;);</div><div class=\"line\">    jmethodID mid = env-&gt;GetMethodID(clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</div><div class=\"line\">    jobject  obj= env-&gt;NewObject(clazz,mid);</div><div class=\"line\">    mid = env-&gt;GetMethodID(clazz,&quot;callByNative&quot;,&quot;()Ljava/lang/String;&quot;);</div><div class=\"line\">    jstring js = (jstring) env-&gt;CallObjectMethod(obj, mid);</div><div class=\"line\">    if (js ==NULL) &#123;</div><div class=\"line\">        js = (jstring) &quot;hello&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return js;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看下执行结果，达到了我们的要求：<img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png\" alt=\"屏幕快照 2017-04-25 下午2.54.18\"></p>\n<p>jnienv提供了很多参数实现C调用Java，诸如：GetMethodID、FindClass、GetFieldID，还有静态方法和域：GetStaticMethodID、GetStaticFieldID等，感兴趣的可以去jni.h去研究下。</p>\n<h1 id=\"JNIENV是什么鬼\"><a href=\"#JNIENV是什么鬼\" class=\"headerlink\" title=\"JNIENV是什么鬼\"></a>JNIENV是什么鬼</h1><h1 id=\"JNI异常处理\"><a href=\"#JNI异常处理\" class=\"headerlink\" title=\"JNI异常处理\"></a>JNI异常处理</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><blockquote>\n<p>本来是没有打算写JNI的，因为本来是在看Binder机制原理的，但是看着看着就跑偏看到了JNI。。。</p>\n</blockquote>\n<h1 id=\"通过本章可以了解到这些：\"><a href=\"#通过本章可以了解到这些：\" class=\"headerlink\" title=\"通过本章可以了解到这些：\"></a>通过本章可以了解到这些：</h1><ul>\n<li><p>jni介绍</p>\n</li>\n<li><p>为什么要学习jni</p>\n</li>\n<li><p>jni使用流程是怎样的</p>\n</li>\n<li><p>如何Java调用C</p>\n</li>\n<li><p>如何C调用Java</p>\n</li>\n<li><p>了解jni源码和机制</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"什么是jni、ndk\"><a href=\"#什么是jni、ndk\" class=\"headerlink\" title=\"什么是jni、ndk\"></a>什么是jni、ndk</h1><p>jni(java native interface)，Java本地接口。在Java中接口就是一套协议标准，同样这里也是如此，jni是一套让Java和C互通有无的一套标准。看到这脑子里应该有个大概情况：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-062e7ea6f0c17ef3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-21 下午12.17.32.png\"><br>ndk,它只是一套开发工具集，如果再给它加个形容词，那就是本地开发工具集，即Native Development Kit。</p>\n<blockquote>\n<p>注意区别ndk和jni，一个是一套软件，一个是套标准。</p>\n</blockquote>\n<h1 id=\"为什么使用jni\"><a href=\"#为什么使用jni\" class=\"headerlink\" title=\"为什么使用jni\"></a>为什么使用jni</h1><ul>\n<li><p>1、效率问题</p>\n<p>C和C++效率比Java要高一些，虽然这种差距随着Java性能优化有越来越小的趋势，但是总归还是存在的。</p>\n</li>\n<li><p>2、安全问题</p>\n<p>虽然没有绝对的安全，但是相对来说C语言的反汇编比Java更不容易看懂</p>\n</li>\n<li><p>3、代码复用</p>\n<p>C语言年代久远，有很多现成的库，如果Java需要使用同样的功能，不需要自己从新实现，jni直接调用库即可。</p>\n</li>\n</ul>\n<h1 id=\"jni步骤流程\"><a href=\"#jni步骤流程\" class=\"headerlink\" title=\"jni步骤流程\"></a>jni步骤流程</h1><p>就像使用Java类要先加载类文件一样，要使用jni，首先要加载类库，然后通过Java层方法调用JNI层方法。调用流程如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a4792879d689f210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-21 下午1.29.01.png\"></p>\n<p>上面是调用流程，调用的前提是先完成开发，也就是说开发流程是要先完成Java层方法和Native层方法。</p>\n<p>基础介绍的差不多了，下面开始进入实际开发部分：</p>\n<h1 id=\"Java调用C\"><a href=\"#Java调用C\" class=\"headerlink\" title=\"Java调用C\"></a>Java调用C</h1><h2 id=\"看看一般开发时Java如何调用C\"><a href=\"#看看一般开发时Java如何调用C\" class=\"headerlink\" title=\"看看一般开发时Java如何调用C\"></a>看看一般开发时Java如何调用C</h2><p>Java层和JNI层之间源码是有对应规律的。</p>\n<p>JNI实现文件命名为：Java全类名(下划线作分隔符)</p>\n<p>JNI实现方法命名为：Java_为前缀+全类名(下划线作分隔符)+方法名</p>\n<p>例如，现在Java定义native方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TestNative &#123;</div><div class=\"line\">    // Used to load the &apos;native-lib&apos; library on application startup.</div><div class=\"line\">    public native int add(int a,int b);</div><div class=\"line\">    public native String stringFromJNI();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么按照规范，jni实现方法名为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java_com_example_jenson_myapplication_TestNative_add(JNIEnv *env, jobject instance, jint a,</div><div class=\"line\">                                                     jint b) &#123;</div><div class=\"line\">    return a+b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Java声明方法和jni实现方法都已经实现了，接下来就是调用实现库(.so文件，关于so的编译不在讲):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">static &#123;</div><div class=\"line\">       System.loadLibrary(&quot;native-lib&quot;);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>上面是最普通也是最简单的jni开发流程三步走，但是其中有很多问题没有弄明白，比如JNIENV是什么，Java中参数int为什么变为jint了等等。</p>\n<p>学习最好的方法就是看代码，那么我们就看看系统jni使用示例：Log打印系统。</p>\n<h2 id=\"看看Log打印系统Java如何调用C\"><a href=\"#看看Log打印系统Java如何调用C\" class=\"headerlink\" title=\"看看Log打印系统Java如何调用C\"></a>看看Log打印系统Java如何调用C</h2><p>首先我们看下Log.java的源码才好下手。</p>\n<h3 id=\"简单介绍Log-java源码\"><a href=\"#简单介绍Log-java源码\" class=\"headerlink\" title=\"简单介绍Log.java源码\"></a>简单介绍Log.java源码</h3><p>看看Log.i()方法实现：</p>\n<pre><code>public static int i(String tag, String msg, Throwable tr) {\n    return println_native(LOG_ID_MAIN, INFO, tag, msg + &apos;\\n&apos; + getStackTraceString(tr));\n}\n\npublic static int w(String tag, String msg) {\n    return println_native(LOG_ID_MAIN, WARN, tag, msg);\n}\n</code></pre><p>可以看出真正的打印是在 println_native 方法中，而这个方法是一个本地方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static native int println_native(int bufID,int priority, String tag, String msg);</div><div class=\"line\">public static native boolean isLoggable(String tag, int level);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原来JNI中Java层的实现这么简单，只需要声明一个native修饰的方法，传入必须的参数就行了。</p>\n</blockquote>\n<p>下面研究中心要转移到jni层实现了，源码那么多如何找到jni实现呢？</p>\n<h3 id=\"JNI层源码探究\"><a href=\"#JNI层源码探究\" class=\"headerlink\" title=\"JNI层源码探究\"></a>JNI层源码探究</h3><ul>\n<li><p>查找JNI层实现</p>\n<p>按照上面说的规范，直接查找Java类Log的全类名。</p>\n<p>例如 Log类全类名为android.util.Log，其对应的Native文件名称应该为android_util_Log。我们试下：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png\" alt=\"屏幕快照 2017-04-24 下午9.57.43\"></p>\n<p>果真找到了，下面开始探究源码：</p>\n</li>\n<li><p>JNI源码开扒</p>\n<p>我们首先找到Java层println_native方法JNI层的实现，按照上面的命名规范，没有找到 Java_android_util_Log_println_native ，但是却找到了这个方法：android_util_Log_println<em>native ，看来Android系统级的JNI没有遵循规范啊。不过没关系，*只要记住JNI有两种方式：一种是遵守JNI命名规范的日常使用方法，另一种是是这种系统级JNI没有Java</em>前缀就行了* 。不影响我们看代码：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png\" alt=\"屏幕快照 2017-04-24 下午10.29.17\"></p>\n<p>可以看出该方法代码比较少，因为我们是研究JNI，而不是研究Log如何打印，所以方法中对于其他方法调用不再深入研究，但是现在Java声明方法和JNI实现方法都找到了，但是系统式如何把这两个给关联起来的呢？我们继续往下看：</p>\n<p>​</p>\n</li>\n<li><p>Java和JNI双方的方法如何对上眼的</p>\n<p>在该文件中有这样一个方法 register_android_util_Log，我们看下实现：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png\" alt=\"屏幕快照 2017-04-24 下午11.04.06\"></p>\n<p>这个方法前面大部分代码给我的第一感觉就是：这么TM和Java的反射好像啊！难道是C++版反射？反正意思就是通过Java的Log类拿到该类的几个变量(C语言中习惯称为域)</p>\n<p>看最后一行调用了AndroidRunTime的方法，顾名思义是注册本地方法，其中参数 gMethods  值得一看：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png\" alt=\"屏幕快照 2017-04-24 下午11.14.36\"></p>\n<p>这是一个静态结构体数组，这个比较有意思，看注释可以看出大括弧的三个元素分别是名称、签名和函数指针。而名称恰恰是Java里面声明的本地方法，签名是本地方法的签名，函数指针指向的是Native实现方法。一个数组就把Java方法和Native方法给关联起来了。因为Java支持方法重载，为了确保调用的唯一性，于是就有了方法签名，下面说说方法签名机制：</p>\n<p>首先看下签名规则：</p>\n<p>| Java类型  | 类型签名    |<br>| ——- | ——- |<br>| boolean | Z       |<br>| byte    | B       |<br>| char    | C       |<br>| long    | J       |<br>| float   | F       |<br>| double  | D       |<br>| short   | S       |<br>| int     | I       |<br>| 其他类     | L全类名;   |<br>| 数组      | [元素类型签名 |</p>\n<blockquote>\n<p>注意：方法签名格式分为两部分：参数类型签名+返回值类型签名，类型签名之间没有空格，其中参数类型签名使用()括起来，有多少参数就有多少参数类型签名，格式为： <em>(参数1类型签名参数n类型签名)返回值类型签名</em> ,注意全类名用”/“分隔。</p>\n</blockquote>\n<p>拿 boolean isLoggable(String tag, int level) 举例来说其方法签名为(Ljava/lang/String;I)Z 。</p>\n<p>说完了方法签名规则，我们继续，在android_util_Log文件中有jni方法，所以有了 register_android_util_Log 来注册该文件的jni方法，那么在其他有jni方法的文件中是不是也有类似的register_xxx方法呢？怀着好奇心，打开Parcel看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">int register_android_os_Parcel(JNIEnv* env)</div><div class=\"line\">&#123;</div><div class=\"line\">    jclass clazz;</div><div class=\"line\"></div><div class=\"line\">    clazz = env-&gt;FindClass(kParcelPathName);</div><div class=\"line\">    LOG_FATAL_IF(clazz == NULL, &quot;Unable to find class android.os.Parcel&quot;);</div><div class=\"line\"></div><div class=\"line\">    gParcelOffsets.clazz = (jclass) env-&gt;NewGlobalRef(clazz);</div><div class=\"line\">    gParcelOffsets.mNativePtr = env-&gt;GetFieldID(clazz, &quot;mNativePtr&quot;, &quot;J&quot;);</div><div class=\"line\">    gParcelOffsets.obtain = env-&gt;GetStaticMethodID(clazz, &quot;obtain&quot;,</div><div class=\"line\">                                                   &quot;()Landroid/os/Parcel;&quot;);</div><div class=\"line\">    gParcelOffsets.recycle = env-&gt;GetMethodID(clazz, &quot;recycle&quot;, &quot;()V&quot;);</div><div class=\"line\"></div><div class=\"line\">    return AndroidRuntime::registerNativeMethods(</div><div class=\"line\">        env, kParcelPathName,</div><div class=\"line\">        gParcelMethods, NELEM(gParcelMethods));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到register_android_os_Parcel 方法证实了我的猜测，所以根据归纳法暂且可以认为系统的涉及jni方法的文件中都会有对应的注册方法而且最终都调用了AndroidRunTime::registerNativeMethods()。</p>\n<p>其实registerNativeMethods方法的第二个参数是类文件路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AndroidRuntime::registerNativeMethods(env, &quot;android/util/Log&quot;, gMethods, NELEM(gMethods));</div></pre></td></tr></table></figure>\n<p>而mMethods数组中又对应了JNI实现方法和Java方法，通过registerNativeMethods方法调用jniRegisterNativeMethods()然后调用RegisterNatives方法最终告诉了JVM Java类和JNI实现方法的映射关系，这样就完了Java调用C。</p>\n<p>​</p>\n</li>\n<li><p>Java类型和JNI类型如何对应的</p>\n<p>首先看下基本类型的对应关系：</p>\n<p>| Java类型  | JNI类型    | 字长   |<br>| ——- | ——– | —- |<br>| boolean | jboolean | 8位   |<br>| byte    | jbyte    | 8位   |<br>| char    | jchar    | 16位  |<br>| short   | jshort   | 16位  |<br>| int     | jint     | 32位  |<br>| long    | jlong    | 64位  |<br>| float   | jfloat   | 32位  |<br>| double  | jdouble  | 64位  |<br>| void    | void     |      |</p>\n<p>很好奇jboolean这些类型是怎么来的，既然是jni类型就先去jni.h头文件下看看有没有定义：</p>\n<p><img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png\" alt=\"屏幕快照 2017-04-25 下午12.56.36\"></p>\n<p>竟然找到了，本来以为jxx是jni新开发的类型，原来就是对C类型起了一个别名。简单理解就是把Java基本类型的值给到了占用同样字节大小的C类型上。</p>\n<p>下面再看看引用类型对应关系：</p>\n<p>| Java类型                                   | JNI类型                                    |<br>| —————————————- | —————————————- |<br>| java.lang.Class                          | class                                    |<br>| java.lang.String                         | string                                   |<br>| java.lang.Throwable                      | throwable                                |<br>| Object[]、boolean[]、byte[]、char[]、short[]、int[]、long[]、float[]、double[] | jobjectArray、jbooleanArray、jbyteArray、jcharArray、jshortArray、jintArray、jlongArray、jfloatArray、jdoubleArray |<br>| java.lang.Object                         | jobject                                  |</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"C调用Java\"><a href=\"#C调用Java\" class=\"headerlink\" title=\"C调用Java\"></a>C调用Java</h1><p>上面介绍了Java如何调用C，本节讲下C如何调用Java：</p>\n<p>C调用Java按流程走也很简单，通过全类名找到类，找到类构造方法，根据构造方法构建对象，根据对象调用变量和方法。OK，我们通过一个示例来讲解下：</p>\n<p>示例流程是这样子，我们通过Java方法stringFromJNI调用JNI实现方法，但是在实现方法中并没有直接返回一个字符串，而是该方法中调用了一个Java方法，其实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String callByNative( )&#123;</div><div class=\"line\">    return &quot;callByNative&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回的字符串直接显示在TextView中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sample_text = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">TestNative testNative = new TestNative();</div><div class=\"line\">sample_text.setText(testNative.stringFromJNI());</div></pre></td></tr></table></figure>\n<p>接下来我们需要自己在stringFromJNI的实现方法中调用Java层的callByNative：</p>\n<p>首先通过全类名找到类，通过FindClass方法,参数为全类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass clazz = env-&gt;FindClass(&quot;com/example/jenson/myapplication/TestNative&quot;);</div></pre></td></tr></table></figure>\n<p>然后通过构造方法构建对象，要调用构造方法先找到构造方法的ID：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jmethodID mid = env-&gt;GetMethodID(clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</div><div class=\"line\">jobject  obj= env-&gt;NewObject(clazz,mid);</div></pre></td></tr></table></figure>\n<p>要注意的是：构造方法比较特殊，所以第二个参数的方法名要传”<init>“，第三个参数为方法签名，至于签名规则上面有介绍，根据参数自己填写签名。</init></p>\n<p>创建对象时使用NewObject，需要传入创建对象使用的类及构造方法对应的id。</p>\n<p>对象上面已经创建完成，接下来可以调用实例方法callByNative了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mid = env-&gt;GetMethodID(clazz,&quot;callByNative&quot;,&quot;()Ljava/lang/String;&quot;);</div><div class=\"line\">jstring js = (jstring) env-&gt;CallObjectMethod(obj, mid);</div></pre></td></tr></table></figure>\n<p>注意调用一个方法前要先获取方法ID，然后通过Call<Type>Method方法传入对象和方法ID，达到实例方法调用。</Type></p>\n<p>因为callByNative方法返回的是String，所以按照上面说的应该调用CallStringMethod方法，但是jni没有这个方法，所以直接使用了CallObjectMethod，然后强制转换来得到String，比较Object是一切类基类。</p>\n<p>最终stringFromJNI实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Java_com_example_jenson_myapplication_TestNative_stringFromJNI(JNIEnv *env, jobject instance) &#123;</div><div class=\"line\"></div><div class=\"line\">    // 这里通过C调用callByNative方法</div><div class=\"line\">    jclass clazz = env-&gt;FindClass(&quot;com/example/jenson/myapplication/TestNative&quot;);</div><div class=\"line\">    jmethodID mid = env-&gt;GetMethodID(clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);</div><div class=\"line\">    jobject  obj= env-&gt;NewObject(clazz,mid);</div><div class=\"line\">    mid = env-&gt;GetMethodID(clazz,&quot;callByNative&quot;,&quot;()Ljava/lang/String;&quot;);</div><div class=\"line\">    jstring js = (jstring) env-&gt;CallObjectMethod(obj, mid);</div><div class=\"line\">    if (js ==NULL) &#123;</div><div class=\"line\">        js = (jstring) &quot;hello&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return js;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看下执行结果，达到了我们的要求：<img src=\"/2017/04/25/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png\" alt=\"屏幕快照 2017-04-25 下午2.54.18\"></p>\n<p>jnienv提供了很多参数实现C调用Java，诸如：GetMethodID、FindClass、GetFieldID，还有静态方法和域：GetStaticMethodID、GetStaticFieldID等，感兴趣的可以去jni.h去研究下。</p>\n<h1 id=\"JNIENV是什么鬼\"><a href=\"#JNIENV是什么鬼\" class=\"headerlink\" title=\"JNIENV是什么鬼\"></a>JNIENV是什么鬼</h1><h1 id=\"JNI异常处理\"><a href=\"#JNI异常处理\" class=\"headerlink\" title=\"JNI异常处理\"></a>JNI异常处理</h1>"},{"title":"Android性能优化之内存优化","date":"2017-04-21T12:55:54.000Z","_content":">上一章讲了[Android性能优化之耗电优化\n](http://www.jianshu.com/p/bd3d673aa979)，感兴趣的可以看下。这一章来说说Android内存方面如何优化，虽说是讲内存优化但是并不涉及虚拟机底层原理，力求通俗易懂。\n\n\n![屏幕快照 2017-03-29 下午2.58.41.png](http://upload-images.jianshu.io/upload_images/1796052-0956f76fd0a3e36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n养成好习惯先上图。内存从状态上来说只有已使用和未使用两种。本章内存优化也从这两方面下手：已使用的内存如何保证虚拟机的顺利回收、未使用的内存如何在满足需求的情况下尽量小的申请。\n\n#### 如何保证已使用内存顺利被回收？\n- Java对象生命周期\n  - 创建阶段\n申请内存空间，构造对象并初始化相关属性值\n  - 使用阶段\n根据对象应用调用相关方法完成业务逻辑。对象至少被一个强引用持有，除非对象创建时显示声明使用软引用、弱引用和虚引用。\n  - 不可见阶段\n当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，当然对象还是存在着的。\n  - 不可达阶段\n对象处于不可达阶段是指该对象不再被任何强引用所持有。GC会发现对象已不可达\n\n  - 收集阶段\n当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。\n  - 终结阶段\n当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段，等待垃圾回收器对该对象空间进行回收。\n\n  - 对象空间重新分配阶段\n若垃圾回收器对该对象的所占用的内存空间进行回收或者再分配，则该对象彻底消失，这个阶段称之为“对象空间重新分配阶段”。\n\n\t以上是Java对象生命周期的简要介绍，要保证内存顺利回收，正确使用Java对象生命周期很重要，如果不能及时回收，我们就称之为“发生了内存泄露”。\n\n>在不可见阶段，程序本身不再持有对象强引用，但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。\n\n\n![垃圾回收.jpeg](http://upload-images.jianshu.io/upload_images/1796052-ef7e7496b8a9cd2e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n图中灰色的孤立无援的对象对于GC Roots来说不可达，会被回收。知道了内存泄露会影响回收，下面说下哪些方面会导致内存泄露\n\n- 引起内存泄露的情况\n   - 资源没有适时关闭\nsqlite的cursor、读写文件使用的File文件流等在使用完后没有及时关闭。虽然cursor会在系统回收时自动关闭，但是这样效率较低。对于资源对象使用还是应该养成良好习惯，使用完毕close并置空。\n   - 注册对象未注销\n在Android中主要是指注册的广播在Activity销毁时反注销。\n在Activity中如果有使用的观察者模式在生命周期发生变化时根据需求注销。\n在Activity中使用的各类传感器(光线、重力等)在页面销毁时及时注销，否则不光导致内存泄露还会因为传感器频繁的采样导致耗电及cpu的占用。\n   - 使用static修饰变量\n这里只说一点，被static修饰的变量可以认为是直接被GC Roots引用了，那你就知道其生命周期有多长了。这时候你如果用static 修饰Bitmap、View、Context和Activity等后果有多严重了吧。\n\n   - 非静态内部类的静态实例\n\n\t\t先看几行代码：\n\n\t\t```\n\t\tpublic class MainActivity extends AppCompatActivity {\n\t\tpublic static People people;\n   \t\t @Override\n    \t\tprotected void onCreate(Bundle savedInstanceState) {\n       \t\t super.onCreate(savedInstanceState);\n       \t\t setContentView(R.layout.activity_main);\n       \t\t people = new People();\n    \t\t}\n   \t\t class  People{\n       \t\t int age ;\n       \t\t String name ;\n    \t\t}\n\t\t}\n\t\t```\n\n\t\t非静态内部类People持有外部类即当前Activity的引用，而该非静态内部类实例又是static修饰\t\t的，导致Activity一直被持有而不得释放，最终导致Activity所包含的view不能释放，如果view \t\ttree中包含多图片，那泄露的内存是很大的。\n\n   - Handler\n\n\t\t众所周知handler用来发送和处理消息回调的。\nhandler导致泄露主要是handler实例是作为非静态匿名内部类方式创建，并且MessageQueue队列中有未处理消息，这时如果退出Activity，MessageQueue中还有Message，而Message持有handler实例，handler实例作为非静态内部类持有Activity引用，最终的连锁反应导致Activity泄露。\n\n\t\t>handler引起的内存泄露一般是临时性的，因为消息队列里的Message在延时到时间或者某一情况激活后还是会执行的，除非你是故意搞事情。创建handler时最好使用静态内部类，同时在Activity退出时执行 handler.removeCallbacksAndMessages(null);清空队列消息\n\n   - Webview\n\n\t\twebview的使用总是会莫名的出现各种问题或泄露。最好的办法就是把web页面放在一个独立的进程，如果需要交互使用aidl。\n\n  - 容器中的对象未清理对象\n\n\t\tAndroid中使用的容器最多的就是List和Map。用来存储对象集合，如果对象集合和页面相关，那么在退出页面时注意清空集合。同时不要使用static修饰集合。\n\n#### 如何尽量小的申请内存？\n上面说完了如何保证GC顺利回收，现在来讲讲要最小使用内存应该怎么做：\n\n- 慎用自动封装\n\n\t来几行代码尝尝：\n\n\t```\n        Integer num=0;\n        for (int i=0;i<100;i++) {\n            num+=i;\n        }\n\t```\n\n\tJava基本数据类型是有自动装箱机制的。每次执行循环都会发生一次装箱操作创建一个Integer对象，造成内存消耗。包括其他基本数据类型都有可能造成这种情况。\n\n- 内存复用\n  - 视图复用\n\n\t\t在ListView中使用ViewHolder复用item组件，一方面节省内存，一方面提高滑动流畅性。都用过不多介绍。\n  - 使用对象池\n\n\t\t看过Handler、Looper、Message、MessageQueue这一套消息循环源码的同志应该知道里面的Message使用了对象池模式。\n>对象池类似线程池， 首先初始化一个固定大小池子，每次创建对象时候先去池子中找有没有，如果有直接取出，如果没有new出来使用后还到池子里。这样便可达到对象复用的目的。\n对象池模式适用于那些频繁使用创建的对象，比如一个聊天app，里面对象最多的恐怕就是聊天信息(每条聊天信息对应一个信息对象)。都知道对象的创建是很耗费时间和内存的，没事不要new着玩。如果每条消息都创建一个对象，那可想而知该APP的性能。\n\n\t\t对象池的使用也很简单，少量代码即可完成：\n\n\t\t```\n\t\t\tpublic class People {\n        \t\t\tprivate static final Pools.SynchronizedPool<People> sPool = new Pools.SynchronizedPool<People>(\n           \t\t   \t  20);//需要维持对象的数量\n        \t\t\tint age;\n       \t\t\tString name;\n      \n        \t\t\tpublic static People obtain() {\n          \t\t\t  People instance = sPool.acquire();\n          \t\t\t  return (instance != null) ? instance : new People();\n        \t\t\t}\n        \t\t\tpublic void recycle() {\n          \t\t\t  sPool.release(this);\n       \t\t \t}\n    \t\t\t}\n\n\t\t```\n\n\t\t>注意：对象申请(obtain)和释放(recycle)成对出现，使用一个对象后一定要释放还给对象池。\n\n\n\n\t- Bitmap复用\n\n\t\t如果设置了options.inBitmap属性，以后再使用带有该options参数的decode方法加载图片资源时\t\t，decode会尝试重用已存在的位图内存，这样节省了加载和分配的时间，同时也节省了内存空间\n\n\t\t>该属性从3.0开始引进，低版本不支持inBitmap，4.4系统之前只能重用大小相同的内存区域，4.4以后可以重用任何比所需内存小的区域。具体使用可参考[官网](https://developer.android.com/topic/performance/graphics/manage-memory.html)。\n\n  - 纯色规则形状背景用Color Res代替图片\n\n\t\t经常遇到一些按钮背景是纯色显示，比如选中状态背景变为纯灰，但是设计已经发来了切图用还是不用？大声say NO！如果背景使用图片来显示，那背景每个像素都要绘制。\n\n    \t假设一个分辨率为100x100的图片，占用4通道。那该图片内存占用就是100x100x4 =4万Byte≈40KB；但是如果使用```        android:background=\"@color/colorAccent\"```引用color值的方式，由于是纯色，只需渲染一个像素而其他像素复用这个像素值即可。这样只需要4Byte即完成了背景设置。\n\n\n\n- 选择合适数据类型\n\n   - 使用ArrayMap替换HashMap\n\n\t\t先看一下HashMap模型和ArrayMap模型：\n![hashmap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-3e3049cb811341c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![arraymap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-0d979501c5d1358f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n>HashMap是一个散列链表，稀疏阵列导致内存稍大，而ArrayMap提供了和HashMap一样的功能，但是避免了内存过度开销。在执行插入或删除操作时，从性能上看ArrayMap比HashMap稍差，但是如果对象数很小，比如1000以内不用担心性能问题。如果想深入了解这2个的原理请自行搜索，这里不过多阐述。\n\n\n  - 枚举替身来了\n      JDK1.5就支持了枚举类型，使用Enum关键字定义。使用枚举类型很多时候出于参数类型安全迫不得已作出的选择。\n\n   ```\n  public String  getValue(int type){\n            switch (type) {\n                case 1:\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"不合法参数\");\n            }\n    return \"\";\n    }\n```\n\n      试想一下如果一个函数的参数为int type，函数处理时只用到了1，2，3三种值，如果是其他值就抛出异常，这无疑增加了程序的不稳定性，按以前此时最好的解决办法就是参数改为枚举类型，增加了限定也就提高了稳定性。但是枚举类型就是一把双刃剑，增加安全同时也大大增加了内存占用,尤其是在移动设备上，资源有限更应该注意内存节省。\n\n     谷歌或许考虑到了这些问题，在提供的注解包里添加了注解方式检查类型安全，目前支持int和String两种，看下使用方式：\n\n    ```\n    //1、先声明需要的类型常量值\n    public static final int TYPE_1 = 1;\n    public static final int TYPE_2 = 2;\n    //2、创建注解接口同时把上一步声明的常量囊括到这里\n    @IntDef({TYPE_1,TYPE_2})\n    @Retention(RetentionPolicy.SOURCE)\n    public @interface _TYPE{\n        \n    }\n    //3、在函数参数中增加 注解接口名称\n    public String getValue(@_TYPE int type){\n        switch (type) {\n            case 1:\n                break;\n            case 2:\n                break;\n        }\n        return \"\";\n    }\n```\n\n       经过上面的步骤，再调用getValue()函数时如果传入其他int则报错编译不通过，这样通过注解就增加了安全性：\n\n\t![屏幕快照 2017-03-29 下午7.13.32.png](http://upload-images.jianshu.io/upload_images/1796052-62fa91a5486d42cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n结语：基本上APP大部分内存还是被图片占用，处理好图片尤为重要，但是关于图片三级缓存及缩放，目前都使用第三方框架如ImageLoader，所以这里一笔带过。以上就是日常内存优化需要注意的地方，自己做个总结，也希望能对各位看官有所帮助。","source":"_posts/Android性能优化之内存优化.md","raw":"---\ntitle: Android性能优化之内存优化\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n>上一章讲了[Android性能优化之耗电优化\n](http://www.jianshu.com/p/bd3d673aa979)，感兴趣的可以看下。这一章来说说Android内存方面如何优化，虽说是讲内存优化但是并不涉及虚拟机底层原理，力求通俗易懂。\n\n\n![屏幕快照 2017-03-29 下午2.58.41.png](http://upload-images.jianshu.io/upload_images/1796052-0956f76fd0a3e36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n养成好习惯先上图。内存从状态上来说只有已使用和未使用两种。本章内存优化也从这两方面下手：已使用的内存如何保证虚拟机的顺利回收、未使用的内存如何在满足需求的情况下尽量小的申请。\n\n#### 如何保证已使用内存顺利被回收？\n- Java对象生命周期\n  - 创建阶段\n申请内存空间，构造对象并初始化相关属性值\n  - 使用阶段\n根据对象应用调用相关方法完成业务逻辑。对象至少被一个强引用持有，除非对象创建时显示声明使用软引用、弱引用和虚引用。\n  - 不可见阶段\n当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，当然对象还是存在着的。\n  - 不可达阶段\n对象处于不可达阶段是指该对象不再被任何强引用所持有。GC会发现对象已不可达\n\n  - 收集阶段\n当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。\n  - 终结阶段\n当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段，等待垃圾回收器对该对象空间进行回收。\n\n  - 对象空间重新分配阶段\n若垃圾回收器对该对象的所占用的内存空间进行回收或者再分配，则该对象彻底消失，这个阶段称之为“对象空间重新分配阶段”。\n\n\t以上是Java对象生命周期的简要介绍，要保证内存顺利回收，正确使用Java对象生命周期很重要，如果不能及时回收，我们就称之为“发生了内存泄露”。\n\n>在不可见阶段，程序本身不再持有对象强引用，但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。\n\n\n![垃圾回收.jpeg](http://upload-images.jianshu.io/upload_images/1796052-ef7e7496b8a9cd2e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n图中灰色的孤立无援的对象对于GC Roots来说不可达，会被回收。知道了内存泄露会影响回收，下面说下哪些方面会导致内存泄露\n\n- 引起内存泄露的情况\n   - 资源没有适时关闭\nsqlite的cursor、读写文件使用的File文件流等在使用完后没有及时关闭。虽然cursor会在系统回收时自动关闭，但是这样效率较低。对于资源对象使用还是应该养成良好习惯，使用完毕close并置空。\n   - 注册对象未注销\n在Android中主要是指注册的广播在Activity销毁时反注销。\n在Activity中如果有使用的观察者模式在生命周期发生变化时根据需求注销。\n在Activity中使用的各类传感器(光线、重力等)在页面销毁时及时注销，否则不光导致内存泄露还会因为传感器频繁的采样导致耗电及cpu的占用。\n   - 使用static修饰变量\n这里只说一点，被static修饰的变量可以认为是直接被GC Roots引用了，那你就知道其生命周期有多长了。这时候你如果用static 修饰Bitmap、View、Context和Activity等后果有多严重了吧。\n\n   - 非静态内部类的静态实例\n\n\t\t先看几行代码：\n\n\t\t```\n\t\tpublic class MainActivity extends AppCompatActivity {\n\t\tpublic static People people;\n   \t\t @Override\n    \t\tprotected void onCreate(Bundle savedInstanceState) {\n       \t\t super.onCreate(savedInstanceState);\n       \t\t setContentView(R.layout.activity_main);\n       \t\t people = new People();\n    \t\t}\n   \t\t class  People{\n       \t\t int age ;\n       \t\t String name ;\n    \t\t}\n\t\t}\n\t\t```\n\n\t\t非静态内部类People持有外部类即当前Activity的引用，而该非静态内部类实例又是static修饰\t\t的，导致Activity一直被持有而不得释放，最终导致Activity所包含的view不能释放，如果view \t\ttree中包含多图片，那泄露的内存是很大的。\n\n   - Handler\n\n\t\t众所周知handler用来发送和处理消息回调的。\nhandler导致泄露主要是handler实例是作为非静态匿名内部类方式创建，并且MessageQueue队列中有未处理消息，这时如果退出Activity，MessageQueue中还有Message，而Message持有handler实例，handler实例作为非静态内部类持有Activity引用，最终的连锁反应导致Activity泄露。\n\n\t\t>handler引起的内存泄露一般是临时性的，因为消息队列里的Message在延时到时间或者某一情况激活后还是会执行的，除非你是故意搞事情。创建handler时最好使用静态内部类，同时在Activity退出时执行 handler.removeCallbacksAndMessages(null);清空队列消息\n\n   - Webview\n\n\t\twebview的使用总是会莫名的出现各种问题或泄露。最好的办法就是把web页面放在一个独立的进程，如果需要交互使用aidl。\n\n  - 容器中的对象未清理对象\n\n\t\tAndroid中使用的容器最多的就是List和Map。用来存储对象集合，如果对象集合和页面相关，那么在退出页面时注意清空集合。同时不要使用static修饰集合。\n\n#### 如何尽量小的申请内存？\n上面说完了如何保证GC顺利回收，现在来讲讲要最小使用内存应该怎么做：\n\n- 慎用自动封装\n\n\t来几行代码尝尝：\n\n\t```\n        Integer num=0;\n        for (int i=0;i<100;i++) {\n            num+=i;\n        }\n\t```\n\n\tJava基本数据类型是有自动装箱机制的。每次执行循环都会发生一次装箱操作创建一个Integer对象，造成内存消耗。包括其他基本数据类型都有可能造成这种情况。\n\n- 内存复用\n  - 视图复用\n\n\t\t在ListView中使用ViewHolder复用item组件，一方面节省内存，一方面提高滑动流畅性。都用过不多介绍。\n  - 使用对象池\n\n\t\t看过Handler、Looper、Message、MessageQueue这一套消息循环源码的同志应该知道里面的Message使用了对象池模式。\n>对象池类似线程池， 首先初始化一个固定大小池子，每次创建对象时候先去池子中找有没有，如果有直接取出，如果没有new出来使用后还到池子里。这样便可达到对象复用的目的。\n对象池模式适用于那些频繁使用创建的对象，比如一个聊天app，里面对象最多的恐怕就是聊天信息(每条聊天信息对应一个信息对象)。都知道对象的创建是很耗费时间和内存的，没事不要new着玩。如果每条消息都创建一个对象，那可想而知该APP的性能。\n\n\t\t对象池的使用也很简单，少量代码即可完成：\n\n\t\t```\n\t\t\tpublic class People {\n        \t\t\tprivate static final Pools.SynchronizedPool<People> sPool = new Pools.SynchronizedPool<People>(\n           \t\t   \t  20);//需要维持对象的数量\n        \t\t\tint age;\n       \t\t\tString name;\n      \n        \t\t\tpublic static People obtain() {\n          \t\t\t  People instance = sPool.acquire();\n          \t\t\t  return (instance != null) ? instance : new People();\n        \t\t\t}\n        \t\t\tpublic void recycle() {\n          \t\t\t  sPool.release(this);\n       \t\t \t}\n    \t\t\t}\n\n\t\t```\n\n\t\t>注意：对象申请(obtain)和释放(recycle)成对出现，使用一个对象后一定要释放还给对象池。\n\n\n\n\t- Bitmap复用\n\n\t\t如果设置了options.inBitmap属性，以后再使用带有该options参数的decode方法加载图片资源时\t\t，decode会尝试重用已存在的位图内存，这样节省了加载和分配的时间，同时也节省了内存空间\n\n\t\t>该属性从3.0开始引进，低版本不支持inBitmap，4.4系统之前只能重用大小相同的内存区域，4.4以后可以重用任何比所需内存小的区域。具体使用可参考[官网](https://developer.android.com/topic/performance/graphics/manage-memory.html)。\n\n  - 纯色规则形状背景用Color Res代替图片\n\n\t\t经常遇到一些按钮背景是纯色显示，比如选中状态背景变为纯灰，但是设计已经发来了切图用还是不用？大声say NO！如果背景使用图片来显示，那背景每个像素都要绘制。\n\n    \t假设一个分辨率为100x100的图片，占用4通道。那该图片内存占用就是100x100x4 =4万Byte≈40KB；但是如果使用```        android:background=\"@color/colorAccent\"```引用color值的方式，由于是纯色，只需渲染一个像素而其他像素复用这个像素值即可。这样只需要4Byte即完成了背景设置。\n\n\n\n- 选择合适数据类型\n\n   - 使用ArrayMap替换HashMap\n\n\t\t先看一下HashMap模型和ArrayMap模型：\n![hashmap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-3e3049cb811341c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![arraymap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-0d979501c5d1358f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n>HashMap是一个散列链表，稀疏阵列导致内存稍大，而ArrayMap提供了和HashMap一样的功能，但是避免了内存过度开销。在执行插入或删除操作时，从性能上看ArrayMap比HashMap稍差，但是如果对象数很小，比如1000以内不用担心性能问题。如果想深入了解这2个的原理请自行搜索，这里不过多阐述。\n\n\n  - 枚举替身来了\n      JDK1.5就支持了枚举类型，使用Enum关键字定义。使用枚举类型很多时候出于参数类型安全迫不得已作出的选择。\n\n   ```\n  public String  getValue(int type){\n            switch (type) {\n                case 1:\n                    break;\n                case 2:\n                    break;\n                case 3:\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"不合法参数\");\n            }\n    return \"\";\n    }\n```\n\n      试想一下如果一个函数的参数为int type，函数处理时只用到了1，2，3三种值，如果是其他值就抛出异常，这无疑增加了程序的不稳定性，按以前此时最好的解决办法就是参数改为枚举类型，增加了限定也就提高了稳定性。但是枚举类型就是一把双刃剑，增加安全同时也大大增加了内存占用,尤其是在移动设备上，资源有限更应该注意内存节省。\n\n     谷歌或许考虑到了这些问题，在提供的注解包里添加了注解方式检查类型安全，目前支持int和String两种，看下使用方式：\n\n    ```\n    //1、先声明需要的类型常量值\n    public static final int TYPE_1 = 1;\n    public static final int TYPE_2 = 2;\n    //2、创建注解接口同时把上一步声明的常量囊括到这里\n    @IntDef({TYPE_1,TYPE_2})\n    @Retention(RetentionPolicy.SOURCE)\n    public @interface _TYPE{\n        \n    }\n    //3、在函数参数中增加 注解接口名称\n    public String getValue(@_TYPE int type){\n        switch (type) {\n            case 1:\n                break;\n            case 2:\n                break;\n        }\n        return \"\";\n    }\n```\n\n       经过上面的步骤，再调用getValue()函数时如果传入其他int则报错编译不通过，这样通过注解就增加了安全性：\n\n\t![屏幕快照 2017-03-29 下午7.13.32.png](http://upload-images.jianshu.io/upload_images/1796052-62fa91a5486d42cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n结语：基本上APP大部分内存还是被图片占用，处理好图片尤为重要，但是关于图片三级缓存及缩放，目前都使用第三方框架如ImageLoader，所以这里一笔带过。以上就是日常内存优化需要注意的地方，自己做个总结，也希望能对各位看官有所帮助。","slug":"Android性能优化之内存优化","published":1,"updated":"2017-04-22T12:23:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7kv000j449cy3k36vmi","content":"<blockquote>\n<p>上一章讲了<a href=\"http://www.jianshu.com/p/bd3d673aa979\" target=\"_blank\" rel=\"external\">Android性能优化之耗电优化\n</a>，感兴趣的可以看下。这一章来说说Android内存方面如何优化，虽说是讲内存优化但是并不涉及虚拟机底层原理，力求通俗易懂。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-0956f76fd0a3e36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-29 下午2.58.41.png\"></p>\n<p>养成好习惯先上图。内存从状态上来说只有已使用和未使用两种。本章内存优化也从这两方面下手：已使用的内存如何保证虚拟机的顺利回收、未使用的内存如何在满足需求的情况下尽量小的申请。</p>\n<h4 id=\"如何保证已使用内存顺利被回收？\"><a href=\"#如何保证已使用内存顺利被回收？\" class=\"headerlink\" title=\"如何保证已使用内存顺利被回收？\"></a>如何保证已使用内存顺利被回收？</h4><ul>\n<li><p>Java对象生命周期</p>\n<ul>\n<li>创建阶段<br>申请内存空间，构造对象并初始化相关属性值</li>\n<li>使用阶段<br>根据对象应用调用相关方法完成业务逻辑。对象至少被一个强引用持有，除非对象创建时显示声明使用软引用、弱引用和虚引用。</li>\n<li>不可见阶段<br>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，当然对象还是存在着的。</li>\n<li><p>不可达阶段<br>对象处于不可达阶段是指该对象不再被任何强引用所持有。GC会发现对象已不可达</p>\n</li>\n<li><p>收集阶段<br>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。</p>\n</li>\n<li><p>终结阶段<br>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段，等待垃圾回收器对该对象空间进行回收。</p>\n</li>\n<li><p>对象空间重新分配阶段<br>若垃圾回收器对该对象的所占用的内存空间进行回收或者再分配，则该对象彻底消失，这个阶段称之为“对象空间重新分配阶段”。</p>\n<p>以上是Java对象生命周期的简要介绍，要保证内存顺利回收，正确使用Java对象生命周期很重要，如果不能及时回收，我们就称之为“发生了内存泄露”。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在不可见阶段，程序本身不再持有对象强引用，但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ef7e7496b8a9cd2e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"垃圾回收.jpeg\"></p>\n<p>图中灰色的孤立无援的对象对于GC Roots来说不可达，会被回收。知道了内存泄露会影响回收，下面说下哪些方面会导致内存泄露</p>\n<ul>\n<li><p>引起内存泄露的情况</p>\n<ul>\n<li>资源没有适时关闭<br>sqlite的cursor、读写文件使用的File文件流等在使用完后没有及时关闭。虽然cursor会在系统回收时自动关闭，但是这样效率较低。对于资源对象使用还是应该养成良好习惯，使用完毕close并置空。</li>\n<li>注册对象未注销<br>在Android中主要是指注册的广播在Activity销毁时反注销。<br>在Activity中如果有使用的观察者模式在生命周期发生变化时根据需求注销。<br>在Activity中使用的各类传感器(光线、重力等)在页面销毁时及时注销，否则不光导致内存泄露还会因为传感器频繁的采样导致耗电及cpu的占用。</li>\n<li><p>使用static修饰变量<br>这里只说一点，被static修饰的变量可以认为是直接被GC Roots引用了，那你就知道其生命周期有多长了。这时候你如果用static 修饰Bitmap、View、Context和Activity等后果有多严重了吧。</p>\n</li>\n<li><p>非静态内部类的静态实例</p>\n<p>   先看几行代码：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\">public static People people;</div><div class=\"line\"> \t\t @Override</div><div class=\"line\">  \t\tprotected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">     \t\t super.onCreate(savedInstanceState);</div><div class=\"line\">     \t\t setContentView(R.layout.activity_main);</div><div class=\"line\">     \t\t people = new People();</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\"> \t\t class  People&#123;</div><div class=\"line\">     \t\t int age ;</div><div class=\"line\">     \t\t String name ;</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   非静态内部类People持有外部类即当前Activity的引用，而该非静态内部类实例又是static修饰        的，导致Activity一直被持有而不得释放，最终导致Activity所包含的view不能释放，如果view         tree中包含多图片，那泄露的内存是很大的。</p>\n</li>\n<li><p>Handler</p>\n<p>   众所周知handler用来发送和处理消息回调的。<br>handler导致泄露主要是handler实例是作为非静态匿名内部类方式创建，并且MessageQueue队列中有未处理消息，这时如果退出Activity，MessageQueue中还有Message，而Message持有handler实例，handler实例作为非静态内部类持有Activity引用，最终的连锁反应导致Activity泄露。</p>\n<blockquote>\n<p>handler引起的内存泄露一般是临时性的，因为消息队列里的Message在延时到时间或者某一情况激活后还是会执行的，除非你是故意搞事情。创建handler时最好使用静态内部类，同时在Activity退出时执行 handler.removeCallbacksAndMessages(null);清空队列消息</p>\n</blockquote>\n</li>\n<li><p>Webview</p>\n<p>   webview的使用总是会莫名的出现各种问题或泄露。最好的办法就是把web页面放在一个独立的进程，如果需要交互使用aidl。</p>\n</li>\n</ul>\n<ul>\n<li><p>容器中的对象未清理对象</p>\n<pre><code>Android中使用的容器最多的就是List和Map。用来存储对象集合，如果对象集合和页面相关，那么在退出页面时注意清空集合。同时不要使用static修饰集合。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"如何尽量小的申请内存？\"><a href=\"#如何尽量小的申请内存？\" class=\"headerlink\" title=\"如何尽量小的申请内存？\"></a>如何尽量小的申请内存？</h4><p>上面说完了如何保证GC顺利回收，现在来讲讲要最小使用内存应该怎么做：</p>\n<ul>\n<li><p>慎用自动封装</p>\n<p>  来几行代码尝尝：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer num=0;</div><div class=\"line\">for (int i=0;i&lt;100;i++) &#123;</div><div class=\"line\">    num+=i;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Java基本数据类型是有自动装箱机制的。每次执行循环都会发生一次装箱操作创建一个Integer对象，造成内存消耗。包括其他基本数据类型都有可能造成这种情况。</p>\n</li>\n<li><p>内存复用</p>\n<ul>\n<li><p>视图复用</p>\n<pre><code>在ListView中使用ViewHolder复用item组件，一方面节省内存，一方面提高滑动流畅性。都用过不多介绍。\n</code></pre></li>\n<li><p>使用对象池</p>\n<pre><code>看过Handler、Looper、Message、MessageQueue这一套消息循环源码的同志应该知道里面的Message使用了对象池模式。\n</code></pre><blockquote>\n<p>对象池类似线程池， 首先初始化一个固定大小池子，每次创建对象时候先去池子中找有没有，如果有直接取出，如果没有new出来使用后还到池子里。这样便可达到对象复用的目的。<br>对象池模式适用于那些频繁使用创建的对象，比如一个聊天app，里面对象最多的恐怕就是聊天信息(每条聊天信息对应一个信息对象)。都知道对象的创建是很耗费时间和内存的，没事不要new着玩。如果每条消息都创建一个对象，那可想而知该APP的性能。</p>\n</blockquote>\n<pre><code>对象池的使用也很简单，少量代码即可完成：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class People &#123;</div><div class=\"line\">     \t\t\tprivate static final Pools.SynchronizedPool&lt;People&gt; sPool = new Pools.SynchronizedPool&lt;People&gt;(</div><div class=\"line\">        \t\t   \t  20);//需要维持对象的数量</div><div class=\"line\">     \t\t\tint age;</div><div class=\"line\">    \t\t\tString name;</div><div class=\"line\">   </div><div class=\"line\">     \t\t\tpublic static People obtain() &#123;</div><div class=\"line\">       \t\t\t  People instance = sPool.acquire();</div><div class=\"line\">       \t\t\t  return (instance != null) ? instance : new People();</div><div class=\"line\">     \t\t\t&#125;</div><div class=\"line\">     \t\t\tpublic void recycle() &#123;</div><div class=\"line\">       \t\t\t  sPool.release(this);</div><div class=\"line\">    \t\t \t&#125;</div><div class=\"line\"> \t\t\t&#125;</div></pre></td></tr></table></figure>\n\n&gt;注意：对象申请(obtain)和释放(recycle)成对出现，使用一个对象后一定要释放还给对象池。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<pre><code>- Bitmap复用\n\n    如果设置了options.inBitmap属性，以后再使用带有该options参数的decode方法加载图片资源时        ，decode会尝试重用已存在的位图内存，这样节省了加载和分配的时间，同时也节省了内存空间\n\n    &gt;该属性从3.0开始引进，低版本不支持inBitmap，4.4系统之前只能重用大小相同的内存区域，4.4以后可以重用任何比所需内存小的区域。具体使用可参考[官网](https://developer.android.com/topic/performance/graphics/manage-memory.html)。\n</code></pre><ul>\n<li><p>纯色规则形状背景用Color Res代替图片</p>\n<pre><code>经常遇到一些按钮背景是纯色显示，比如选中状态背景变为纯灰，但是设计已经发来了切图用还是不用？大声say NO！如果背景使用图片来显示，那背景每个像素都要绘制。\n\n假设一个分辨率为100x100的图片，占用4通道。那该图片内存占用就是100x100x4 =4万Byte≈40KB；但是如果使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- 选择合适数据类型</div><div class=\"line\"></div><div class=\"line\">   - 使用ArrayMap替换HashMap</div><div class=\"line\"></div><div class=\"line\">\t\t先看一下HashMap模型和ArrayMap模型：</div><div class=\"line\">![hashmap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-3e3049cb811341c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\">![arraymap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-0d979501c5d1358f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&gt;HashMap是一个散列链表，稀疏阵列导致内存稍大，而ArrayMap提供了和HashMap一样的功能，但是避免了内存过度开销。在执行插入或删除操作时，从性能上看ArrayMap比HashMap稍差，但是如果对象数很小，比如1000以内不用担心性能问题。如果想深入了解这2个的原理请自行搜索，这里不过多阐述。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  - 枚举替身来了</div><div class=\"line\">      JDK1.5就支持了枚举类型，使用Enum关键字定义。使用枚举类型很多时候出于参数类型安全迫不得已作出的选择。</div></pre></td></tr></table></figure>\n</code></pre><p>public String  getValue(int type){</p>\n<pre><code>switch (type) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        throw new IllegalArgumentException(&quot;不合法参数&quot;);\n}\n</code></pre><p>return “”;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 试想一下如果一个函数的参数为int type，函数处理时只用到了1，2，3三种值，如果是其他值就抛出异常，这无疑增加了程序的不稳定性，按以前此时最好的解决办法就是参数改为枚举类型，增加了限定也就提高了稳定性。但是枚举类型就是一把双刃剑，增加安全同时也大大增加了内存占用,尤其是在移动设备上，资源有限更应该注意内存节省。</div><div class=\"line\"></div><div class=\"line\">谷歌或许考虑到了这些问题，在提供的注解包里添加了注解方式检查类型安全，目前支持int和String两种，看下使用方式：</div></pre></td></tr></table></figure>\n<p>//1、先声明需要的类型常量值<br>public static final int TYPE_1 = 1;<br>public static final int TYPE_2 = 2;<br>//2、创建注解接口同时把上一步声明的常量囊括到这里<br>@IntDef({TYPE_1,TYPE_2})<br>@Retention(RetentionPolicy.SOURCE)<br>public @interface _TYPE{</p>\n<p>}<br>//3、在函数参数中增加 注解接口名称<br>public String getValue(@_TYPE int type){</p>\n<pre><code>switch (type) {\n    case 1:\n        break;\n    case 2:\n        break;\n}\nreturn &quot;&quot;;\n</code></pre><p>}<br>```</p>\n<p>   经过上面的步骤，再调用getValue()函数时如果传入其他int则报错编译不通过，这样通过注解就增加了安全性：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-62fa91a5486d42cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-29 下午7.13.32.png\"></p>\n</li>\n</ul>\n<p>结语：基本上APP大部分内存还是被图片占用，处理好图片尤为重要，但是关于图片三级缓存及缩放，目前都使用第三方框架如ImageLoader，所以这里一笔带过。以上就是日常内存优化需要注意的地方，自己做个总结，也希望能对各位看官有所帮助。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>上一章讲了<a href=\"http://www.jianshu.com/p/bd3d673aa979\">Android性能优化之耗电优化\n</a>，感兴趣的可以看下。这一章来说说Android内存方面如何优化，虽说是讲内存优化但是并不涉及虚拟机底层原理，力求通俗易懂。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-0956f76fd0a3e36b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-29 下午2.58.41.png\"></p>\n<p>养成好习惯先上图。内存从状态上来说只有已使用和未使用两种。本章内存优化也从这两方面下手：已使用的内存如何保证虚拟机的顺利回收、未使用的内存如何在满足需求的情况下尽量小的申请。</p>\n<h4 id=\"如何保证已使用内存顺利被回收？\"><a href=\"#如何保证已使用内存顺利被回收？\" class=\"headerlink\" title=\"如何保证已使用内存顺利被回收？\"></a>如何保证已使用内存顺利被回收？</h4><ul>\n<li><p>Java对象生命周期</p>\n<ul>\n<li>创建阶段<br>申请内存空间，构造对象并初始化相关属性值</li>\n<li>使用阶段<br>根据对象应用调用相关方法完成业务逻辑。对象至少被一个强引用持有，除非对象创建时显示声明使用软引用、弱引用和虚引用。</li>\n<li>不可见阶段<br>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，当然对象还是存在着的。</li>\n<li><p>不可达阶段<br>对象处于不可达阶段是指该对象不再被任何强引用所持有。GC会发现对象已不可达</p>\n</li>\n<li><p>收集阶段<br>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。</p>\n</li>\n<li><p>终结阶段<br>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段，等待垃圾回收器对该对象空间进行回收。</p>\n</li>\n<li><p>对象空间重新分配阶段<br>若垃圾回收器对该对象的所占用的内存空间进行回收或者再分配，则该对象彻底消失，这个阶段称之为“对象空间重新分配阶段”。</p>\n<p>以上是Java对象生命周期的简要介绍，要保证内存顺利回收，正确使用Java对象生命周期很重要，如果不能及时回收，我们就称之为“发生了内存泄露”。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在不可见阶段，程序本身不再持有对象强引用，但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ef7e7496b8a9cd2e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"垃圾回收.jpeg\"></p>\n<p>图中灰色的孤立无援的对象对于GC Roots来说不可达，会被回收。知道了内存泄露会影响回收，下面说下哪些方面会导致内存泄露</p>\n<ul>\n<li><p>引起内存泄露的情况</p>\n<ul>\n<li>资源没有适时关闭<br>sqlite的cursor、读写文件使用的File文件流等在使用完后没有及时关闭。虽然cursor会在系统回收时自动关闭，但是这样效率较低。对于资源对象使用还是应该养成良好习惯，使用完毕close并置空。</li>\n<li>注册对象未注销<br>在Android中主要是指注册的广播在Activity销毁时反注销。<br>在Activity中如果有使用的观察者模式在生命周期发生变化时根据需求注销。<br>在Activity中使用的各类传感器(光线、重力等)在页面销毁时及时注销，否则不光导致内存泄露还会因为传感器频繁的采样导致耗电及cpu的占用。</li>\n<li><p>使用static修饰变量<br>这里只说一点，被static修饰的变量可以认为是直接被GC Roots引用了，那你就知道其生命周期有多长了。这时候你如果用static 修饰Bitmap、View、Context和Activity等后果有多严重了吧。</p>\n</li>\n<li><p>非静态内部类的静态实例</p>\n<p>   先看几行代码：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\">public static People people;</div><div class=\"line\"> \t\t @Override</div><div class=\"line\">  \t\tprotected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">     \t\t super.onCreate(savedInstanceState);</div><div class=\"line\">     \t\t setContentView(R.layout.activity_main);</div><div class=\"line\">     \t\t people = new People();</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\"> \t\t class  People&#123;</div><div class=\"line\">     \t\t int age ;</div><div class=\"line\">     \t\t String name ;</div><div class=\"line\">  \t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   非静态内部类People持有外部类即当前Activity的引用，而该非静态内部类实例又是static修饰        的，导致Activity一直被持有而不得释放，最终导致Activity所包含的view不能释放，如果view         tree中包含多图片，那泄露的内存是很大的。</p>\n</li>\n<li><p>Handler</p>\n<p>   众所周知handler用来发送和处理消息回调的。<br>handler导致泄露主要是handler实例是作为非静态匿名内部类方式创建，并且MessageQueue队列中有未处理消息，这时如果退出Activity，MessageQueue中还有Message，而Message持有handler实例，handler实例作为非静态内部类持有Activity引用，最终的连锁反应导致Activity泄露。</p>\n<blockquote>\n<p>handler引起的内存泄露一般是临时性的，因为消息队列里的Message在延时到时间或者某一情况激活后还是会执行的，除非你是故意搞事情。创建handler时最好使用静态内部类，同时在Activity退出时执行 handler.removeCallbacksAndMessages(null);清空队列消息</p>\n</blockquote>\n</li>\n<li><p>Webview</p>\n<p>   webview的使用总是会莫名的出现各种问题或泄露。最好的办法就是把web页面放在一个独立的进程，如果需要交互使用aidl。</p>\n</li>\n</ul>\n<ul>\n<li><p>容器中的对象未清理对象</p>\n<pre><code>Android中使用的容器最多的就是List和Map。用来存储对象集合，如果对象集合和页面相关，那么在退出页面时注意清空集合。同时不要使用static修饰集合。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"如何尽量小的申请内存？\"><a href=\"#如何尽量小的申请内存？\" class=\"headerlink\" title=\"如何尽量小的申请内存？\"></a>如何尽量小的申请内存？</h4><p>上面说完了如何保证GC顺利回收，现在来讲讲要最小使用内存应该怎么做：</p>\n<ul>\n<li><p>慎用自动封装</p>\n<p>  来几行代码尝尝：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer num=0;</div><div class=\"line\">for (int i=0;i&lt;100;i++) &#123;</div><div class=\"line\">    num+=i;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Java基本数据类型是有自动装箱机制的。每次执行循环都会发生一次装箱操作创建一个Integer对象，造成内存消耗。包括其他基本数据类型都有可能造成这种情况。</p>\n</li>\n<li><p>内存复用</p>\n<ul>\n<li><p>视图复用</p>\n<pre><code>在ListView中使用ViewHolder复用item组件，一方面节省内存，一方面提高滑动流畅性。都用过不多介绍。\n</code></pre></li>\n<li><p>使用对象池</p>\n<pre><code>看过Handler、Looper、Message、MessageQueue这一套消息循环源码的同志应该知道里面的Message使用了对象池模式。\n</code></pre><blockquote>\n<p>对象池类似线程池， 首先初始化一个固定大小池子，每次创建对象时候先去池子中找有没有，如果有直接取出，如果没有new出来使用后还到池子里。这样便可达到对象复用的目的。<br>对象池模式适用于那些频繁使用创建的对象，比如一个聊天app，里面对象最多的恐怕就是聊天信息(每条聊天信息对应一个信息对象)。都知道对象的创建是很耗费时间和内存的，没事不要new着玩。如果每条消息都创建一个对象，那可想而知该APP的性能。</p>\n</blockquote>\n<pre><code>对象池的使用也很简单，少量代码即可完成：\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class People &#123;</div><div class=\"line\">     \t\t\tprivate static final Pools.SynchronizedPool&lt;People&gt; sPool = new Pools.SynchronizedPool&lt;People&gt;(</div><div class=\"line\">        \t\t   \t  20);//需要维持对象的数量</div><div class=\"line\">     \t\t\tint age;</div><div class=\"line\">    \t\t\tString name;</div><div class=\"line\">   </div><div class=\"line\">     \t\t\tpublic static People obtain() &#123;</div><div class=\"line\">       \t\t\t  People instance = sPool.acquire();</div><div class=\"line\">       \t\t\t  return (instance != null) ? instance : new People();</div><div class=\"line\">     \t\t\t&#125;</div><div class=\"line\">     \t\t\tpublic void recycle() &#123;</div><div class=\"line\">       \t\t\t  sPool.release(this);</div><div class=\"line\">    \t\t \t&#125;</div><div class=\"line\"> \t\t\t&#125;</div></pre></td></tr></table></figure>\n\n&gt;注意：对象申请(obtain)和释放(recycle)成对出现，使用一个对象后一定要释放还给对象池。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<pre><code>- Bitmap复用\n\n    如果设置了options.inBitmap属性，以后再使用带有该options参数的decode方法加载图片资源时        ，decode会尝试重用已存在的位图内存，这样节省了加载和分配的时间，同时也节省了内存空间\n\n    &gt;该属性从3.0开始引进，低版本不支持inBitmap，4.4系统之前只能重用大小相同的内存区域，4.4以后可以重用任何比所需内存小的区域。具体使用可参考[官网](https://developer.android.com/topic/performance/graphics/manage-memory.html)。\n</code></pre><ul>\n<li><p>纯色规则形状背景用Color Res代替图片</p>\n<pre><code>经常遇到一些按钮背景是纯色显示，比如选中状态背景变为纯灰，但是设计已经发来了切图用还是不用？大声say NO！如果背景使用图片来显示，那背景每个像素都要绘制。\n\n假设一个分辨率为100x100的图片，占用4通道。那该图片内存占用就是100x100x4 =4万Byte≈40KB；但是如果使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- 选择合适数据类型</div><div class=\"line\"></div><div class=\"line\">   - 使用ArrayMap替换HashMap</div><div class=\"line\"></div><div class=\"line\">\t\t先看一下HashMap模型和ArrayMap模型：</div><div class=\"line\">![hashmap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-3e3049cb811341c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\">![arraymap模型.jpg](http://upload-images.jianshu.io/upload_images/1796052-0d979501c5d1358f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&gt;HashMap是一个散列链表，稀疏阵列导致内存稍大，而ArrayMap提供了和HashMap一样的功能，但是避免了内存过度开销。在执行插入或删除操作时，从性能上看ArrayMap比HashMap稍差，但是如果对象数很小，比如1000以内不用担心性能问题。如果想深入了解这2个的原理请自行搜索，这里不过多阐述。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  - 枚举替身来了</div><div class=\"line\">      JDK1.5就支持了枚举类型，使用Enum关键字定义。使用枚举类型很多时候出于参数类型安全迫不得已作出的选择。</div></pre></td></tr></table></figure>\n</code></pre><p>public String  getValue(int type){</p>\n<pre><code>switch (type) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        throw new IllegalArgumentException(&quot;不合法参数&quot;);\n}\n</code></pre><p>return “”;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 试想一下如果一个函数的参数为int type，函数处理时只用到了1，2，3三种值，如果是其他值就抛出异常，这无疑增加了程序的不稳定性，按以前此时最好的解决办法就是参数改为枚举类型，增加了限定也就提高了稳定性。但是枚举类型就是一把双刃剑，增加安全同时也大大增加了内存占用,尤其是在移动设备上，资源有限更应该注意内存节省。</div><div class=\"line\"></div><div class=\"line\">谷歌或许考虑到了这些问题，在提供的注解包里添加了注解方式检查类型安全，目前支持int和String两种，看下使用方式：</div></pre></td></tr></table></figure>\n<p>//1、先声明需要的类型常量值<br>public static final int TYPE_1 = 1;<br>public static final int TYPE_2 = 2;<br>//2、创建注解接口同时把上一步声明的常量囊括到这里<br>@IntDef({TYPE_1,TYPE_2})<br>@Retention(RetentionPolicy.SOURCE)<br>public @interface _TYPE{</p>\n<p>}<br>//3、在函数参数中增加 注解接口名称<br>public String getValue(@_TYPE int type){</p>\n<pre><code>switch (type) {\n    case 1:\n        break;\n    case 2:\n        break;\n}\nreturn &quot;&quot;;\n</code></pre><p>}<br>```</p>\n<p>   经过上面的步骤，再调用getValue()函数时如果传入其他int则报错编译不通过，这样通过注解就增加了安全性：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-62fa91a5486d42cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-29 下午7.13.32.png\"></p>\n</li>\n</ul>\n<p>结语：基本上APP大部分内存还是被图片占用，处理好图片尤为重要，但是关于图片三级缓存及缩放，目前都使用第三方框架如ImageLoader，所以这里一笔带过。以上就是日常内存优化需要注意的地方，自己做个总结，也希望能对各位看官有所帮助。</p>\n"},{"title":"Android性能优化之耗电优化","date":"2017-04-21T12:55:54.000Z","_content":">作为移动设备，电池重要性不言而喻，设备没有电那就真的只能拿来砸核桃了。所以作为开发者的我们，为了给用户带来更好的体验，耗电优化一直是我们撇不开的话题。\n\n####1、为什么耗电\n\n![屏幕快照 2017-03-23 下午2.51.24.png](http://upload-images.jianshu.io/upload_images/1796052-09bf2f70fae572b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n通过上图先把用户-电量这一流程抽象出来，设备的耗电根本原因在于对硬件的使用，耗电越严重说明对硬件使用的越频繁。用户对app频繁使用说明了你用户黏性做的好，我们不能左右，所以我们要在app对硬件调用上做优化来达到节省电量的目的。\n\n先看下移动设备元件耗电大户有哪些：\n![fullsizerender.jpg](http://upload-images.jianshu.io/upload_images/1796052-9f6e93db0de1fb2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####2、屏幕\n屏幕是耗电最大元件之一，但是用户要和app交互就要点亮屏幕，有人可能会觉得屏幕的明暗是用户自己根据喜好设定的，我们无可奈何。其实不然，在有些时候是可以通过UI的设计来减少屏幕电能消耗的。\n\n在这之前我们先来看下目前常用手机屏幕材质：LCD和LED(OLED)。\n- LCD概述\nLCD又名液晶显示屏，屏幕由成千上万液晶分子负责像素显示，并通过背光来将其照亮。所以说每个像素点都使用了同一个光源，每个像素消耗的电量是相同的。\n- LED概述\nLED每个屏幕像素都可以看成是一个LED灯，由RGB三种颜色共同呈现，不同颜色能量消耗也各不相同。黑色不使用任何颜色，不消耗能量，白色相反使用了所有颜色且亮度高，所以能量消耗也更多。\n> 优化方案：较暗的颜色比明亮的颜色更节能，所以在很多留白的地方可以考虑使用偏暗的色调，当然这要在不影响用户体验的前提下。\n\n####3、无线网络\n无线网络主要是WIFI和移动运营商网络，通常情况下使用移动网络要比WIFI耗电要多一些。\n\n- 移动网络\n移动网络数据传输有3种状态：\nFull power：高功率状态，网络激活，允许设备以最大传输速率进行传输。\nLow power：低功率状态，传输速率低于15kbps，耗电是Full Power状态的一半，一般不能直接从程序中进入该状态，而是由Full Power状态降级进入。\nStandby：\b空闲状态，没有数据连接需要传输，耗电最少。\n\n这三种状态有一个转换流程：\n\n![mobile_radio_state_machine.png](http://upload-images.jianshu.io/upload_images/1796052-c669c0cfaae7f3b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>可以看出，三种状态耗电不同，要使耗电最低应该尽量保持状态在空闲或低功率下。从空闲状态转换到高功率状态需要2s，从低功率状态转换到高功率状态需要1.5s。应用中每创建一个网络连接，网络射频都会转到高功率状态，数据传输完毕降回低功率状态，降回过程需要5s，这5s耗电量保持在高功率状态，低功率降回到空闲状态需要12s，期间一直保持低功率状态。所以每次的数据传输都将导致将近20s电量的消耗。\n\n- WIFI网络\nWIFI在active状态下有4种模式：低功率、高功率、低传输、高传输。\n当从低(高)功率状态传输数据时，WIFI会暂时进入相应地低(高)传输状态，一旦数据传输完毕就回到初始状态。\n>WIFI耗电是受包率(每秒接收和发送的数据包)和网速因素影响的。如果因素良好，即网络良好时，数据传输的很快，所以WIFI的高功率状态维持时间很短。这也就是为什么说移动网络耗电高于WIFI耗电，因为同样的数据大小传输时，移动网络固定状态转换就需要近20s的电量消耗。\n\n\n\n通过上面了解网络连接过程，应该心里有了大概的优化建议。\n\n- 网络优化方案：\n  - 减少网络高功率保持时间：\n   \t\t- 1.文本和文件压缩传输。\n不管发送还是请求数据，在数据传输过程中使用gzip将数据进行压缩。经过压缩的数据需要更短的时间传输即可完成，这样是无线所处的高功率状态时间更短，从而减少了耗电。\n    \t- 2.精简文本文件。所谓精简就是去掉文本中空行、空格、注释等无意义内容。\n\n\t\t\t```\n\t\t\t<html>  \n \t\t\t <title> A Sample Page</title> \n \t\t\t <body> \n   \t\t\t with some sample text \n    \t\t\t<--do more here--> \n  \t\t\t</body> \n\t\t\t</html>\n\t\t\t```\n精简后\n\n\t\t\t```\n\t\t\t<html>  <title> A Sample Page</title> <body> with some sample text \t\t\t<--do more here--> </body> </html>\n\t\t\t```\n   \t\t- 3.根据显示大小从服务器获取图片\n①请求一个图片时，客户端提供一个分辨率大小，服务器根据分辨率把裁剪缩放后的图片给客户端返回。也可以使用Android端使用Bitmap.Option自行获取缩放的图片\n②使用webp图片。\n  - 减少网络请求次数\n     \t- 1.使用缓存。\n把经常使用的文件缓存到本地，如头像icon、好友信息等。以后很多时间都可以直接从本地读取缓存减少网络请求次数。\n\n    \t- 2.移动网络下最好批量执行网络请求，利用一次高功率状态执行尽可能多的事情，从而减少频繁间隔请求导致状态转换消耗更多电量。\n\n    \n\n\n####4、CPU\n>cpu利用率高和cpu的频率高没有必然关系，这取决于cpu调频策略。高利用率和高频率的cpu都会导致高耗电。\n\n- 浮点运算比整数运算相对更消耗cpu时间片，相应耗电也就增加，因而在编码过程尽量减少浮点运算，例如使用位移代替除法。\n- 避免wakelock不正确使用\nwakelock可以唤醒设备也可以阻止设备休眠。在PowerManager类中谷歌已经声明了：这个类会影响设备电量，除非必须，否则尽量不要使用该类，同时使用完毕要尽快释放。wankelock有几种类型，在使用时注意选择正确地类型。\n\n- 使用JobScheduler\n很多时候为了满足我们的需求而没有考虑cpu的感受，为了执行1s中的数据区唤醒cpu，但实际却消耗了约两分钟的电量。为此谷歌在5.0系统下提供了JobScheduler组件，使用场景：\n必要不紧急，可延迟执行的任务，比如数据块更新，bug日志上报。\n耗电大德任务，如备份在充电时执行。\n\n- Doze模式\n>Doze模式通过限制应用访问网络及其他一些操作频率，从而减少cpu开销达到省电目的。在6.0系统上未连接电源、屏幕关闭就会进入Doze模式。但是为了不影响应用正常工作，系统还会周期性退出Doze，在退出期间去执行那些被挂起的任务，这个时间窗口称作维护窗口。\n\n####5、其他优化\n- 传感器\n每个传感器都有最大信号频率，开发者在使用传感器时要设置合适的采样频率。最后在使用完成后一定要进行注销，否则激活的传感器会一直进行检测，造成cpu负载和电量消耗。\n\n后面的章节会写一些关于电量检测分析工具的使用。\n\n为了耗电优化干的这些活用户感知不到，但是如果不去优化，肆意使用，那用户就很容易感知到了。","source":"_posts/Android性能优化之耗电优化.md","raw":"---\ntitle: Android性能优化之耗电优化\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n>作为移动设备，电池重要性不言而喻，设备没有电那就真的只能拿来砸核桃了。所以作为开发者的我们，为了给用户带来更好的体验，耗电优化一直是我们撇不开的话题。\n\n####1、为什么耗电\n\n![屏幕快照 2017-03-23 下午2.51.24.png](http://upload-images.jianshu.io/upload_images/1796052-09bf2f70fae572b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n通过上图先把用户-电量这一流程抽象出来，设备的耗电根本原因在于对硬件的使用，耗电越严重说明对硬件使用的越频繁。用户对app频繁使用说明了你用户黏性做的好，我们不能左右，所以我们要在app对硬件调用上做优化来达到节省电量的目的。\n\n先看下移动设备元件耗电大户有哪些：\n![fullsizerender.jpg](http://upload-images.jianshu.io/upload_images/1796052-9f6e93db0de1fb2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####2、屏幕\n屏幕是耗电最大元件之一，但是用户要和app交互就要点亮屏幕，有人可能会觉得屏幕的明暗是用户自己根据喜好设定的，我们无可奈何。其实不然，在有些时候是可以通过UI的设计来减少屏幕电能消耗的。\n\n在这之前我们先来看下目前常用手机屏幕材质：LCD和LED(OLED)。\n- LCD概述\nLCD又名液晶显示屏，屏幕由成千上万液晶分子负责像素显示，并通过背光来将其照亮。所以说每个像素点都使用了同一个光源，每个像素消耗的电量是相同的。\n- LED概述\nLED每个屏幕像素都可以看成是一个LED灯，由RGB三种颜色共同呈现，不同颜色能量消耗也各不相同。黑色不使用任何颜色，不消耗能量，白色相反使用了所有颜色且亮度高，所以能量消耗也更多。\n> 优化方案：较暗的颜色比明亮的颜色更节能，所以在很多留白的地方可以考虑使用偏暗的色调，当然这要在不影响用户体验的前提下。\n\n####3、无线网络\n无线网络主要是WIFI和移动运营商网络，通常情况下使用移动网络要比WIFI耗电要多一些。\n\n- 移动网络\n移动网络数据传输有3种状态：\nFull power：高功率状态，网络激活，允许设备以最大传输速率进行传输。\nLow power：低功率状态，传输速率低于15kbps，耗电是Full Power状态的一半，一般不能直接从程序中进入该状态，而是由Full Power状态降级进入。\nStandby：\b空闲状态，没有数据连接需要传输，耗电最少。\n\n这三种状态有一个转换流程：\n\n![mobile_radio_state_machine.png](http://upload-images.jianshu.io/upload_images/1796052-c669c0cfaae7f3b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>可以看出，三种状态耗电不同，要使耗电最低应该尽量保持状态在空闲或低功率下。从空闲状态转换到高功率状态需要2s，从低功率状态转换到高功率状态需要1.5s。应用中每创建一个网络连接，网络射频都会转到高功率状态，数据传输完毕降回低功率状态，降回过程需要5s，这5s耗电量保持在高功率状态，低功率降回到空闲状态需要12s，期间一直保持低功率状态。所以每次的数据传输都将导致将近20s电量的消耗。\n\n- WIFI网络\nWIFI在active状态下有4种模式：低功率、高功率、低传输、高传输。\n当从低(高)功率状态传输数据时，WIFI会暂时进入相应地低(高)传输状态，一旦数据传输完毕就回到初始状态。\n>WIFI耗电是受包率(每秒接收和发送的数据包)和网速因素影响的。如果因素良好，即网络良好时，数据传输的很快，所以WIFI的高功率状态维持时间很短。这也就是为什么说移动网络耗电高于WIFI耗电，因为同样的数据大小传输时，移动网络固定状态转换就需要近20s的电量消耗。\n\n\n\n通过上面了解网络连接过程，应该心里有了大概的优化建议。\n\n- 网络优化方案：\n  - 减少网络高功率保持时间：\n   \t\t- 1.文本和文件压缩传输。\n不管发送还是请求数据，在数据传输过程中使用gzip将数据进行压缩。经过压缩的数据需要更短的时间传输即可完成，这样是无线所处的高功率状态时间更短，从而减少了耗电。\n    \t- 2.精简文本文件。所谓精简就是去掉文本中空行、空格、注释等无意义内容。\n\n\t\t\t```\n\t\t\t<html>  \n \t\t\t <title> A Sample Page</title> \n \t\t\t <body> \n   \t\t\t with some sample text \n    \t\t\t<--do more here--> \n  \t\t\t</body> \n\t\t\t</html>\n\t\t\t```\n精简后\n\n\t\t\t```\n\t\t\t<html>  <title> A Sample Page</title> <body> with some sample text \t\t\t<--do more here--> </body> </html>\n\t\t\t```\n   \t\t- 3.根据显示大小从服务器获取图片\n①请求一个图片时，客户端提供一个分辨率大小，服务器根据分辨率把裁剪缩放后的图片给客户端返回。也可以使用Android端使用Bitmap.Option自行获取缩放的图片\n②使用webp图片。\n  - 减少网络请求次数\n     \t- 1.使用缓存。\n把经常使用的文件缓存到本地，如头像icon、好友信息等。以后很多时间都可以直接从本地读取缓存减少网络请求次数。\n\n    \t- 2.移动网络下最好批量执行网络请求，利用一次高功率状态执行尽可能多的事情，从而减少频繁间隔请求导致状态转换消耗更多电量。\n\n    \n\n\n####4、CPU\n>cpu利用率高和cpu的频率高没有必然关系，这取决于cpu调频策略。高利用率和高频率的cpu都会导致高耗电。\n\n- 浮点运算比整数运算相对更消耗cpu时间片，相应耗电也就增加，因而在编码过程尽量减少浮点运算，例如使用位移代替除法。\n- 避免wakelock不正确使用\nwakelock可以唤醒设备也可以阻止设备休眠。在PowerManager类中谷歌已经声明了：这个类会影响设备电量，除非必须，否则尽量不要使用该类，同时使用完毕要尽快释放。wankelock有几种类型，在使用时注意选择正确地类型。\n\n- 使用JobScheduler\n很多时候为了满足我们的需求而没有考虑cpu的感受，为了执行1s中的数据区唤醒cpu，但实际却消耗了约两分钟的电量。为此谷歌在5.0系统下提供了JobScheduler组件，使用场景：\n必要不紧急，可延迟执行的任务，比如数据块更新，bug日志上报。\n耗电大德任务，如备份在充电时执行。\n\n- Doze模式\n>Doze模式通过限制应用访问网络及其他一些操作频率，从而减少cpu开销达到省电目的。在6.0系统上未连接电源、屏幕关闭就会进入Doze模式。但是为了不影响应用正常工作，系统还会周期性退出Doze，在退出期间去执行那些被挂起的任务，这个时间窗口称作维护窗口。\n\n####5、其他优化\n- 传感器\n每个传感器都有最大信号频率，开发者在使用传感器时要设置合适的采样频率。最后在使用完成后一定要进行注销，否则激活的传感器会一直进行检测，造成cpu负载和电量消耗。\n\n后面的章节会写一些关于电量检测分析工具的使用。\n\n为了耗电优化干的这些活用户感知不到，但是如果不去优化，肆意使用，那用户就很容易感知到了。","slug":"Android性能优化之耗电优化","published":1,"updated":"2017-04-22T10:24:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ky000l449csrv9cg1i","content":"<blockquote>\n<p>作为移动设备，电池重要性不言而喻，设备没有电那就真的只能拿来砸核桃了。所以作为开发者的我们，为了给用户带来更好的体验，耗电优化一直是我们撇不开的话题。</p>\n</blockquote>\n<p>####1、为什么耗电</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-09bf2f70fae572b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-23 下午2.51.24.png\"></p>\n<p>通过上图先把用户-电量这一流程抽象出来，设备的耗电根本原因在于对硬件的使用，耗电越严重说明对硬件使用的越频繁。用户对app频繁使用说明了你用户黏性做的好，我们不能左右，所以我们要在app对硬件调用上做优化来达到节省电量的目的。</p>\n<p>先看下移动设备元件耗电大户有哪些：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-9f6e93db0de1fb2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender.jpg\"></p>\n<p>####2、屏幕<br>屏幕是耗电最大元件之一，但是用户要和app交互就要点亮屏幕，有人可能会觉得屏幕的明暗是用户自己根据喜好设定的，我们无可奈何。其实不然，在有些时候是可以通过UI的设计来减少屏幕电能消耗的。</p>\n<p>在这之前我们先来看下目前常用手机屏幕材质：LCD和LED(OLED)。</p>\n<ul>\n<li>LCD概述<br>LCD又名液晶显示屏，屏幕由成千上万液晶分子负责像素显示，并通过背光来将其照亮。所以说每个像素点都使用了同一个光源，每个像素消耗的电量是相同的。</li>\n<li>LED概述<br>LED每个屏幕像素都可以看成是一个LED灯，由RGB三种颜色共同呈现，不同颜色能量消耗也各不相同。黑色不使用任何颜色，不消耗能量，白色相反使用了所有颜色且亮度高，所以能量消耗也更多。<blockquote>\n<p>优化方案：较暗的颜色比明亮的颜色更节能，所以在很多留白的地方可以考虑使用偏暗的色调，当然这要在不影响用户体验的前提下。</p>\n</blockquote>\n</li>\n</ul>\n<p>####3、无线网络<br>无线网络主要是WIFI和移动运营商网络，通常情况下使用移动网络要比WIFI耗电要多一些。</p>\n<ul>\n<li>移动网络<br>移动网络数据传输有3种状态：<br>Full power：高功率状态，网络激活，允许设备以最大传输速率进行传输。<br>Low power：低功率状态，传输速率低于15kbps，耗电是Full Power状态的一半，一般不能直接从程序中进入该状态，而是由Full Power状态降级进入。<br>Standby：\b空闲状态，没有数据连接需要传输，耗电最少。</li>\n</ul>\n<p>这三种状态有一个转换流程：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c669c0cfaae7f3b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"mobile_radio_state_machine.png\"></p>\n<blockquote>\n<p>可以看出，三种状态耗电不同，要使耗电最低应该尽量保持状态在空闲或低功率下。从空闲状态转换到高功率状态需要2s，从低功率状态转换到高功率状态需要1.5s。应用中每创建一个网络连接，网络射频都会转到高功率状态，数据传输完毕降回低功率状态，降回过程需要5s，这5s耗电量保持在高功率状态，低功率降回到空闲状态需要12s，期间一直保持低功率状态。所以每次的数据传输都将导致将近20s电量的消耗。</p>\n</blockquote>\n<ul>\n<li>WIFI网络<br>WIFI在active状态下有4种模式：低功率、高功率、低传输、高传输。<br>当从低(高)功率状态传输数据时，WIFI会暂时进入相应地低(高)传输状态，一旦数据传输完毕就回到初始状态。<blockquote>\n<p>WIFI耗电是受包率(每秒接收和发送的数据包)和网速因素影响的。如果因素良好，即网络良好时，数据传输的很快，所以WIFI的高功率状态维持时间很短。这也就是为什么说移动网络耗电高于WIFI耗电，因为同样的数据大小传输时，移动网络固定状态转换就需要近20s的电量消耗。</p>\n</blockquote>\n</li>\n</ul>\n<p>通过上面了解网络连接过程，应该心里有了大概的优化建议。</p>\n<ul>\n<li><p>网络优化方案：</p>\n<ul>\n<li><p>减少网络高功率保持时间：</p>\n<pre><code>- 1.文本和文件压缩传输。\n</code></pre><p>不管发送还是请求数据，在数据传输过程中使用gzip将数据进行压缩。经过压缩的数据需要更短的时间传输即可完成，这样是无线所处的高功率状态时间更短，从而减少了耗电。</p>\n<pre><code>- 2.精简文本文件。所谓精简就是去掉文本中空行、空格、注释等无意义内容。\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">\t &lt;title&gt; A Sample Page&lt;/title&gt; </div><div class=\"line\">\t &lt;body&gt; </div><div class=\"line\">\t\t\t with some sample text </div><div class=\"line\"> \t\t\t&lt;--do more here--&gt; </div><div class=\"line\">\t\t&lt;/body&gt; </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>精简后</p>\n<pre><code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;  &lt;title&gt; A Sample Page&lt;/title&gt; &lt;body&gt; with some sample text \t\t\t&lt;--do more here--&gt; &lt;/body&gt; &lt;/html&gt;</div></pre></td></tr></table></figure>\n\n- 3.根据显示大小从服务器获取图片\n</code></pre><p>①请求一个图片时，客户端提供一个分辨率大小，服务器根据分辨率把裁剪缩放后的图片给客户端返回。也可以使用Android端使用Bitmap.Option自行获取缩放的图片<br>②使用webp图片。</p>\n<ul>\n<li><p>减少网络请求次数</p>\n<pre><code>- 1.使用缓存。\n</code></pre><p>把经常使用的文件缓存到本地，如头像icon、好友信息等。以后很多时间都可以直接从本地读取缓存减少网络请求次数。</p>\n<pre><code>- 2.移动网络下最好批量执行网络请求，利用一次高功率状态执行尽可能多的事情，从而减少频繁间隔请求导致状态转换消耗更多电量。\n</code></pre></li>\n</ul>\n<p>####4、CPU</p>\n<blockquote>\n<p>cpu利用率高和cpu的频率高没有必然关系，这取决于cpu调频策略。高利用率和高频率的cpu都会导致高耗电。</p>\n</blockquote>\n<ul>\n<li>浮点运算比整数运算相对更消耗cpu时间片，相应耗电也就增加，因而在编码过程尽量减少浮点运算，例如使用位移代替除法。</li>\n<li><p>避免wakelock不正确使用<br>wakelock可以唤醒设备也可以阻止设备休眠。在PowerManager类中谷歌已经声明了：这个类会影响设备电量，除非必须，否则尽量不要使用该类，同时使用完毕要尽快释放。wankelock有几种类型，在使用时注意选择正确地类型。</p>\n</li>\n<li><p>使用JobScheduler<br>很多时候为了满足我们的需求而没有考虑cpu的感受，为了执行1s中的数据区唤醒cpu，但实际却消耗了约两分钟的电量。为此谷歌在5.0系统下提供了JobScheduler组件，使用场景：<br>必要不紧急，可延迟执行的任务，比如数据块更新，bug日志上报。<br>耗电大德任务，如备份在充电时执行。</p>\n</li>\n<li><p>Doze模式</p>\n<blockquote>\n<p>Doze模式通过限制应用访问网络及其他一些操作频率，从而减少cpu开销达到省电目的。在6.0系统上未连接电源、屏幕关闭就会进入Doze模式。但是为了不影响应用正常工作，系统还会周期性退出Doze，在退出期间去执行那些被挂起的任务，这个时间窗口称作维护窗口。</p>\n</blockquote>\n</li>\n</ul>\n<p>####5、其他优化</p>\n<ul>\n<li>传感器<br>每个传感器都有最大信号频率，开发者在使用传感器时要设置合适的采样频率。最后在使用完成后一定要进行注销，否则激活的传感器会一直进行检测，造成cpu负载和电量消耗。</li>\n</ul>\n<p>后面的章节会写一些关于电量检测分析工具的使用。</p>\n<p>为了耗电优化干的这些活用户感知不到，但是如果不去优化，肆意使用，那用户就很容易感知到了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作为移动设备，电池重要性不言而喻，设备没有电那就真的只能拿来砸核桃了。所以作为开发者的我们，为了给用户带来更好的体验，耗电优化一直是我们撇不开的话题。</p>\n</blockquote>\n<p>####1、为什么耗电</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-09bf2f70fae572b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-23 下午2.51.24.png\"></p>\n<p>通过上图先把用户-电量这一流程抽象出来，设备的耗电根本原因在于对硬件的使用，耗电越严重说明对硬件使用的越频繁。用户对app频繁使用说明了你用户黏性做的好，我们不能左右，所以我们要在app对硬件调用上做优化来达到节省电量的目的。</p>\n<p>先看下移动设备元件耗电大户有哪些：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-9f6e93db0de1fb2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender.jpg\"></p>\n<p>####2、屏幕<br>屏幕是耗电最大元件之一，但是用户要和app交互就要点亮屏幕，有人可能会觉得屏幕的明暗是用户自己根据喜好设定的，我们无可奈何。其实不然，在有些时候是可以通过UI的设计来减少屏幕电能消耗的。</p>\n<p>在这之前我们先来看下目前常用手机屏幕材质：LCD和LED(OLED)。</p>\n<ul>\n<li>LCD概述<br>LCD又名液晶显示屏，屏幕由成千上万液晶分子负责像素显示，并通过背光来将其照亮。所以说每个像素点都使用了同一个光源，每个像素消耗的电量是相同的。</li>\n<li>LED概述<br>LED每个屏幕像素都可以看成是一个LED灯，由RGB三种颜色共同呈现，不同颜色能量消耗也各不相同。黑色不使用任何颜色，不消耗能量，白色相反使用了所有颜色且亮度高，所以能量消耗也更多。<blockquote>\n<p>优化方案：较暗的颜色比明亮的颜色更节能，所以在很多留白的地方可以考虑使用偏暗的色调，当然这要在不影响用户体验的前提下。</p>\n</blockquote>\n</li>\n</ul>\n<p>####3、无线网络<br>无线网络主要是WIFI和移动运营商网络，通常情况下使用移动网络要比WIFI耗电要多一些。</p>\n<ul>\n<li>移动网络<br>移动网络数据传输有3种状态：<br>Full power：高功率状态，网络激活，允许设备以最大传输速率进行传输。<br>Low power：低功率状态，传输速率低于15kbps，耗电是Full Power状态的一半，一般不能直接从程序中进入该状态，而是由Full Power状态降级进入。<br>Standby：\b空闲状态，没有数据连接需要传输，耗电最少。</li>\n</ul>\n<p>这三种状态有一个转换流程：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c669c0cfaae7f3b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"mobile_radio_state_machine.png\"></p>\n<blockquote>\n<p>可以看出，三种状态耗电不同，要使耗电最低应该尽量保持状态在空闲或低功率下。从空闲状态转换到高功率状态需要2s，从低功率状态转换到高功率状态需要1.5s。应用中每创建一个网络连接，网络射频都会转到高功率状态，数据传输完毕降回低功率状态，降回过程需要5s，这5s耗电量保持在高功率状态，低功率降回到空闲状态需要12s，期间一直保持低功率状态。所以每次的数据传输都将导致将近20s电量的消耗。</p>\n</blockquote>\n<ul>\n<li>WIFI网络<br>WIFI在active状态下有4种模式：低功率、高功率、低传输、高传输。<br>当从低(高)功率状态传输数据时，WIFI会暂时进入相应地低(高)传输状态，一旦数据传输完毕就回到初始状态。<blockquote>\n<p>WIFI耗电是受包率(每秒接收和发送的数据包)和网速因素影响的。如果因素良好，即网络良好时，数据传输的很快，所以WIFI的高功率状态维持时间很短。这也就是为什么说移动网络耗电高于WIFI耗电，因为同样的数据大小传输时，移动网络固定状态转换就需要近20s的电量消耗。</p>\n</blockquote>\n</li>\n</ul>\n<p>通过上面了解网络连接过程，应该心里有了大概的优化建议。</p>\n<ul>\n<li><p>网络优化方案：</p>\n<ul>\n<li><p>减少网络高功率保持时间：</p>\n<pre><code>- 1.文本和文件压缩传输。\n</code></pre><p>不管发送还是请求数据，在数据传输过程中使用gzip将数据进行压缩。经过压缩的数据需要更短的时间传输即可完成，这样是无线所处的高功率状态时间更短，从而减少了耗电。</p>\n<pre><code>- 2.精简文本文件。所谓精简就是去掉文本中空行、空格、注释等无意义内容。\n\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;  </div><div class=\"line\">\t &lt;title&gt; A Sample Page&lt;/title&gt; </div><div class=\"line\">\t &lt;body&gt; </div><div class=\"line\">\t\t\t with some sample text </div><div class=\"line\"> \t\t\t&lt;--do more here--&gt; </div><div class=\"line\">\t\t&lt;/body&gt; </div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>精简后</p>\n<pre><code> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;  &lt;title&gt; A Sample Page&lt;/title&gt; &lt;body&gt; with some sample text \t\t\t&lt;--do more here--&gt; &lt;/body&gt; &lt;/html&gt;</div></pre></td></tr></table></figure>\n\n- 3.根据显示大小从服务器获取图片\n</code></pre><p>①请求一个图片时，客户端提供一个分辨率大小，服务器根据分辨率把裁剪缩放后的图片给客户端返回。也可以使用Android端使用Bitmap.Option自行获取缩放的图片<br>②使用webp图片。</p>\n<ul>\n<li><p>减少网络请求次数</p>\n<pre><code>- 1.使用缓存。\n</code></pre><p>把经常使用的文件缓存到本地，如头像icon、好友信息等。以后很多时间都可以直接从本地读取缓存减少网络请求次数。</p>\n<pre><code>- 2.移动网络下最好批量执行网络请求，利用一次高功率状态执行尽可能多的事情，从而减少频繁间隔请求导致状态转换消耗更多电量。\n</code></pre></li>\n</ul>\n<p>####4、CPU</p>\n<blockquote>\n<p>cpu利用率高和cpu的频率高没有必然关系，这取决于cpu调频策略。高利用率和高频率的cpu都会导致高耗电。</p>\n</blockquote>\n<ul>\n<li>浮点运算比整数运算相对更消耗cpu时间片，相应耗电也就增加，因而在编码过程尽量减少浮点运算，例如使用位移代替除法。</li>\n<li><p>避免wakelock不正确使用<br>wakelock可以唤醒设备也可以阻止设备休眠。在PowerManager类中谷歌已经声明了：这个类会影响设备电量，除非必须，否则尽量不要使用该类，同时使用完毕要尽快释放。wankelock有几种类型，在使用时注意选择正确地类型。</p>\n</li>\n<li><p>使用JobScheduler<br>很多时候为了满足我们的需求而没有考虑cpu的感受，为了执行1s中的数据区唤醒cpu，但实际却消耗了约两分钟的电量。为此谷歌在5.0系统下提供了JobScheduler组件，使用场景：<br>必要不紧急，可延迟执行的任务，比如数据块更新，bug日志上报。<br>耗电大德任务，如备份在充电时执行。</p>\n</li>\n<li><p>Doze模式</p>\n<blockquote>\n<p>Doze模式通过限制应用访问网络及其他一些操作频率，从而减少cpu开销达到省电目的。在6.0系统上未连接电源、屏幕关闭就会进入Doze模式。但是为了不影响应用正常工作，系统还会周期性退出Doze，在退出期间去执行那些被挂起的任务，这个时间窗口称作维护窗口。</p>\n</blockquote>\n</li>\n</ul>\n<p>####5、其他优化</p>\n<ul>\n<li>传感器<br>每个传感器都有最大信号频率，开发者在使用传感器时要设置合适的采样频率。最后在使用完成后一定要进行注销，否则激活的传感器会一直进行检测，造成cpu负载和电量消耗。</li>\n</ul>\n<p>后面的章节会写一些关于电量检测分析工具的使用。</p>\n<p>为了耗电优化干的这些活用户感知不到，但是如果不去优化，肆意使用，那用户就很容易感知到了。</p>\n"},{"title":"Android源码下载","date":"2017-04-21T12:55:54.000Z","_content":"\n#### 说在前面的话\nwin系统的笔记本过年回来就没有带回北京。最近打算看看Android源码，所以需要在mac中从新下载。\n#### 从官网下载\n下载Android源码首先想到的就是[官网](https://source.android.com/source/downloading.html)\n按照指示要先安装repo。但是在执行\n```\ncurl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n```\n\n时候就出现异常\n\n```\ncurl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:01:14 --:--:--    0\ncurl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out\n```\n\n搜索了下异常发现很早就有这个问题，比如[这里](https://github.com/npm/npm/issues/10037)\n但是好像没什么好的解决方法。网传有其他地址可以使用，但是没有继续浪费时间了，不能一条路走到黑。\n#### 使用国内资源\n国外太麻烦，毕竟只是想看源码，不想在下载方面浪费太多精力。所以把想法转战到国内的源上。\n分享2个源，[科大源](https://lug.ustc.edu.cn/wiki/mirrors/help/aosp#已有仓库如何改用科大源)和[清大源](https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/)\n其中我选择使用的是科大源，打开页面看到初始同步有两个方法，方法1毕竟简单，下载一个打好的包，自己repo sync。方法2还是要下载repo，而且如果中途断掉还要从头下载，所以果断选了方法1，直接使用迅雷下载tar包还是很快的。\n不到一个小时下载完成，解压后打开aosp文件夹发现没有文件，因为是.开头的，都是隐藏文件，显示后如图：\n![屏幕快照 2017-03-16 下午1.55.14.png](http://upload-images.jianshu.io/upload_images/1796052-a48a38e120b53440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n执行\n```\n/Users/jenson/Downloads/aosp/.repo/repo/repo sync\n```\n\n同步\n\n![屏幕快照 2017-03-16 下午2.08.54.png](http://upload-images.jianshu.io/upload_images/1796052-185f5625074cf187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 如何修改已经init的repo\n如果想下载其他版本的源码，但是repo已经初始化过，\n如果再次执行repo init xxx会提示 :\n```\nYour identity is: jenson <xxx@foxmail.com>\nIf you want to change this, please re-run 'repo init' with --config-name\nrepo has been initialized in /Users/jenson/Downloads/aosp\n```\n\n上面意思是如果要修改init，需要重新运行repo init +新的url +config\n这时会自动修改配置并初始化:\n\n```\n/Users/jenson/Downloads/aosp/.repo/repo/repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r58  --config\n\n```","source":"_posts/Android源码下载.md","raw":"---\ntitle: Android源码下载\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n\n#### 说在前面的话\nwin系统的笔记本过年回来就没有带回北京。最近打算看看Android源码，所以需要在mac中从新下载。\n#### 从官网下载\n下载Android源码首先想到的就是[官网](https://source.android.com/source/downloading.html)\n按照指示要先安装repo。但是在执行\n```\ncurl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n```\n\n时候就出现异常\n\n```\ncurl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:01:14 --:--:--    0\ncurl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out\n```\n\n搜索了下异常发现很早就有这个问题，比如[这里](https://github.com/npm/npm/issues/10037)\n但是好像没什么好的解决方法。网传有其他地址可以使用，但是没有继续浪费时间了，不能一条路走到黑。\n#### 使用国内资源\n国外太麻烦，毕竟只是想看源码，不想在下载方面浪费太多精力。所以把想法转战到国内的源上。\n分享2个源，[科大源](https://lug.ustc.edu.cn/wiki/mirrors/help/aosp#已有仓库如何改用科大源)和[清大源](https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/)\n其中我选择使用的是科大源，打开页面看到初始同步有两个方法，方法1毕竟简单，下载一个打好的包，自己repo sync。方法2还是要下载repo，而且如果中途断掉还要从头下载，所以果断选了方法1，直接使用迅雷下载tar包还是很快的。\n不到一个小时下载完成，解压后打开aosp文件夹发现没有文件，因为是.开头的，都是隐藏文件，显示后如图：\n![屏幕快照 2017-03-16 下午1.55.14.png](http://upload-images.jianshu.io/upload_images/1796052-a48a38e120b53440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n执行\n```\n/Users/jenson/Downloads/aosp/.repo/repo/repo sync\n```\n\n同步\n\n![屏幕快照 2017-03-16 下午2.08.54.png](http://upload-images.jianshu.io/upload_images/1796052-185f5625074cf187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 如何修改已经init的repo\n如果想下载其他版本的源码，但是repo已经初始化过，\n如果再次执行repo init xxx会提示 :\n```\nYour identity is: jenson <xxx@foxmail.com>\nIf you want to change this, please re-run 'repo init' with --config-name\nrepo has been initialized in /Users/jenson/Downloads/aosp\n```\n\n上面意思是如果要修改init，需要重新运行repo init +新的url +config\n这时会自动修改配置并初始化:\n\n```\n/Users/jenson/Downloads/aosp/.repo/repo/repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r58  --config\n\n```","slug":"Android源码下载","published":1,"updated":"2017-04-22T11:48:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7l3000p449cqgmyady5","content":"<h4 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h4><p>win系统的笔记本过年回来就没有带回北京。最近打算看看Android源码，所以需要在mac中从新下载。</p>\n<h4 id=\"从官网下载\"><a href=\"#从官网下载\" class=\"headerlink\" title=\"从官网下载\"></a>从官网下载</h4><p>下载Android源码首先想到的就是<a href=\"https://source.android.com/source/downloading.html\" target=\"_blank\" rel=\"external\">官网</a><br>按照指示要先安装repo。但是在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div></pre></td></tr></table></figure></p>\n<p>时候就出现异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">  0     0    0     0    0     0      0      0 --:--:--  0:01:14 --:--:--    0</div><div class=\"line\">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</div></pre></td></tr></table></figure>\n<p>搜索了下异常发现很早就有这个问题，比如<a href=\"https://github.com/npm/npm/issues/10037\" target=\"_blank\" rel=\"external\">这里</a><br>但是好像没什么好的解决方法。网传有其他地址可以使用，但是没有继续浪费时间了，不能一条路走到黑。</p>\n<h4 id=\"使用国内资源\"><a href=\"#使用国内资源\" class=\"headerlink\" title=\"使用国内资源\"></a>使用国内资源</h4><p>国外太麻烦，毕竟只是想看源码，不想在下载方面浪费太多精力。所以把想法转战到国内的源上。<br>分享2个源，<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/aosp#已有仓库如何改用科大源\" target=\"_blank\" rel=\"external\">科大源</a>和<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/\" target=\"_blank\" rel=\"external\">清大源</a><br>其中我选择使用的是科大源，打开页面看到初始同步有两个方法，方法1毕竟简单，下载一个打好的包，自己repo sync。方法2还是要下载repo，而且如果中途断掉还要从头下载，所以果断选了方法1，直接使用迅雷下载tar包还是很快的。<br>不到一个小时下载完成，解压后打开aosp文件夹发现没有文件，因为是.开头的，都是隐藏文件，显示后如图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a48a38e120b53440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-16 下午1.55.14.png\"><br>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/jenson/Downloads/aosp/.repo/repo/repo sync</div></pre></td></tr></table></figure></p>\n<p>同步</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-185f5625074cf187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-16 下午2.08.54.png\"></p>\n<h4 id=\"如何修改已经init的repo\"><a href=\"#如何修改已经init的repo\" class=\"headerlink\" title=\"如何修改已经init的repo\"></a>如何修改已经init的repo</h4><p>如果想下载其他版本的源码，但是repo已经初始化过，<br>如果再次执行repo init xxx会提示 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Your identity is: jenson &lt;xxx@foxmail.com&gt;</div><div class=\"line\">If you want to change this, please re-run &apos;repo init&apos; with --config-name</div><div class=\"line\">repo has been initialized in /Users/jenson/Downloads/aosp</div></pre></td></tr></table></figure></p>\n<p>上面意思是如果要修改init，需要重新运行repo init +新的url +config<br>这时会自动修改配置并初始化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/jenson/Downloads/aosp/.repo/repo/repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r58  --config</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h4><p>win系统的笔记本过年回来就没有带回北京。最近打算看看Android源码，所以需要在mac中从新下载。</p>\n<h4 id=\"从官网下载\"><a href=\"#从官网下载\" class=\"headerlink\" title=\"从官网下载\"></a>从官网下载</h4><p>下载Android源码首先想到的就是<a href=\"https://source.android.com/source/downloading.html\">官网</a><br>按照指示要先安装repo。但是在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div></pre></td></tr></table></figure></p>\n<p>时候就出现异常</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">  0     0    0     0    0     0      0      0 --:--:--  0:01:14 --:--:--    0</div><div class=\"line\">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</div></pre></td></tr></table></figure>\n<p>搜索了下异常发现很早就有这个问题，比如<a href=\"https://github.com/npm/npm/issues/10037\">这里</a><br>但是好像没什么好的解决方法。网传有其他地址可以使用，但是没有继续浪费时间了，不能一条路走到黑。</p>\n<h4 id=\"使用国内资源\"><a href=\"#使用国内资源\" class=\"headerlink\" title=\"使用国内资源\"></a>使用国内资源</h4><p>国外太麻烦，毕竟只是想看源码，不想在下载方面浪费太多精力。所以把想法转战到国内的源上。<br>分享2个源，<a href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/aosp#已有仓库如何改用科大源\">科大源</a>和<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/\">清大源</a><br>其中我选择使用的是科大源，打开页面看到初始同步有两个方法，方法1毕竟简单，下载一个打好的包，自己repo sync。方法2还是要下载repo，而且如果中途断掉还要从头下载，所以果断选了方法1，直接使用迅雷下载tar包还是很快的。<br>不到一个小时下载完成，解压后打开aosp文件夹发现没有文件，因为是.开头的，都是隐藏文件，显示后如图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a48a38e120b53440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-16 下午1.55.14.png\"><br>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/jenson/Downloads/aosp/.repo/repo/repo sync</div></pre></td></tr></table></figure></p>\n<p>同步</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-185f5625074cf187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-16 下午2.08.54.png\"></p>\n<h4 id=\"如何修改已经init的repo\"><a href=\"#如何修改已经init的repo\" class=\"headerlink\" title=\"如何修改已经init的repo\"></a>如何修改已经init的repo</h4><p>如果想下载其他版本的源码，但是repo已经初始化过，<br>如果再次执行repo init xxx会提示 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Your identity is: jenson &lt;xxx@foxmail.com&gt;</div><div class=\"line\">If you want to change this, please re-run &apos;repo init&apos; with --config-name</div><div class=\"line\">repo has been initialized in /Users/jenson/Downloads/aosp</div></pre></td></tr></table></figure></p>\n<p>上面意思是如果要修改init，需要重新运行repo init +新的url +config<br>这时会自动修改配置并初始化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/jenson/Downloads/aosp/.repo/repo/repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r58  --config</div></pre></td></tr></table></figure>"},{"title":"Django创建数据表时syncdb提示Unknown command：‘syncdb'","date":"2017-06-27T08:32:23.000Z","_content":"\n异常信息如下\n\n```\nJensondeMini:dj_test01 jenson$ python3 ./manage.py syncdb\nUnknown command: 'syncdb'\nType 'manage.py help' for usage.\n```\n\n主要是因为使用的版本太新，如果你安装的Django Version >= 1.9就会出现这个问题\n\n解决方法就是把`python3 ./manage.py syncdb`\n\n替换成`python3 ./manage.py migrate`\n\n之后就会初始化数据表成功\n\n```\nJensondeMini:dj_test01 jenson$ python3 ./manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n```\n\n\n\n\n\n","source":"_posts/Django创建数据表时syncdb提示Unknown-command：‘syncdb.md","raw":"---\ntitle: Django创建数据表时syncdb提示Unknown command：‘syncdb'\ndate: 2017-06-27 16:32:23\ntags: Python\ncategories: Python\n---\n\n异常信息如下\n\n```\nJensondeMini:dj_test01 jenson$ python3 ./manage.py syncdb\nUnknown command: 'syncdb'\nType 'manage.py help' for usage.\n```\n\n主要是因为使用的版本太新，如果你安装的Django Version >= 1.9就会出现这个问题\n\n解决方法就是把`python3 ./manage.py syncdb`\n\n替换成`python3 ./manage.py migrate`\n\n之后就会初始化数据表成功\n\n```\nJensondeMini:dj_test01 jenson$ python3 ./manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n```\n\n\n\n\n\n","slug":"Django创建数据表时syncdb提示Unknown-command：‘syncdb","published":1,"updated":"2017-06-27T08:36:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7l8000r449ciu5hz7cu","content":"<p>异常信息如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">JensondeMini:dj_test01 jenson$ python3 ./manage.py syncdb</div><div class=\"line\">Unknown command: &apos;syncdb&apos;</div><div class=\"line\">Type &apos;manage.py help&apos; for usage.</div></pre></td></tr></table></figure>\n<p>主要是因为使用的版本太新，如果你安装的Django Version &gt;= 1.9就会出现这个问题</p>\n<p>解决方法就是把<code>python3 ./manage.py syncdb</code></p>\n<p>替换成<code>python3 ./manage.py migrate</code></p>\n<p>之后就会初始化数据表成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">JensondeMini:dj_test01 jenson$ python3 ./manage.py migrate</div><div class=\"line\">Operations to perform:</div><div class=\"line\">  Apply all migrations: admin, auth, contenttypes, sessions</div><div class=\"line\">Running migrations:</div><div class=\"line\">  Applying contenttypes.0001_initial... OK</div><div class=\"line\">  Applying auth.0001_initial... OK</div><div class=\"line\">  Applying admin.0001_initial... OK</div><div class=\"line\">  Applying admin.0002_logentry_remove_auto_add... OK</div><div class=\"line\">  Applying contenttypes.0002_remove_content_type_name... OK</div><div class=\"line\">  Applying auth.0002_alter_permission_name_max_length... OK</div><div class=\"line\">  Applying auth.0003_alter_user_email_max_length... OK</div><div class=\"line\">  Applying auth.0004_alter_user_username_opts... OK</div><div class=\"line\">  Applying auth.0005_alter_user_last_login_null... OK</div><div class=\"line\">  Applying auth.0006_require_contenttypes_0002... OK</div><div class=\"line\">  Applying auth.0007_alter_validators_add_error_messages... OK</div><div class=\"line\">  Applying auth.0008_alter_user_username_max_length... OK</div><div class=\"line\">  Applying sessions.0001_initial... OK</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>异常信息如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">JensondeMini:dj_test01 jenson$ python3 ./manage.py syncdb</div><div class=\"line\">Unknown command: &apos;syncdb&apos;</div><div class=\"line\">Type &apos;manage.py help&apos; for usage.</div></pre></td></tr></table></figure>\n<p>主要是因为使用的版本太新，如果你安装的Django Version &gt;= 1.9就会出现这个问题</p>\n<p>解决方法就是把<code>python3 ./manage.py syncdb</code></p>\n<p>替换成<code>python3 ./manage.py migrate</code></p>\n<p>之后就会初始化数据表成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">JensondeMini:dj_test01 jenson$ python3 ./manage.py migrate</div><div class=\"line\">Operations to perform:</div><div class=\"line\">  Apply all migrations: admin, auth, contenttypes, sessions</div><div class=\"line\">Running migrations:</div><div class=\"line\">  Applying contenttypes.0001_initial... OK</div><div class=\"line\">  Applying auth.0001_initial... OK</div><div class=\"line\">  Applying admin.0001_initial... OK</div><div class=\"line\">  Applying admin.0002_logentry_remove_auto_add... OK</div><div class=\"line\">  Applying contenttypes.0002_remove_content_type_name... OK</div><div class=\"line\">  Applying auth.0002_alter_permission_name_max_length... OK</div><div class=\"line\">  Applying auth.0003_alter_user_email_max_length... OK</div><div class=\"line\">  Applying auth.0004_alter_user_username_opts... OK</div><div class=\"line\">  Applying auth.0005_alter_user_last_login_null... OK</div><div class=\"line\">  Applying auth.0006_require_contenttypes_0002... OK</div><div class=\"line\">  Applying auth.0007_alter_validators_add_error_messages... OK</div><div class=\"line\">  Applying auth.0008_alter_user_username_max_length... OK</div><div class=\"line\">  Applying sessions.0001_initial... OK</div></pre></td></tr></table></figure>\n"},{"title":"Java字符串压缩去重","date":"2017-05-03T09:42:06.000Z","_content":"\n# 说在前面的话\n\n去一家公司面试，开始就一道笔试题，做对了就继续，做不对就不用往下面了。内容是读取文件内容并压缩内容去重，压缩去重意思是如果内容为ABBCCCCAA压缩后字符串显示为A1B2C3A2。以此类推。其实这道题不难，但是我脑子转悠慢，读取文件和遍历字符做出来了，但是其余的没有做出了，或者说大概思路对了，但是卡在某一个点。总之有点废物就是了。。\n\n\n\n# 我的做法\n\n```\n\tpublic static String compress(String str){\n\t\tStringBuffer mystr = new StringBuffer();\n\t\t//我这里是从0开始的\n\t\tint count = 0;\n\t\t//而这也是初始为0，这样的设置导致下面判断时候一直\n\t\t//无所适从，对于何时该给count++，\n\t\t//何时该给mystr.append有点混乱\n\t\tchar last = 0;\n\t\tint length = str.length();\n\t\tfor(int i=0;i<length;i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(last!=c){\n\t\t\t\tlast = c;\n\t\t\t\tcount++;\n\t\t\t\tmystr.append(last);\n\t\t\t\tmystr.append(count);\n\t\t\t}else{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn mystr.toString();\n\t}\n```\n\n# 正确地做法\n\n- 直接使用string做法\n\n  ```\n  public String compressBad (String str)  \n  {  \n      String mystr = \" \";  \n      int count = 1;  \n      char last = str.charAt(0);  \n      for (int i = 1; i < str.length(); i++)  \n      {  \n          if (last == str.charAt(i))  \n          {  \n              count++;  \n          }  \n          else  \n          {  \n              mystr += last + count;  \n              last = str.charAt(i);  \n              count = 1;                \n          }  \n      }  \n      return mystr += last + count;  \n  }  \n  ```\n\n  ​\n\n\n\n- 使用StringBuffer\n\n  ```\n  \tpublic static  String compressBetter(String str) {\n  \t\tStringBuffer mystr = new StringBuffer();\n  \t\tint count = 1;\n  \t\t//取出第一个字符作为比较字符\n  \t\tchar last = str.charAt(0);\n  \t\tfor (int i = 1; i < str.length(); i++) {\n  \t\t\t//如果当前字符和之前的字符相同，说明是重复的，\n  \t\t\t//直接在数量值+1；\n  \t\t\tif (last == str.charAt(i)) {\n  \t\t\t\tcount++;\n  \t\t\t} else {\n  \t\t\t\t//如果不相同，说明开始了一个新的字符，\n  \t\t\t\t//这时要做的只有两件事：\n  \t\t\t\t//1、结束上格字符计数并添加字符串，\n  \t\t\t\tmystr.append(last);\n  \t\t\t\tmystr.append(count);\n  \t\t\t\t//2、2、开始新的字符计数\n  \t\t\t\tlast = str.charAt(i);\n  \t\t\t\tcount = 1;\n  \t\t\t}\n  \t\t}\n  \t\t//最后一个字符计数并显示\n  \t\tmystr.append(last);\n  \t\tmystr.append(count);\n  \t\treturn mystr.toString();\n  \t}\n  ```\n\n  ​\n\n# 感想\n\n作为IT从业者，大部分时间都在写业务逻辑，很多基本功已经近乎荒废了，这是非常不可取的。眼光放长远些，我们的技术不应该局限于某一种语言，而应该把重心放在跨语言的那些通用技术。比如：操作系统、算法和数据结构、网络及设计模式重构思想等，这些东西在任何语言中都会用到而且也会是重点。","source":"_posts/Java字符串压缩去重.md","raw":"---\ntitle: Java字符串压缩去重\ndate: 2017-05-03 17:42:06\ntags: Java\ncategories: Java\n---\n\n# 说在前面的话\n\n去一家公司面试，开始就一道笔试题，做对了就继续，做不对就不用往下面了。内容是读取文件内容并压缩内容去重，压缩去重意思是如果内容为ABBCCCCAA压缩后字符串显示为A1B2C3A2。以此类推。其实这道题不难，但是我脑子转悠慢，读取文件和遍历字符做出来了，但是其余的没有做出了，或者说大概思路对了，但是卡在某一个点。总之有点废物就是了。。\n\n\n\n# 我的做法\n\n```\n\tpublic static String compress(String str){\n\t\tStringBuffer mystr = new StringBuffer();\n\t\t//我这里是从0开始的\n\t\tint count = 0;\n\t\t//而这也是初始为0，这样的设置导致下面判断时候一直\n\t\t//无所适从，对于何时该给count++，\n\t\t//何时该给mystr.append有点混乱\n\t\tchar last = 0;\n\t\tint length = str.length();\n\t\tfor(int i=0;i<length;i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(last!=c){\n\t\t\t\tlast = c;\n\t\t\t\tcount++;\n\t\t\t\tmystr.append(last);\n\t\t\t\tmystr.append(count);\n\t\t\t}else{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn mystr.toString();\n\t}\n```\n\n# 正确地做法\n\n- 直接使用string做法\n\n  ```\n  public String compressBad (String str)  \n  {  \n      String mystr = \" \";  \n      int count = 1;  \n      char last = str.charAt(0);  \n      for (int i = 1; i < str.length(); i++)  \n      {  \n          if (last == str.charAt(i))  \n          {  \n              count++;  \n          }  \n          else  \n          {  \n              mystr += last + count;  \n              last = str.charAt(i);  \n              count = 1;                \n          }  \n      }  \n      return mystr += last + count;  \n  }  \n  ```\n\n  ​\n\n\n\n- 使用StringBuffer\n\n  ```\n  \tpublic static  String compressBetter(String str) {\n  \t\tStringBuffer mystr = new StringBuffer();\n  \t\tint count = 1;\n  \t\t//取出第一个字符作为比较字符\n  \t\tchar last = str.charAt(0);\n  \t\tfor (int i = 1; i < str.length(); i++) {\n  \t\t\t//如果当前字符和之前的字符相同，说明是重复的，\n  \t\t\t//直接在数量值+1；\n  \t\t\tif (last == str.charAt(i)) {\n  \t\t\t\tcount++;\n  \t\t\t} else {\n  \t\t\t\t//如果不相同，说明开始了一个新的字符，\n  \t\t\t\t//这时要做的只有两件事：\n  \t\t\t\t//1、结束上格字符计数并添加字符串，\n  \t\t\t\tmystr.append(last);\n  \t\t\t\tmystr.append(count);\n  \t\t\t\t//2、2、开始新的字符计数\n  \t\t\t\tlast = str.charAt(i);\n  \t\t\t\tcount = 1;\n  \t\t\t}\n  \t\t}\n  \t\t//最后一个字符计数并显示\n  \t\tmystr.append(last);\n  \t\tmystr.append(count);\n  \t\treturn mystr.toString();\n  \t}\n  ```\n\n  ​\n\n# 感想\n\n作为IT从业者，大部分时间都在写业务逻辑，很多基本功已经近乎荒废了，这是非常不可取的。眼光放长远些，我们的技术不应该局限于某一种语言，而应该把重心放在跨语言的那些通用技术。比如：操作系统、算法和数据结构、网络及设计模式重构思想等，这些东西在任何语言中都会用到而且也会是重点。","slug":"Java字符串压缩去重","published":1,"updated":"2017-05-03T10:04:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7lb000w449c9kpgzxdi","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>去一家公司面试，开始就一道笔试题，做对了就继续，做不对就不用往下面了。内容是读取文件内容并压缩内容去重，压缩去重意思是如果内容为ABBCCCCAA压缩后字符串显示为A1B2C3A2。以此类推。其实这道题不难，但是我脑子转悠慢，读取文件和遍历字符做出来了，但是其余的没有做出了，或者说大概思路对了，但是卡在某一个点。总之有点废物就是了。。</p>\n<h1 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static String compress(String str)&#123;</div><div class=\"line\">\tStringBuffer mystr = new StringBuffer();</div><div class=\"line\">\t//我这里是从0开始的</div><div class=\"line\">\tint count = 0;</div><div class=\"line\">\t//而这也是初始为0，这样的设置导致下面判断时候一直</div><div class=\"line\">\t//无所适从，对于何时该给count++，</div><div class=\"line\">\t//何时该给mystr.append有点混乱</div><div class=\"line\">\tchar last = 0;</div><div class=\"line\">\tint length = str.length();</div><div class=\"line\">\tfor(int i=0;i&lt;length;i++)&#123;</div><div class=\"line\">\t\tchar c = str.charAt(i);</div><div class=\"line\">\t\tif(last!=c)&#123;</div><div class=\"line\">\t\t\tlast = c;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t\tmystr.append(last);</div><div class=\"line\">\t\t\tmystr.append(count);</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn mystr.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"正确地做法\"><a href=\"#正确地做法\" class=\"headerlink\" title=\"正确地做法\"></a>正确地做法</h1><ul>\n<li><p>直接使用string做法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String compressBad (String str)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    String mystr = &quot; &quot;;  </div><div class=\"line\">    int count = 1;  </div><div class=\"line\">    char last = str.charAt(0);  </div><div class=\"line\">    for (int i = 1; i &lt; str.length(); i++)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        if (last == str.charAt(i))  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            count++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            mystr += last + count;  </div><div class=\"line\">            last = str.charAt(i);  </div><div class=\"line\">            count = 1;                </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return mystr += last + count;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p>使用StringBuffer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static  String compressBetter(String str) &#123;</div><div class=\"line\">\tStringBuffer mystr = new StringBuffer();</div><div class=\"line\">\tint count = 1;</div><div class=\"line\">\t//取出第一个字符作为比较字符</div><div class=\"line\">\tchar last = str.charAt(0);</div><div class=\"line\">\tfor (int i = 1; i &lt; str.length(); i++) &#123;</div><div class=\"line\">\t\t//如果当前字符和之前的字符相同，说明是重复的，</div><div class=\"line\">\t\t//直接在数量值+1；</div><div class=\"line\">\t\tif (last == str.charAt(i)) &#123;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t//如果不相同，说明开始了一个新的字符，</div><div class=\"line\">\t\t\t//这时要做的只有两件事：</div><div class=\"line\">\t\t\t//1、结束上格字符计数并添加字符串，</div><div class=\"line\">\t\t\tmystr.append(last);</div><div class=\"line\">\t\t\tmystr.append(count);</div><div class=\"line\">\t\t\t//2、2、开始新的字符计数</div><div class=\"line\">\t\t\tlast = str.charAt(i);</div><div class=\"line\">\t\t\tcount = 1;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//最后一个字符计数并显示</div><div class=\"line\">\tmystr.append(last);</div><div class=\"line\">\tmystr.append(count);</div><div class=\"line\">\treturn mystr.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><p>作为IT从业者，大部分时间都在写业务逻辑，很多基本功已经近乎荒废了，这是非常不可取的。眼光放长远些，我们的技术不应该局限于某一种语言，而应该把重心放在跨语言的那些通用技术。比如：操作系统、算法和数据结构、网络及设计模式重构思想等，这些东西在任何语言中都会用到而且也会是重点。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>去一家公司面试，开始就一道笔试题，做对了就继续，做不对就不用往下面了。内容是读取文件内容并压缩内容去重，压缩去重意思是如果内容为ABBCCCCAA压缩后字符串显示为A1B2C3A2。以此类推。其实这道题不难，但是我脑子转悠慢，读取文件和遍历字符做出来了，但是其余的没有做出了，或者说大概思路对了，但是卡在某一个点。总之有点废物就是了。。</p>\n<h1 id=\"我的做法\"><a href=\"#我的做法\" class=\"headerlink\" title=\"我的做法\"></a>我的做法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static String compress(String str)&#123;</div><div class=\"line\">\tStringBuffer mystr = new StringBuffer();</div><div class=\"line\">\t//我这里是从0开始的</div><div class=\"line\">\tint count = 0;</div><div class=\"line\">\t//而这也是初始为0，这样的设置导致下面判断时候一直</div><div class=\"line\">\t//无所适从，对于何时该给count++，</div><div class=\"line\">\t//何时该给mystr.append有点混乱</div><div class=\"line\">\tchar last = 0;</div><div class=\"line\">\tint length = str.length();</div><div class=\"line\">\tfor(int i=0;i&lt;length;i++)&#123;</div><div class=\"line\">\t\tchar c = str.charAt(i);</div><div class=\"line\">\t\tif(last!=c)&#123;</div><div class=\"line\">\t\t\tlast = c;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t\tmystr.append(last);</div><div class=\"line\">\t\t\tmystr.append(count);</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn mystr.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"正确地做法\"><a href=\"#正确地做法\" class=\"headerlink\" title=\"正确地做法\"></a>正确地做法</h1><ul>\n<li><p>直接使用string做法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String compressBad (String str)  </div><div class=\"line\">&#123;  </div><div class=\"line\">    String mystr = &quot; &quot;;  </div><div class=\"line\">    int count = 1;  </div><div class=\"line\">    char last = str.charAt(0);  </div><div class=\"line\">    for (int i = 1; i &lt; str.length(); i++)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        if (last == str.charAt(i))  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            count++;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            mystr += last + count;  </div><div class=\"line\">            last = str.charAt(i);  </div><div class=\"line\">            count = 1;                </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return mystr += last + count;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p>使用StringBuffer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static  String compressBetter(String str) &#123;</div><div class=\"line\">\tStringBuffer mystr = new StringBuffer();</div><div class=\"line\">\tint count = 1;</div><div class=\"line\">\t//取出第一个字符作为比较字符</div><div class=\"line\">\tchar last = str.charAt(0);</div><div class=\"line\">\tfor (int i = 1; i &lt; str.length(); i++) &#123;</div><div class=\"line\">\t\t//如果当前字符和之前的字符相同，说明是重复的，</div><div class=\"line\">\t\t//直接在数量值+1；</div><div class=\"line\">\t\tif (last == str.charAt(i)) &#123;</div><div class=\"line\">\t\t\tcount++;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t//如果不相同，说明开始了一个新的字符，</div><div class=\"line\">\t\t\t//这时要做的只有两件事：</div><div class=\"line\">\t\t\t//1、结束上格字符计数并添加字符串，</div><div class=\"line\">\t\t\tmystr.append(last);</div><div class=\"line\">\t\t\tmystr.append(count);</div><div class=\"line\">\t\t\t//2、2、开始新的字符计数</div><div class=\"line\">\t\t\tlast = str.charAt(i);</div><div class=\"line\">\t\t\tcount = 1;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//最后一个字符计数并显示</div><div class=\"line\">\tmystr.append(last);</div><div class=\"line\">\tmystr.append(count);</div><div class=\"line\">\treturn mystr.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><p>作为IT从业者，大部分时间都在写业务逻辑，很多基本功已经近乎荒废了，这是非常不可取的。眼光放长远些，我们的技术不应该局限于某一种语言，而应该把重心放在跨语言的那些通用技术。比如：操作系统、算法和数据结构、网络及设计模式重构思想等，这些东西在任何语言中都会用到而且也会是重点。</p>\n"},{"title":"Android进程和线程","date":"2017-04-27T12:36:13.000Z","_content":"\n# 进程\n\n一般情况下，进程是应用程序的单元，一个应用对应一个进程同时对应一个主线程。但是通过设置 `android:process`，可以使原本一个应用中的组件运行在多个进程中。\n\n> 如果进程名称设置为“:remote”，那么这个进程的名字是包名+设置的名字，以冒号开头的进程属于私有进程，其他应用的组件不能和它跑在一个进程。如果进程名设置是完整的(\"非冒号开头\")，则属于全局进程，其他应用可以通过shareUID方式和它共享一个进程。\n\n# 进程优先级分类\n\n根据进程的优先级可以分为五级，\n\n- 前台进程\n\n  用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：\n  ​\t托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）\n  ​\t托管某个 Service，后者绑定到用户正在交互的 Activity\n  ​\t托管正在“前台”运行的 Service（服务已调用 startForeground()）\n  ​\t托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）\n  ​\t托管正执行其 onReceive() 方法的 BroadcastReceiver\n  通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。\n\n- 可见进程\n\n  没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：\n  ​\t托管不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。\n  ​\t托管绑定到可见（或前台）Activity 的 Service。\n  可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。\n\n- 服务进程\n\n  正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。\n\n- 后台进程\n\n  包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。 有关保存和恢复状态的信息，请参阅 Activity文档。\n\n- 空进程\n\n  不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。\n\n# 线程\n\n线程可以看作是一个轻量级的进程，在Android中启动应用时系统会为APP创建一个UI线程，Android UI是非线程安全的。\n\n在Android开发中注意两点：\n\n①不能在UI线程以外的其他线程操作UI，否则异常。\n\n②不能阻塞UI线程，否则ANR。\n\n当然在某些特殊条件下，非UI线程操作 UI没有报错，参考我的[[为什么我在工作线程刷新UI没报错？](http://www.jensondev.me/2017/04/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI%E6%B2%A1%E6%8A%A5%E9%94%99/)] 。\n\nAndroid 提供了几种途径来从其他线程访问 UI 线程。 以下列出了几种有用的方法：\n\nActivity.runOnUiThread(Runnable)\nView.post(Runnable)\nView.postDelayed(Runnable, long)\n\n","source":"_posts/Android进程和线程.md","raw":"---\ntitle: Android进程和线程\ndate: 2017-04-27 20:36:13\ntags: Android\ncategories: Android\n---\n\n# 进程\n\n一般情况下，进程是应用程序的单元，一个应用对应一个进程同时对应一个主线程。但是通过设置 `android:process`，可以使原本一个应用中的组件运行在多个进程中。\n\n> 如果进程名称设置为“:remote”，那么这个进程的名字是包名+设置的名字，以冒号开头的进程属于私有进程，其他应用的组件不能和它跑在一个进程。如果进程名设置是完整的(\"非冒号开头\")，则属于全局进程，其他应用可以通过shareUID方式和它共享一个进程。\n\n# 进程优先级分类\n\n根据进程的优先级可以分为五级，\n\n- 前台进程\n\n  用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：\n  ​\t托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）\n  ​\t托管某个 Service，后者绑定到用户正在交互的 Activity\n  ​\t托管正在“前台”运行的 Service（服务已调用 startForeground()）\n  ​\t托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）\n  ​\t托管正执行其 onReceive() 方法的 BroadcastReceiver\n  通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。\n\n- 可见进程\n\n  没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：\n  ​\t托管不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。\n  ​\t托管绑定到可见（或前台）Activity 的 Service。\n  可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。\n\n- 服务进程\n\n  正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。\n\n- 后台进程\n\n  包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。 有关保存和恢复状态的信息，请参阅 Activity文档。\n\n- 空进程\n\n  不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。\n\n# 线程\n\n线程可以看作是一个轻量级的进程，在Android中启动应用时系统会为APP创建一个UI线程，Android UI是非线程安全的。\n\n在Android开发中注意两点：\n\n①不能在UI线程以外的其他线程操作UI，否则异常。\n\n②不能阻塞UI线程，否则ANR。\n\n当然在某些特殊条件下，非UI线程操作 UI没有报错，参考我的[[为什么我在工作线程刷新UI没报错？](http://www.jensondev.me/2017/04/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI%E6%B2%A1%E6%8A%A5%E9%94%99/)] 。\n\nAndroid 提供了几种途径来从其他线程访问 UI 线程。 以下列出了几种有用的方法：\n\nActivity.runOnUiThread(Runnable)\nView.post(Runnable)\nView.postDelayed(Runnable, long)\n\n","slug":"Android进程和线程","published":1,"updated":"2017-04-27T12:59:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7le000z449cn8n0jwtg","content":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>一般情况下，进程是应用程序的单元，一个应用对应一个进程同时对应一个主线程。但是通过设置 <code>android:process</code>，可以使原本一个应用中的组件运行在多个进程中。</p>\n<blockquote>\n<p>如果进程名称设置为“:remote”，那么这个进程的名字是包名+设置的名字，以冒号开头的进程属于私有进程，其他应用的组件不能和它跑在一个进程。如果进程名设置是完整的(“非冒号开头”)，则属于全局进程，其他应用可以通过shareUID方式和它共享一个进程。</p>\n</blockquote>\n<h1 id=\"进程优先级分类\"><a href=\"#进程优先级分类\" class=\"headerlink\" title=\"进程优先级分类\"></a>进程优先级分类</h1><p>根据进程的优先级可以分为五级，</p>\n<ul>\n<li><p>前台进程</p>\n<p>用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：<br>​    托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）<br>​    托管某个 Service，后者绑定到用户正在交互的 Activity<br>​    托管正在“前台”运行的 Service（服务已调用 startForeground()）<br>​    托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）<br>​    托管正执行其 onReceive() 方法的 BroadcastReceiver<br>通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</p>\n</li>\n<li><p>可见进程</p>\n<p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：<br>​    托管不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。<br>​    托管绑定到可见（或前台）Activity 的 Service。<br>可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。</p>\n</li>\n<li><p>服务进程</p>\n<p>正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</p>\n</li>\n<li><p>后台进程</p>\n<p>包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。 有关保存和恢复状态的信息，请参阅 Activity文档。</p>\n</li>\n<li><p>空进程</p>\n<p>不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</p>\n</li>\n</ul>\n<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><p>线程可以看作是一个轻量级的进程，在Android中启动应用时系统会为APP创建一个UI线程，Android UI是非线程安全的。</p>\n<p>在Android开发中注意两点：</p>\n<p>①不能在UI线程以外的其他线程操作UI，否则异常。</p>\n<p>②不能阻塞UI线程，否则ANR。</p>\n<p>当然在某些特殊条件下，非UI线程操作 UI没有报错，参考我的[<a href=\"http://www.jensondev.me/2017/04/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI%E6%B2%A1%E6%8A%A5%E9%94%99/\" target=\"_blank\" rel=\"external\">为什么我在工作线程刷新UI没报错？</a>] 。</p>\n<p>Android 提供了几种途径来从其他线程访问 UI 线程。 以下列出了几种有用的方法：</p>\n<p>Activity.runOnUiThread(Runnable)<br>View.post(Runnable)<br>View.postDelayed(Runnable, long)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>一般情况下，进程是应用程序的单元，一个应用对应一个进程同时对应一个主线程。但是通过设置 <code>android:process</code>，可以使原本一个应用中的组件运行在多个进程中。</p>\n<blockquote>\n<p>如果进程名称设置为“:remote”，那么这个进程的名字是包名+设置的名字，以冒号开头的进程属于私有进程，其他应用的组件不能和它跑在一个进程。如果进程名设置是完整的(“非冒号开头”)，则属于全局进程，其他应用可以通过shareUID方式和它共享一个进程。</p>\n</blockquote>\n<h1 id=\"进程优先级分类\"><a href=\"#进程优先级分类\" class=\"headerlink\" title=\"进程优先级分类\"></a>进程优先级分类</h1><p>根据进程的优先级可以分为五级，</p>\n<ul>\n<li><p>前台进程</p>\n<p>用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：<br>​    托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）<br>​    托管某个 Service，后者绑定到用户正在交互的 Activity<br>​    托管正在“前台”运行的 Service（服务已调用 startForeground()）<br>​    托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）<br>​    托管正执行其 onReceive() 方法的 BroadcastReceiver<br>通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</p>\n</li>\n<li><p>可见进程</p>\n<p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：<br>​    托管不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。<br>​    托管绑定到可见（或前台）Activity 的 Service。<br>可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。</p>\n</li>\n<li><p>服务进程</p>\n<p>正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</p>\n</li>\n<li><p>后台进程</p>\n<p>包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。 有关保存和恢复状态的信息，请参阅 Activity文档。</p>\n</li>\n<li><p>空进程</p>\n<p>不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</p>\n</li>\n</ul>\n<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><p>线程可以看作是一个轻量级的进程，在Android中启动应用时系统会为APP创建一个UI线程，Android UI是非线程安全的。</p>\n<p>在Android开发中注意两点：</p>\n<p>①不能在UI线程以外的其他线程操作UI，否则异常。</p>\n<p>②不能阻塞UI线程，否则ANR。</p>\n<p>当然在某些特殊条件下，非UI线程操作 UI没有报错，参考我的[<a href=\"http://www.jensondev.me/2017/04/21/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%88%B7%E6%96%B0UI%E6%B2%A1%E6%8A%A5%E9%94%99/\">为什么我在工作线程刷新UI没报错？</a>] 。</p>\n<p>Android 提供了几种途径来从其他线程访问 UI 线程。 以下列出了几种有用的方法：</p>\n<p>Activity.runOnUiThread(Runnable)<br>View.post(Runnable)<br>View.postDelayed(Runnable, long)</p>\n"},{"title":"Java知识点","date":"2017-06-30T10:51:23.000Z","_content":"\n# 字符串\n\n1、==对基本数据类型来说比较的是值是否相等，但对于引用类型来说，其和equals医院，比较的都是对象地址，前提是equals没有被重写。\n\n```java\n\t\tString c = \"c\";\n\t\tfinal String c1 = \"c\";\n\t\tString s0 = \"a\" + \"b\" + c1;\n\t\tString s1 = \"a\" + \"b\" + c;\n\t\tString s2 = \"a\" + \"b\" + \"c\";\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s0 == s3);//true\n\t\tSystem.out.println(s1 == s3);//false\n\t\tSystem.out.println(s2 == s3);//true\n```\n\n根据Java编译时优化方案，s2中加号的三个值都为固定常量，所以s2在编译时也被认为是常量，即编译期就确定了s2的值，并且和s3一样，所以打印true\n\n在s1中，a和b的值是常量，但是c属于局部变量，而且也没有谁指定c这个值是不可变的。既然是可变量，导致s1也被编译期认为是不确定值，\n\n接下来s0，a和b不用说了都是常量，而c1虽然和c一样也是局部变量，但是c1有finla修饰，明确告诉编译器明面上我是一个局部变量，但是同时我的值是不可变的，final修饰了，现在不变，将来也不会改变，所以编译器在编译期确定了s0 的值。所以把s0也作为常量和s3一样，都在常量池\n\n***编译器优化要在编译期能确定的值得情况下进行，而能确定值的只能是在常量池中的内容。***\n\n2、string.intern()，当字符串调用这个方法时，都会拿着当前字符串的值去常量池中找，如果找到则返回常量池这个常量地址，否则在常量池创建一个常量并把字符串填进去，然后返回创建的地址。当然这是在JDK1.6情况下，在1.7及以后会有不同\n\n```java\n\t\tString c = \"c\";\n\t\tfinal String c1 = \"c\";\n\t\tString s0 = \"a\" + \"b\" + c1;\n\t\tString s1 = \"a\" + \"b\" + c;\n\t\tString s2 = \"a\" + \"b\" + \"c\";\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s0 == s3);\n\t\tSystem.out.println(s1.intern() == s3);//true\n\t\tSystem.out.println(s2 == s3);\n```\n\n***由于intern()需要去常量池中做字符串比较，而常量池又很可能有多个常量，所以一般来说intern()效率并不高***\n\n\n\n\n\n\n\n","source":"_posts/Java知识点.md","raw":"---\ntitle: Java知识点\ndate: 2017-06-30 18:51:23\ntags: Java\ncategories: Java\n---\n\n# 字符串\n\n1、==对基本数据类型来说比较的是值是否相等，但对于引用类型来说，其和equals医院，比较的都是对象地址，前提是equals没有被重写。\n\n```java\n\t\tString c = \"c\";\n\t\tfinal String c1 = \"c\";\n\t\tString s0 = \"a\" + \"b\" + c1;\n\t\tString s1 = \"a\" + \"b\" + c;\n\t\tString s2 = \"a\" + \"b\" + \"c\";\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s0 == s3);//true\n\t\tSystem.out.println(s1 == s3);//false\n\t\tSystem.out.println(s2 == s3);//true\n```\n\n根据Java编译时优化方案，s2中加号的三个值都为固定常量，所以s2在编译时也被认为是常量，即编译期就确定了s2的值，并且和s3一样，所以打印true\n\n在s1中，a和b的值是常量，但是c属于局部变量，而且也没有谁指定c这个值是不可变的。既然是可变量，导致s1也被编译期认为是不确定值，\n\n接下来s0，a和b不用说了都是常量，而c1虽然和c一样也是局部变量，但是c1有finla修饰，明确告诉编译器明面上我是一个局部变量，但是同时我的值是不可变的，final修饰了，现在不变，将来也不会改变，所以编译器在编译期确定了s0 的值。所以把s0也作为常量和s3一样，都在常量池\n\n***编译器优化要在编译期能确定的值得情况下进行，而能确定值的只能是在常量池中的内容。***\n\n2、string.intern()，当字符串调用这个方法时，都会拿着当前字符串的值去常量池中找，如果找到则返回常量池这个常量地址，否则在常量池创建一个常量并把字符串填进去，然后返回创建的地址。当然这是在JDK1.6情况下，在1.7及以后会有不同\n\n```java\n\t\tString c = \"c\";\n\t\tfinal String c1 = \"c\";\n\t\tString s0 = \"a\" + \"b\" + c1;\n\t\tString s1 = \"a\" + \"b\" + c;\n\t\tString s2 = \"a\" + \"b\" + \"c\";\n\t\tString s3 = \"abc\";\n\t\tSystem.out.println(s0 == s3);\n\t\tSystem.out.println(s1.intern() == s3);//true\n\t\tSystem.out.println(s2 == s3);\n```\n\n***由于intern()需要去常量池中做字符串比较，而常量池又很可能有多个常量，所以一般来说intern()效率并不高***\n\n\n\n\n\n\n\n","slug":"Java知识点","published":1,"updated":"2017-06-30T11:28:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7lh0013449cr35ih9xr","content":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>1、==对基本数据类型来说比较的是值是否相等，但对于引用类型来说，其和equals医院，比较的都是对象地址，前提是equals没有被重写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> String c1 = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s0 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c1;</div><div class=\"line\">String s1 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c;</div><div class=\"line\">String s2 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s3 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">System.out.println(s0 == s3);<span class=\"comment\">//true</span></div><div class=\"line\">System.out.println(s1 == s3);<span class=\"comment\">//false</span></div><div class=\"line\">System.out.println(s2 == s3);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>根据Java编译时优化方案，s2中加号的三个值都为固定常量，所以s2在编译时也被认为是常量，即编译期就确定了s2的值，并且和s3一样，所以打印true</p>\n<p>在s1中，a和b的值是常量，但是c属于局部变量，而且也没有谁指定c这个值是不可变的。既然是可变量，导致s1也被编译期认为是不确定值，</p>\n<p>接下来s0，a和b不用说了都是常量，而c1虽然和c一样也是局部变量，但是c1有finla修饰，明确告诉编译器明面上我是一个局部变量，但是同时我的值是不可变的，final修饰了，现在不变，将来也不会改变，所以编译器在编译期确定了s0 的值。所以把s0也作为常量和s3一样，都在常量池</p>\n<p><strong><em>编译器优化要在编译期能确定的值得情况下进行，而能确定值的只能是在常量池中的内容。</em></strong></p>\n<p>2、string.intern()，当字符串调用这个方法时，都会拿着当前字符串的值去常量池中找，如果找到则返回常量池这个常量地址，否则在常量池创建一个常量并把字符串填进去，然后返回创建的地址。当然这是在JDK1.6情况下，在1.7及以后会有不同</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> String c1 = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s0 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c1;</div><div class=\"line\">String s1 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c;</div><div class=\"line\">String s2 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s3 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">System.out.println(s0 == s3);</div><div class=\"line\">System.out.println(s1.intern() == s3);<span class=\"comment\">//true</span></div><div class=\"line\">System.out.println(s2 == s3);</div></pre></td></tr></table></figure>\n<p><strong><em>由于intern()需要去常量池中做字符串比较，而常量池又很可能有多个常量，所以一般来说intern()效率并不高</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>1、==对基本数据类型来说比较的是值是否相等，但对于引用类型来说，其和equals医院，比较的都是对象地址，前提是equals没有被重写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> String c1 = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s0 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c1;</div><div class=\"line\">String s1 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c;</div><div class=\"line\">String s2 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s3 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">System.out.println(s0 == s3);<span class=\"comment\">//true</span></div><div class=\"line\">System.out.println(s1 == s3);<span class=\"comment\">//false</span></div><div class=\"line\">System.out.println(s2 == s3);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>根据Java编译时优化方案，s2中加号的三个值都为固定常量，所以s2在编译时也被认为是常量，即编译期就确定了s2的值，并且和s3一样，所以打印true</p>\n<p>在s1中，a和b的值是常量，但是c属于局部变量，而且也没有谁指定c这个值是不可变的。既然是可变量，导致s1也被编译期认为是不确定值，</p>\n<p>接下来s0，a和b不用说了都是常量，而c1虽然和c一样也是局部变量，但是c1有finla修饰，明确告诉编译器明面上我是一个局部变量，但是同时我的值是不可变的，final修饰了，现在不变，将来也不会改变，所以编译器在编译期确定了s0 的值。所以把s0也作为常量和s3一样，都在常量池</p>\n<p><strong><em>编译器优化要在编译期能确定的值得情况下进行，而能确定值的只能是在常量池中的内容。</em></strong></p>\n<p>2、string.intern()，当字符串调用这个方法时，都会拿着当前字符串的值去常量池中找，如果找到则返回常量池这个常量地址，否则在常量池创建一个常量并把字符串填进去，然后返回创建的地址。当然这是在JDK1.6情况下，在1.7及以后会有不同</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String c = <span class=\"string\">\"c\"</span>;</div><div class=\"line\"><span class=\"keyword\">final</span> String c1 = <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s0 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c1;</div><div class=\"line\">String s1 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + c;</div><div class=\"line\">String s2 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + <span class=\"string\">\"c\"</span>;</div><div class=\"line\">String s3 = <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">System.out.println(s0 == s3);</div><div class=\"line\">System.out.println(s1.intern() == s3);<span class=\"comment\">//true</span></div><div class=\"line\">System.out.println(s2 == s3);</div></pre></td></tr></table></figure>\n<p><strong><em>由于intern()需要去常量池中做字符串比较，而常量池又很可能有多个常量，所以一般来说intern()效率并不高</em></strong></p>\n"},{"title":"Mac版eclipse中每次重启电脑后字体自动变小","date":"2017-04-22T10:50:50.000Z","_content":"如题每次开机后打开eclipse时，发现上次调好的字体又变小了。每次都这样，比较影响心情。今天决定把这个问题解决掉。\n\b网友的做法是：\n打开 应用程序/Eclipse.app/Contents/Eclipse/eclipse.ini 文件中，\n把文中“-Dorg.eclipse.swt.internal.carbon.smallFonts”删掉。\n这样可以避免Eclipse里面的字体奇怪地自动变小。。\n\n发现很久以前就存在这个问题，不过当时的fix方法和最新的不一样。\n[传送通道](http://t-machine.org/index.php/2011/08/21/fix-eclipses-fonts-on-os-x/)\n\n但是上面的2方法好像对我来说没有效果(我只试了第一种)。后来在偏好设置里发现Theme为mac时使用的是Reduced Palette这个选项，我好奇的把选项改为了Default。然后点了确认再调整好需要的字体并重启。然后真的没有再恢复小字体了。\n\n![屏幕快照 2017-03-08 下午12.04.34.png](http://upload-images.jianshu.io/upload_images/1796052-3ea1ef0bbc0ed211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/Mac版eclipse中每次重启电脑后字体自动变小.md","raw":"---\ntitle: Mac版eclipse中每次重启电脑后字体自动变小\ndate: 2017-04-22 18:50:50\ntags: 工具\ncategories: 工具\n---\n如题每次开机后打开eclipse时，发现上次调好的字体又变小了。每次都这样，比较影响心情。今天决定把这个问题解决掉。\n\b网友的做法是：\n打开 应用程序/Eclipse.app/Contents/Eclipse/eclipse.ini 文件中，\n把文中“-Dorg.eclipse.swt.internal.carbon.smallFonts”删掉。\n这样可以避免Eclipse里面的字体奇怪地自动变小。。\n\n发现很久以前就存在这个问题，不过当时的fix方法和最新的不一样。\n[传送通道](http://t-machine.org/index.php/2011/08/21/fix-eclipses-fonts-on-os-x/)\n\n但是上面的2方法好像对我来说没有效果(我只试了第一种)。后来在偏好设置里发现Theme为mac时使用的是Reduced Palette这个选项，我好奇的把选项改为了Default。然后点了确认再调整好需要的字体并重启。然后真的没有再恢复小字体了。\n\n![屏幕快照 2017-03-08 下午12.04.34.png](http://upload-images.jianshu.io/upload_images/1796052-3ea1ef0bbc0ed211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"Mac版eclipse中每次重启电脑后字体自动变小","published":1,"updated":"2017-04-22T10:44:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7lj0015449cpe83fo40","content":"<p>如题每次开机后打开eclipse时，发现上次调好的字体又变小了。每次都这样，比较影响心情。今天决定把这个问题解决掉。<br>\b网友的做法是：<br>打开 应用程序/Eclipse.app/Contents/Eclipse/eclipse.ini 文件中，<br>把文中“-Dorg.eclipse.swt.internal.carbon.smallFonts”删掉。<br>这样可以避免Eclipse里面的字体奇怪地自动变小。。</p>\n<p>发现很久以前就存在这个问题，不过当时的fix方法和最新的不一样。<br><a href=\"http://t-machine.org/index.php/2011/08/21/fix-eclipses-fonts-on-os-x/\" target=\"_blank\" rel=\"external\">传送通道</a></p>\n<p>但是上面的2方法好像对我来说没有效果(我只试了第一种)。后来在偏好设置里发现Theme为mac时使用的是Reduced Palette这个选项，我好奇的把选项改为了Default。然后点了确认再调整好需要的字体并重启。然后真的没有再恢复小字体了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3ea1ef0bbc0ed211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-08 下午12.04.34.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如题每次开机后打开eclipse时，发现上次调好的字体又变小了。每次都这样，比较影响心情。今天决定把这个问题解决掉。<br>\b网友的做法是：<br>打开 应用程序/Eclipse.app/Contents/Eclipse/eclipse.ini 文件中，<br>把文中“-Dorg.eclipse.swt.internal.carbon.smallFonts”删掉。<br>这样可以避免Eclipse里面的字体奇怪地自动变小。。</p>\n<p>发现很久以前就存在这个问题，不过当时的fix方法和最新的不一样。<br><a href=\"http://t-machine.org/index.php/2011/08/21/fix-eclipses-fonts-on-os-x/\">传送通道</a></p>\n<p>但是上面的2方法好像对我来说没有效果(我只试了第一种)。后来在偏好设置里发现Theme为mac时使用的是Reduced Palette这个选项，我好奇的把选项改为了Default。然后点了确认再调整好需要的字体并重启。然后真的没有再恢复小字体了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3ea1ef0bbc0ed211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-08 下午12.04.34.png\"></p>\n"},{"title":"Python入门系列(0):OSX系统下Python3的配置与安装","date":"2017-04-22T10:55:54.000Z","_content":"# 关于Python默认安装的问题\n在Linux和osx中都默认集成了Python，这时我们要查看集成的版本是不是我们需要的3.x。如果是，那么恭喜你不用往下看了，如果不是请继续。\n如何查看Python版本呢？打开终端输入如下命令即可：\n```\npython --version\n```\n\n![屏幕快照 2017-01-06 下午6.45.53.png](http://upload-images.jianshu.io/upload_images/1796052-8911115b3e35e144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到我的系统默认的版本是2.7.10，看来还是需要安装3.x的。咱门继续\n\n# Python3下载与安装\n\n先附上[python3.6](https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg)下载地址。\n下载完成直接点击安装即可，一直点击继续或者同意操作，直到出现如下界面：\n\n![屏幕快照 2017-01-06 下午6.10.33.png](http://upload-images.jianshu.io/upload_images/1796052-79c9c599a48d6f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n关闭安装窗口，如果此时已经打开了terminal终端需要重新启动，来使刚才的安装生效(*osx下Python安装后不需要配置类似jdk的环境变量*)\n需要注意一点的是 2.x版本使用Python命令，在3.x下需要在后加上3\n\n```\npython3 --version\n```\n\n查看输出结果，发现已经能识别出3.x版本，至此Python3安装完毕。\n\n![屏幕快照 2017-01-06 下午7.01.29.png](http://upload-images.jianshu.io/upload_images/1796052-ec941e46202d0d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/Python入门系列(0) OSX系统下Python3的配置与安装.md","raw":"---\ntitle: Python入门系列(0):OSX系统下Python3的配置与安装\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n# 关于Python默认安装的问题\n在Linux和osx中都默认集成了Python，这时我们要查看集成的版本是不是我们需要的3.x。如果是，那么恭喜你不用往下看了，如果不是请继续。\n如何查看Python版本呢？打开终端输入如下命令即可：\n```\npython --version\n```\n\n![屏幕快照 2017-01-06 下午6.45.53.png](http://upload-images.jianshu.io/upload_images/1796052-8911115b3e35e144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到我的系统默认的版本是2.7.10，看来还是需要安装3.x的。咱门继续\n\n# Python3下载与安装\n\n先附上[python3.6](https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg)下载地址。\n下载完成直接点击安装即可，一直点击继续或者同意操作，直到出现如下界面：\n\n![屏幕快照 2017-01-06 下午6.10.33.png](http://upload-images.jianshu.io/upload_images/1796052-79c9c599a48d6f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n关闭安装窗口，如果此时已经打开了terminal终端需要重新启动，来使刚才的安装生效(*osx下Python安装后不需要配置类似jdk的环境变量*)\n需要注意一点的是 2.x版本使用Python命令，在3.x下需要在后加上3\n\n```\npython3 --version\n```\n\n查看输出结果，发现已经能识别出3.x版本，至此Python3安装完毕。\n\n![屏幕快照 2017-01-06 下午7.01.29.png](http://upload-images.jianshu.io/upload_images/1796052-ec941e46202d0d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"Python入门系列(0) OSX系统下Python3的配置与安装","published":1,"updated":"2017-04-22T12:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ln001a449cto51wr3a","content":"<h1 id=\"关于Python默认安装的问题\"><a href=\"#关于Python默认安装的问题\" class=\"headerlink\" title=\"关于Python默认安装的问题\"></a>关于Python默认安装的问题</h1><p>在Linux和osx中都默认集成了Python，这时我们要查看集成的版本是不是我们需要的3.x。如果是，那么恭喜你不用往下看了，如果不是请继续。<br>如何查看Python版本呢？打开终端输入如下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python --version</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8911115b3e35e144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午6.45.53.png\"></p>\n<p>可以看到我的系统默认的版本是2.7.10，看来还是需要安装3.x的。咱门继续</p>\n<h1 id=\"Python3下载与安装\"><a href=\"#Python3下载与安装\" class=\"headerlink\" title=\"Python3下载与安装\"></a>Python3下载与安装</h1><p>先附上<a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg\" target=\"_blank\" rel=\"external\">python3.6</a>下载地址。<br>下载完成直接点击安装即可，一直点击继续或者同意操作，直到出现如下界面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-79c9c599a48d6f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午6.10.33.png\"></p>\n<p>关闭安装窗口，如果此时已经打开了terminal终端需要重新启动，来使刚才的安装生效(<em>osx下Python安装后不需要配置类似jdk的环境变量</em>)<br>需要注意一点的是 2.x版本使用Python命令，在3.x下需要在后加上3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 --version</div></pre></td></tr></table></figure>\n<p>查看输出结果，发现已经能识别出3.x版本，至此Python3安装完毕。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ec941e46202d0d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午7.01.29.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于Python默认安装的问题\"><a href=\"#关于Python默认安装的问题\" class=\"headerlink\" title=\"关于Python默认安装的问题\"></a>关于Python默认安装的问题</h1><p>在Linux和osx中都默认集成了Python，这时我们要查看集成的版本是不是我们需要的3.x。如果是，那么恭喜你不用往下看了，如果不是请继续。<br>如何查看Python版本呢？打开终端输入如下命令即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python --version</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8911115b3e35e144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午6.45.53.png\"></p>\n<p>可以看到我的系统默认的版本是2.7.10，看来还是需要安装3.x的。咱门继续</p>\n<h1 id=\"Python3下载与安装\"><a href=\"#Python3下载与安装\" class=\"headerlink\" title=\"Python3下载与安装\"></a>Python3下载与安装</h1><p>先附上<a href=\"https://www.python.org/ftp/python/3.6.0/python-3.6.0-macosx10.6.pkg\">python3.6</a>下载地址。<br>下载完成直接点击安装即可，一直点击继续或者同意操作，直到出现如下界面：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-79c9c599a48d6f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午6.10.33.png\"></p>\n<p>关闭安装窗口，如果此时已经打开了terminal终端需要重新启动，来使刚才的安装生效(<em>osx下Python安装后不需要配置类似jdk的环境变量</em>)<br>需要注意一点的是 2.x版本使用Python命令，在3.x下需要在后加上3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3 --version</div></pre></td></tr></table></figure>\n<p>查看输出结果，发现已经能识别出3.x版本，至此Python3安装完毕。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ec941e46202d0d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午7.01.29.png\"></p>\n"},{"title":"Mac下配置adb","date":"2017-07-13T13:10:42.000Z","_content":"\n# 0x00 前言\n\nMac和windows一样，如果要在终端命令行全局使用非系统命令，需要手动把命令环境配置到指定文件中，具体操作就是把命令文件所属路径配置到.bash_profile里面。\n\n# 0x01 分别找到双方路径\n\n## 找到adb\n\n我是通过Android studio中的idk location找到SDK位置`/Users/jenson/Library/Android/sdk` .\n\n\n\n\n\n## 找到.bash_profile\n\n- 使用命令行`cd $home` 进入home路径下，\n\n- 因为mac下以点开头的文件为隐藏文件，所以使用`ls -al` 查看所有文件，查看列表是否有.bash_profile文件，\n\n- 如果没有，使用`touch .bash_profile` 创建，如果有则执行命令`open -e .bash_profile` 使用文本编辑器打开文件，\n\n- 在下面按格式添加SDK路径：\n\n  ```\n  export PATH=/Users/jenson/Library/Android/sdk/platform-tools:$PATH\n  export PATH=/Users/jenson/Library/Android/sdk/tools:$PATH\n  ```\n\n  ​\n\n## open -e .bash_profile提示open命令不存在\n\n通过Finder根据路径找到.bash_profile文件，编辑添加\n\n```\nexport PATH=\"/usr/bin:/bin:/usr/sbin:/sbin\"\nexport PATH=\"/usr/local/bin:/usr/local/sbin:$PATH\"\n```\n\n","source":"_posts/Mac下配置adb.md","raw":"---\ntitle: Mac下配置adb\ndate: 2017-07-13 21:10:42\ntags: Android\ncategories: Android\n---\n\n# 0x00 前言\n\nMac和windows一样，如果要在终端命令行全局使用非系统命令，需要手动把命令环境配置到指定文件中，具体操作就是把命令文件所属路径配置到.bash_profile里面。\n\n# 0x01 分别找到双方路径\n\n## 找到adb\n\n我是通过Android studio中的idk location找到SDK位置`/Users/jenson/Library/Android/sdk` .\n\n\n\n\n\n## 找到.bash_profile\n\n- 使用命令行`cd $home` 进入home路径下，\n\n- 因为mac下以点开头的文件为隐藏文件，所以使用`ls -al` 查看所有文件，查看列表是否有.bash_profile文件，\n\n- 如果没有，使用`touch .bash_profile` 创建，如果有则执行命令`open -e .bash_profile` 使用文本编辑器打开文件，\n\n- 在下面按格式添加SDK路径：\n\n  ```\n  export PATH=/Users/jenson/Library/Android/sdk/platform-tools:$PATH\n  export PATH=/Users/jenson/Library/Android/sdk/tools:$PATH\n  ```\n\n  ​\n\n## open -e .bash_profile提示open命令不存在\n\n通过Finder根据路径找到.bash_profile文件，编辑添加\n\n```\nexport PATH=\"/usr/bin:/bin:/usr/sbin:/sbin\"\nexport PATH=\"/usr/local/bin:/usr/local/sbin:$PATH\"\n```\n\n","slug":"Mac下配置adb","published":1,"updated":"2017-07-13T13:30:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7lr001d449c6inq6sad","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>Mac和windows一样，如果要在终端命令行全局使用非系统命令，需要手动把命令环境配置到指定文件中，具体操作就是把命令文件所属路径配置到.bash_profile里面。</p>\n<h1 id=\"0x01-分别找到双方路径\"><a href=\"#0x01-分别找到双方路径\" class=\"headerlink\" title=\"0x01 分别找到双方路径\"></a>0x01 分别找到双方路径</h1><h2 id=\"找到adb\"><a href=\"#找到adb\" class=\"headerlink\" title=\"找到adb\"></a>找到adb</h2><p>我是通过Android studio中的idk location找到SDK位置<code>/Users/jenson/Library/Android/sdk</code> .</p>\n<h2 id=\"找到-bash-profile\"><a href=\"#找到-bash-profile\" class=\"headerlink\" title=\"找到.bash_profile\"></a>找到.bash_profile</h2><ul>\n<li><p>使用命令行<code>cd $home</code> 进入home路径下，</p>\n</li>\n<li><p>因为mac下以点开头的文件为隐藏文件，所以使用<code>ls -al</code> 查看所有文件，查看列表是否有.bash_profile文件，</p>\n</li>\n<li><p>如果没有，使用<code>touch .bash_profile</code> 创建，如果有则执行命令<code>open -e .bash_profile</code> 使用文本编辑器打开文件，</p>\n</li>\n<li><p>在下面按格式添加SDK路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=/Users/jenson/Library/Android/sdk/platform-tools:$PATH</div><div class=\"line\">export PATH=/Users/jenson/Library/Android/sdk/tools:$PATH</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"open-e-bash-profile提示open命令不存在\"><a href=\"#open-e-bash-profile提示open命令不存在\" class=\"headerlink\" title=\"open -e .bash_profile提示open命令不存在\"></a>open -e .bash_profile提示open命令不存在</h2><p>通过Finder根据路径找到.bash_profile文件，编辑添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=&quot;/usr/bin:/bin:/usr/sbin:/sbin&quot;</div><div class=\"line\">export PATH=&quot;/usr/local/bin:/usr/local/sbin:$PATH&quot;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>Mac和windows一样，如果要在终端命令行全局使用非系统命令，需要手动把命令环境配置到指定文件中，具体操作就是把命令文件所属路径配置到.bash_profile里面。</p>\n<h1 id=\"0x01-分别找到双方路径\"><a href=\"#0x01-分别找到双方路径\" class=\"headerlink\" title=\"0x01 分别找到双方路径\"></a>0x01 分别找到双方路径</h1><h2 id=\"找到adb\"><a href=\"#找到adb\" class=\"headerlink\" title=\"找到adb\"></a>找到adb</h2><p>我是通过Android studio中的idk location找到SDK位置<code>/Users/jenson/Library/Android/sdk</code> .</p>\n<h2 id=\"找到-bash-profile\"><a href=\"#找到-bash-profile\" class=\"headerlink\" title=\"找到.bash_profile\"></a>找到.bash_profile</h2><ul>\n<li><p>使用命令行<code>cd $home</code> 进入home路径下，</p>\n</li>\n<li><p>因为mac下以点开头的文件为隐藏文件，所以使用<code>ls -al</code> 查看所有文件，查看列表是否有.bash_profile文件，</p>\n</li>\n<li><p>如果没有，使用<code>touch .bash_profile</code> 创建，如果有则执行命令<code>open -e .bash_profile</code> 使用文本编辑器打开文件，</p>\n</li>\n<li><p>在下面按格式添加SDK路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=/Users/jenson/Library/Android/sdk/platform-tools:$PATH</div><div class=\"line\">export PATH=/Users/jenson/Library/Android/sdk/tools:$PATH</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"open-e-bash-profile提示open命令不存在\"><a href=\"#open-e-bash-profile提示open命令不存在\" class=\"headerlink\" title=\"open -e .bash_profile提示open命令不存在\"></a>open -e .bash_profile提示open命令不存在</h2><p>通过Finder根据路径找到.bash_profile文件，编辑添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=&quot;/usr/bin:/bin:/usr/sbin:/sbin&quot;</div><div class=\"line\">export PATH=&quot;/usr/local/bin:/usr/local/sbin:$PATH&quot;</div></pre></td></tr></table></figure>\n"},{"title":"Python入门系列(1):如何使用Sublime text开发Python","date":"2017-04-22T10:55:54.000Z","_content":"# 下载并安装Sublime text3\n点击下载[osx版](https://download.sublimetext.com/Sublime%20Text%20Build%203126.dmg)直接安装即可。\n如果需要其他系统版本请移步[这里](http://www.sublimetext.com/3)\n安装完成，在launcher启动Sublime\n\n![屏幕快照 2017-01-06 下午8.32.28.png](http://upload-images.jianshu.io/upload_images/1796052-c2bc5a099511d506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 配置Python3的编译环境\n-  找到Python3的安装路径\n终端中输入命令\n\n``` type -a python3 ```\n\n可以看到结果\n\n![屏幕快照 2017-01-06 下午8.37.07.png](http://upload-images.jianshu.io/upload_images/1796052-01e91620f87d697b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n复制路径```/Library/Frameworks/Python.framework/Versions/3.5/bin/python3```\n\n- 配置Sublime\n  打开Sublime->Tools->build system->new build system \n如下图可以看到列表里面已经有了Python编译环境，但这是针对Python2.x的版本的，需要我们手动添加3.x版本。\n\n![屏幕快照 2017-01-06 下午8.41.06.png](http://upload-images.jianshu.io/upload_images/1796052-8353a6ec526679ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击new build system 后的窗口如下图：\n\n![屏幕快照 2017-01-06 下午8.46.29.png](http://upload-images.jianshu.io/upload_images/1796052-e855b34a3025e14a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将其修改为\n```\n{\n\"cmd\": [\"之前得到的python3路径\",\"-u\",\"$file\"],\n}\n```\n\n然后点击save as保存为```Python3.sublime-build```\n此时再次查看build system列表发现Python3已经出现了，至此Sublime的Python3编译环境已经完成。\n\n![屏幕快照 2017-01-06 下午8.51.22.png](http://upload-images.jianshu.io/upload_images/1796052-81e3e153c615759e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 开始我们的第一个程序hello Python！\n- 新建工作目录\n桌面新建一个名为python_work的文件夹，用来存放python文件\n- 新建文件\n使用Sublime-->new file 新建一个空文件保存到刚才创建的python_work中，命名为hello_python.py 。(*这里命名时加了.py后缀是告诉Sublime说我这个文件是python程序，这样在编写时候会给出关键字的颜色标示，并且 编译时候会使用python编译环境*)\n\n- 打印hello python\n\n```\nprint(\"hello python!\")\n```\n\n编写完代码保存，command+B执行编译\n\n![屏幕快照 2017-01-06 下午9.03.31.png](http://upload-images.jianshu.io/upload_images/1796052-a4f30b1ba7ac0f9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n本节完成。","source":"_posts/Python入门系列(1) 如何使用Sublime text开发Python.md","raw":"---\ntitle: Python入门系列(1):如何使用Sublime text开发Python\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n# 下载并安装Sublime text3\n点击下载[osx版](https://download.sublimetext.com/Sublime%20Text%20Build%203126.dmg)直接安装即可。\n如果需要其他系统版本请移步[这里](http://www.sublimetext.com/3)\n安装完成，在launcher启动Sublime\n\n![屏幕快照 2017-01-06 下午8.32.28.png](http://upload-images.jianshu.io/upload_images/1796052-c2bc5a099511d506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 配置Python3的编译环境\n-  找到Python3的安装路径\n终端中输入命令\n\n``` type -a python3 ```\n\n可以看到结果\n\n![屏幕快照 2017-01-06 下午8.37.07.png](http://upload-images.jianshu.io/upload_images/1796052-01e91620f87d697b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n复制路径```/Library/Frameworks/Python.framework/Versions/3.5/bin/python3```\n\n- 配置Sublime\n  打开Sublime->Tools->build system->new build system \n如下图可以看到列表里面已经有了Python编译环境，但这是针对Python2.x的版本的，需要我们手动添加3.x版本。\n\n![屏幕快照 2017-01-06 下午8.41.06.png](http://upload-images.jianshu.io/upload_images/1796052-8353a6ec526679ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击new build system 后的窗口如下图：\n\n![屏幕快照 2017-01-06 下午8.46.29.png](http://upload-images.jianshu.io/upload_images/1796052-e855b34a3025e14a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将其修改为\n```\n{\n\"cmd\": [\"之前得到的python3路径\",\"-u\",\"$file\"],\n}\n```\n\n然后点击save as保存为```Python3.sublime-build```\n此时再次查看build system列表发现Python3已经出现了，至此Sublime的Python3编译环境已经完成。\n\n![屏幕快照 2017-01-06 下午8.51.22.png](http://upload-images.jianshu.io/upload_images/1796052-81e3e153c615759e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 开始我们的第一个程序hello Python！\n- 新建工作目录\n桌面新建一个名为python_work的文件夹，用来存放python文件\n- 新建文件\n使用Sublime-->new file 新建一个空文件保存到刚才创建的python_work中，命名为hello_python.py 。(*这里命名时加了.py后缀是告诉Sublime说我这个文件是python程序，这样在编写时候会给出关键字的颜色标示，并且 编译时候会使用python编译环境*)\n\n- 打印hello python\n\n```\nprint(\"hello python!\")\n```\n\n编写完代码保存，command+B执行编译\n\n![屏幕快照 2017-01-06 下午9.03.31.png](http://upload-images.jianshu.io/upload_images/1796052-a4f30b1ba7ac0f9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n本节完成。","slug":"Python入门系列(1) 如何使用Sublime text开发Python","published":1,"updated":"2017-04-22T12:01:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7lw001h449chj3esbra","content":"<h1 id=\"下载并安装Sublime-text3\"><a href=\"#下载并安装Sublime-text3\" class=\"headerlink\" title=\"下载并安装Sublime text3\"></a>下载并安装Sublime text3</h1><p>点击下载<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203126.dmg\" target=\"_blank\" rel=\"external\">osx版</a>直接安装即可。<br>如果需要其他系统版本请移步<a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">这里</a><br>安装完成，在launcher启动Sublime</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c2bc5a099511d506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.32.28.png\"></p>\n<h1 id=\"配置Python3的编译环境\"><a href=\"#配置Python3的编译环境\" class=\"headerlink\" title=\"配置Python3的编译环境\"></a>配置Python3的编译环境</h1><ul>\n<li>找到Python3的安装路径<br>终端中输入命令</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>-a python3 ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">可以看到结果</div><div class=\"line\"></div><div class=\"line\">![屏幕快照 2017-01-06 下午8.37.07.png](http://upload-images.jianshu.io/upload_images/1796052-01e91620f87d697b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\">复制路径```/Library/Frameworks/Python.framework/Versions/3.5/bin/python3</div></pre></td></tr></table></figure>\n<ul>\n<li>配置Sublime<br>打开Sublime-&gt;Tools-&gt;build system-&gt;new build system<br>如下图可以看到列表里面已经有了Python编译环境，但这是针对Python2.x的版本的，需要我们手动添加3.x版本。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8353a6ec526679ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.41.06.png\"></p>\n<p>点击new build system 后的窗口如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-e855b34a3025e14a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.46.29.png\"></p>\n<p>将其修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;cmd&quot;: [&quot;之前得到的python3路径&quot;,&quot;-u&quot;,&quot;$file&quot;],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后点击save as保存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时再次查看build system列表发现Python3已经出现了，至此Sublime的Python3编译环境已经完成。</div><div class=\"line\"></div><div class=\"line\">![屏幕快照 2017-01-06 下午8.51.22.png](http://upload-images.jianshu.io/upload_images/1796052-81e3e153c615759e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\"># 开始我们的第一个程序hello Python！</div><div class=\"line\">- 新建工作目录</div><div class=\"line\">桌面新建一个名为python_work的文件夹，用来存放python文件</div><div class=\"line\">- 新建文件</div><div class=\"line\">使用Sublime--&gt;new file 新建一个空文件保存到刚才创建的python_work中，命名为hello_python.py 。(*这里命名时加了.py后缀是告诉Sublime说我这个文件是python程序，这样在编写时候会给出关键字的颜色标示，并且 编译时候会使用python编译环境*)</div><div class=\"line\"></div><div class=\"line\">- 打印hello python</div></pre></td></tr></table></figure></p>\n<p>print(“hello python!”)<br>```</p>\n<p>编写完代码保存，command+B执行编译</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a4f30b1ba7ac0f9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午9.03.31.png\"></p>\n<p>本节完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载并安装Sublime-text3\"><a href=\"#下载并安装Sublime-text3\" class=\"headerlink\" title=\"下载并安装Sublime text3\"></a>下载并安装Sublime text3</h1><p>点击下载<a href=\"https://download.sublimetext.com/Sublime%20Text%20Build%203126.dmg\">osx版</a>直接安装即可。<br>如果需要其他系统版本请移步<a href=\"http://www.sublimetext.com/3\">这里</a><br>安装完成，在launcher启动Sublime</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c2bc5a099511d506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.32.28.png\"></p>\n<h1 id=\"配置Python3的编译环境\"><a href=\"#配置Python3的编译环境\" class=\"headerlink\" title=\"配置Python3的编译环境\"></a>配置Python3的编译环境</h1><ul>\n<li>找到Python3的安装路径<br>终端中输入命令</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>-a python3 ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">可以看到结果</div><div class=\"line\"></div><div class=\"line\">![屏幕快照 2017-01-06 下午8.37.07.png](http://upload-images.jianshu.io/upload_images/1796052-01e91620f87d697b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\">复制路径```/Library/Frameworks/Python.framework/Versions/3.5/bin/python3</div></pre></td></tr></table></figure>\n<ul>\n<li>配置Sublime<br>打开Sublime-&gt;Tools-&gt;build system-&gt;new build system<br>如下图可以看到列表里面已经有了Python编译环境，但这是针对Python2.x的版本的，需要我们手动添加3.x版本。</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8353a6ec526679ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.41.06.png\"></p>\n<p>点击new build system 后的窗口如下图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-e855b34a3025e14a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午8.46.29.png\"></p>\n<p>将其修改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;cmd&quot;: [&quot;之前得到的python3路径&quot;,&quot;-u&quot;,&quot;$file&quot;],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后点击save as保存为<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时再次查看build system列表发现Python3已经出现了，至此Sublime的Python3编译环境已经完成。</div><div class=\"line\"></div><div class=\"line\">![屏幕快照 2017-01-06 下午8.51.22.png](http://upload-images.jianshu.io/upload_images/1796052-81e3e153c615759e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\"></div><div class=\"line\"># 开始我们的第一个程序hello Python！</div><div class=\"line\">- 新建工作目录</div><div class=\"line\">桌面新建一个名为python_work的文件夹，用来存放python文件</div><div class=\"line\">- 新建文件</div><div class=\"line\">使用Sublime--&gt;new file 新建一个空文件保存到刚才创建的python_work中，命名为hello_python.py 。(*这里命名时加了.py后缀是告诉Sublime说我这个文件是python程序，这样在编写时候会给出关键字的颜色标示，并且 编译时候会使用python编译环境*)</div><div class=\"line\"></div><div class=\"line\">- 打印hello python</div></pre></td></tr></table></figure></p>\n<p>print(“hello python!”)<br>```</p>\n<p>编写完代码保存，command+B执行编译</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a4f30b1ba7ac0f9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午9.03.31.png\"></p>\n<p>本节完成。</p>\n"},{"title":"Python入门系列(3):元组、列表和字典","date":"2017-06-26T11:00:58.000Z","_content":"\n# 0x00 前言\n\n​\t上一节说明了Python字符串和简单数据类型的基本用法，因为比较简单，所以没有做太多说明，这一节介绍下列表、元组和字典。之所以把这三个放在同一节讲是因为这三个数据结构有很多相似地方，对比学习让人印象更深。\n\n# 0x01 列表\n\n## 什么是列表？如何表示列表？\n\n​\t列表就是由一组特定顺序的元素组成，使用中括号“[ ]\"来表示，元素之间使用逗号分隔，例如：animal = ['cat', 'dog', 'monkey']\n\n## 访问列表\n\n​\t列表的访问通过索引下标来访问，索引和其他大多数语言一样从0开始。\n\n也就是说访问第一个元素为：animal[0]。而和其他语言不一样的是Python中索引可以为负值，如：animal[-1]实际为最后一个元素，以此类推。\n\n## 列表增加元素\n\n​\t元素的添加分为两种，列表末尾追加和任意位置添加\n\n-   末尾追加\n\n    使用方法append，animal.append(’fox‘)\n\n- 任意位置添加\n\n  使用方法insert，animal.insert(1,'fox')。第一个参数为索引值\n\n## 列表删除元素\n\n元素删除也可以通过四种方式实现：\n\n- 使用del\n\n  如果知道元素所处列表位置，则使用del  animal[ i ]\n\n- 使用pop\n\n  如果只需删除了列表末尾元素，则直接使用animal.pop方法。类似出栈\n\n- 使用pop\n\n  如果要删除任意位置元素，使用animal.pop（i)，参数为索引值\n\n- 使用remove\n\n  如果知道元素值而不知道位置，则使用animal.remove（value），参数为元素值\n\n## 列表修改元素\n\n​\t修改列表元素的语法与访问列表元素的语法类似，如果要进行元素修改只要拿到元素后对其进行从新赋值即可：animal[1] = 'bird'。\n\n## 列表元素遍历\n\n列表遍历使用循环即可。\n\n```python\nfor ani in animal:\n\tprint(ani)\n```\n\n# 0x02 元组\n\n\n元组使用小括号，列表使用方括号。\n元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。\n\n- Python 的元组与列表类似，不同之处在于元组的元素不能修改。\n\n\n- 元组中只包含一个元素时，需要在元素后面添加逗号\n\n  ​\ttup1 = (10,)\n\n- 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组\n\n  ```python\n  cats = ('xm','dm')\n  print(cats)\n  del cats\n  print(cats)#打印异常\n  ```\n\n- 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合\n\n  ```python\n  cats = ('xm', 'dm')\n  cat1 = ('mm',)\n  allCat = cats + cat1\n  print(allCat)#('xm', 'dm', 'mm')\n  ```\n\n  ​\n\n# 0x03 字典\n\n\n\n\n\n ","source":"_posts/Python入门系列-3-元组、列表和字典.md","raw":"---\ntitle: 'Python入门系列(3):元组、列表和字典'\ndate: 2017-06-26 19:00:58\ntags: Python\ncategories: Python\n---\n\n# 0x00 前言\n\n​\t上一节说明了Python字符串和简单数据类型的基本用法，因为比较简单，所以没有做太多说明，这一节介绍下列表、元组和字典。之所以把这三个放在同一节讲是因为这三个数据结构有很多相似地方，对比学习让人印象更深。\n\n# 0x01 列表\n\n## 什么是列表？如何表示列表？\n\n​\t列表就是由一组特定顺序的元素组成，使用中括号“[ ]\"来表示，元素之间使用逗号分隔，例如：animal = ['cat', 'dog', 'monkey']\n\n## 访问列表\n\n​\t列表的访问通过索引下标来访问，索引和其他大多数语言一样从0开始。\n\n也就是说访问第一个元素为：animal[0]。而和其他语言不一样的是Python中索引可以为负值，如：animal[-1]实际为最后一个元素，以此类推。\n\n## 列表增加元素\n\n​\t元素的添加分为两种，列表末尾追加和任意位置添加\n\n-   末尾追加\n\n    使用方法append，animal.append(’fox‘)\n\n- 任意位置添加\n\n  使用方法insert，animal.insert(1,'fox')。第一个参数为索引值\n\n## 列表删除元素\n\n元素删除也可以通过四种方式实现：\n\n- 使用del\n\n  如果知道元素所处列表位置，则使用del  animal[ i ]\n\n- 使用pop\n\n  如果只需删除了列表末尾元素，则直接使用animal.pop方法。类似出栈\n\n- 使用pop\n\n  如果要删除任意位置元素，使用animal.pop（i)，参数为索引值\n\n- 使用remove\n\n  如果知道元素值而不知道位置，则使用animal.remove（value），参数为元素值\n\n## 列表修改元素\n\n​\t修改列表元素的语法与访问列表元素的语法类似，如果要进行元素修改只要拿到元素后对其进行从新赋值即可：animal[1] = 'bird'。\n\n## 列表元素遍历\n\n列表遍历使用循环即可。\n\n```python\nfor ani in animal:\n\tprint(ani)\n```\n\n# 0x02 元组\n\n\n元组使用小括号，列表使用方括号。\n元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。\n\n- Python 的元组与列表类似，不同之处在于元组的元素不能修改。\n\n\n- 元组中只包含一个元素时，需要在元素后面添加逗号\n\n  ​\ttup1 = (10,)\n\n- 元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组\n\n  ```python\n  cats = ('xm','dm')\n  print(cats)\n  del cats\n  print(cats)#打印异常\n  ```\n\n- 元组中的元素值是不允许修改的，但我们可以对元组进行连接组合\n\n  ```python\n  cats = ('xm', 'dm')\n  cat1 = ('mm',)\n  allCat = cats + cat1\n  print(allCat)#('xm', 'dm', 'mm')\n  ```\n\n  ​\n\n# 0x03 字典\n\n\n\n\n\n ","slug":"Python入门系列-3-元组、列表和字典","published":1,"updated":"2017-07-13T17:05:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ly001j449ccswr8id6","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>​    上一节说明了Python字符串和简单数据类型的基本用法，因为比较简单，所以没有做太多说明，这一节介绍下列表、元组和字典。之所以把这三个放在同一节讲是因为这三个数据结构有很多相似地方，对比学习让人印象更深。</p>\n<h1 id=\"0x01-列表\"><a href=\"#0x01-列表\" class=\"headerlink\" title=\"0x01 列表\"></a>0x01 列表</h1><h2 id=\"什么是列表？如何表示列表？\"><a href=\"#什么是列表？如何表示列表？\" class=\"headerlink\" title=\"什么是列表？如何表示列表？\"></a>什么是列表？如何表示列表？</h2><p>​    列表就是由一组特定顺序的元素组成，使用中括号“[ ]”来表示，元素之间使用逗号分隔，例如：animal = [‘cat’, ‘dog’, ‘monkey’]</p>\n<h2 id=\"访问列表\"><a href=\"#访问列表\" class=\"headerlink\" title=\"访问列表\"></a>访问列表</h2><p>​    列表的访问通过索引下标来访问，索引和其他大多数语言一样从0开始。</p>\n<p>也就是说访问第一个元素为：animal[0]。而和其他语言不一样的是Python中索引可以为负值，如：animal[-1]实际为最后一个元素，以此类推。</p>\n<h2 id=\"列表增加元素\"><a href=\"#列表增加元素\" class=\"headerlink\" title=\"列表增加元素\"></a>列表增加元素</h2><p>​    元素的添加分为两种，列表末尾追加和任意位置添加</p>\n<ul>\n<li><p>末尾追加</p>\n<p>使用方法append，animal.append(’fox‘)</p>\n</li>\n<li><p>任意位置添加</p>\n<p>使用方法insert，animal.insert(1,’fox’)。第一个参数为索引值</p>\n</li>\n</ul>\n<h2 id=\"列表删除元素\"><a href=\"#列表删除元素\" class=\"headerlink\" title=\"列表删除元素\"></a>列表删除元素</h2><p>元素删除也可以通过四种方式实现：</p>\n<ul>\n<li><p>使用del</p>\n<p>如果知道元素所处列表位置，则使用del  animal[ i ]</p>\n</li>\n<li><p>使用pop</p>\n<p>如果只需删除了列表末尾元素，则直接使用animal.pop方法。类似出栈</p>\n</li>\n<li><p>使用pop</p>\n<p>如果要删除任意位置元素，使用animal.pop（i)，参数为索引值</p>\n</li>\n<li><p>使用remove</p>\n<p>如果知道元素值而不知道位置，则使用animal.remove（value），参数为元素值</p>\n</li>\n</ul>\n<h2 id=\"列表修改元素\"><a href=\"#列表修改元素\" class=\"headerlink\" title=\"列表修改元素\"></a>列表修改元素</h2><p>​    修改列表元素的语法与访问列表元素的语法类似，如果要进行元素修改只要拿到元素后对其进行从新赋值即可：animal[1] = ‘bird’。</p>\n<h2 id=\"列表元素遍历\"><a href=\"#列表元素遍历\" class=\"headerlink\" title=\"列表元素遍历\"></a>列表元素遍历</h2><p>列表遍历使用循环即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ani <span class=\"keyword\">in</span> animal:</div><div class=\"line\">\tprint(ani)</div></pre></td></tr></table></figure>\n<h1 id=\"0x02-元组\"><a href=\"#0x02-元组\" class=\"headerlink\" title=\"0x02 元组\"></a>0x02 元组</h1><p>元组使用小括号，列表使用方括号。<br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>\n<ul>\n<li>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</li>\n</ul>\n<ul>\n<li><p>元组中只包含一个元素时，需要在元素后面添加逗号</p>\n<p>​    tup1 = (10,)</p>\n</li>\n<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cats = (<span class=\"string\">'xm'</span>,<span class=\"string\">'dm'</span>)</div><div class=\"line\">print(cats)</div><div class=\"line\"><span class=\"keyword\">del</span> cats</div><div class=\"line\">print(cats)<span class=\"comment\">#打印异常</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cats = (<span class=\"string\">'xm'</span>, <span class=\"string\">'dm'</span>)</div><div class=\"line\">cat1 = (<span class=\"string\">'mm'</span>,)</div><div class=\"line\">allCat = cats + cat1</div><div class=\"line\">print(allCat)<span class=\"comment\">#('xm', 'dm', 'mm')</span></div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"0x03-字典\"><a href=\"#0x03-字典\" class=\"headerlink\" title=\"0x03 字典\"></a>0x03 字典</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>​    上一节说明了Python字符串和简单数据类型的基本用法，因为比较简单，所以没有做太多说明，这一节介绍下列表、元组和字典。之所以把这三个放在同一节讲是因为这三个数据结构有很多相似地方，对比学习让人印象更深。</p>\n<h1 id=\"0x01-列表\"><a href=\"#0x01-列表\" class=\"headerlink\" title=\"0x01 列表\"></a>0x01 列表</h1><h2 id=\"什么是列表？如何表示列表？\"><a href=\"#什么是列表？如何表示列表？\" class=\"headerlink\" title=\"什么是列表？如何表示列表？\"></a>什么是列表？如何表示列表？</h2><p>​    列表就是由一组特定顺序的元素组成，使用中括号“[ ]”来表示，元素之间使用逗号分隔，例如：animal = [‘cat’, ‘dog’, ‘monkey’]</p>\n<h2 id=\"访问列表\"><a href=\"#访问列表\" class=\"headerlink\" title=\"访问列表\"></a>访问列表</h2><p>​    列表的访问通过索引下标来访问，索引和其他大多数语言一样从0开始。</p>\n<p>也就是说访问第一个元素为：animal[0]。而和其他语言不一样的是Python中索引可以为负值，如：animal[-1]实际为最后一个元素，以此类推。</p>\n<h2 id=\"列表增加元素\"><a href=\"#列表增加元素\" class=\"headerlink\" title=\"列表增加元素\"></a>列表增加元素</h2><p>​    元素的添加分为两种，列表末尾追加和任意位置添加</p>\n<ul>\n<li><p>末尾追加</p>\n<p>使用方法append，animal.append(’fox‘)</p>\n</li>\n<li><p>任意位置添加</p>\n<p>使用方法insert，animal.insert(1,’fox’)。第一个参数为索引值</p>\n</li>\n</ul>\n<h2 id=\"列表删除元素\"><a href=\"#列表删除元素\" class=\"headerlink\" title=\"列表删除元素\"></a>列表删除元素</h2><p>元素删除也可以通过四种方式实现：</p>\n<ul>\n<li><p>使用del</p>\n<p>如果知道元素所处列表位置，则使用del  animal[ i ]</p>\n</li>\n<li><p>使用pop</p>\n<p>如果只需删除了列表末尾元素，则直接使用animal.pop方法。类似出栈</p>\n</li>\n<li><p>使用pop</p>\n<p>如果要删除任意位置元素，使用animal.pop（i)，参数为索引值</p>\n</li>\n<li><p>使用remove</p>\n<p>如果知道元素值而不知道位置，则使用animal.remove（value），参数为元素值</p>\n</li>\n</ul>\n<h2 id=\"列表修改元素\"><a href=\"#列表修改元素\" class=\"headerlink\" title=\"列表修改元素\"></a>列表修改元素</h2><p>​    修改列表元素的语法与访问列表元素的语法类似，如果要进行元素修改只要拿到元素后对其进行从新赋值即可：animal[1] = ‘bird’。</p>\n<h2 id=\"列表元素遍历\"><a href=\"#列表元素遍历\" class=\"headerlink\" title=\"列表元素遍历\"></a>列表元素遍历</h2><p>列表遍历使用循环即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ani <span class=\"keyword\">in</span> animal:</div><div class=\"line\">\tprint(ani)</div></pre></td></tr></table></figure>\n<h1 id=\"0x02-元组\"><a href=\"#0x02-元组\" class=\"headerlink\" title=\"0x02 元组\"></a>0x02 元组</h1><p>元组使用小括号，列表使用方括号。<br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p>\n<ul>\n<li>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</li>\n</ul>\n<ul>\n<li><p>元组中只包含一个元素时，需要在元素后面添加逗号</p>\n<p>​    tup1 = (10,)</p>\n</li>\n<li><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cats = (<span class=\"string\">'xm'</span>,<span class=\"string\">'dm'</span>)</div><div class=\"line\">print(cats)</div><div class=\"line\"><span class=\"keyword\">del</span> cats</div><div class=\"line\">print(cats)<span class=\"comment\">#打印异常</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cats = (<span class=\"string\">'xm'</span>, <span class=\"string\">'dm'</span>)</div><div class=\"line\">cat1 = (<span class=\"string\">'mm'</span>,)</div><div class=\"line\">allCat = cats + cat1</div><div class=\"line\">print(allCat)<span class=\"comment\">#('xm', 'dm', 'mm')</span></div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"0x03-字典\"><a href=\"#0x03-字典\" class=\"headerlink\" title=\"0x03 字典\"></a>0x03 字典</h1>"},{"title":"Python入门系列(2):字符串、变量和简单数据类型的上手","date":"2017-04-22T10:55:54.000Z","_content":"\n# 说在前面的话\n\njava在声明变量时都要先指定数据类型 比如 int a=3 ; Stringt name = \"jenson\";\n但是在python中可以直接使用变量\npython中的注释使用\"#\"\n\n# 字符串的使用\n\n- 直接声明变量\n\n```\nprint(\"jenson\")\nname =\"jenson\"\nprint(name)\n```\n\n打印如下\n\n```\njenson\njenson\n[Finished in 0.0s]\n```\n- 字符串拼接直接使用+号\n\n```\nprint(\"hello jenson\")\nname = \"hello\"+ \" jenson\"\nprint(name)\n```\n\n打印结果一样一样的\n\n```\nhello jenson\nhello jenson\n[Finished in 0.0s]\n```\n\n- 去除字符串的空白\n\n```\nname = \"   jenson   \"\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n```\n\n结果如下\n\n![屏幕快照 2017-01-06 下午10.01.19.png](http://upload-images.jianshu.io/upload_images/1796052-c10ea4a7be3c8130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里去除的空白分别是左边、右边和两边的空白，并不能去除中间空白\n- 字符串的大小写\n\n```\nsay = \"hello jenson\"\nprint(say)\nprint(say.upper())\nprint(say.lower())\nprint(say.title())\n```\n\n结果如下：\n\n```\nhello jenson\nHELLO JENSON\nhello jenson\nHello Jenson\n[Finished in 0.0s]\n```\n\n可见三个函数的作用分别是使字符串大写、小写、单词首字母大写。\n- 基本类型和运算\n\n```\nprint(3+5)\nprint(10-2)\nprint(2*4)\nprint(16/2)\nprint(2+3*4)\nprint(2**3)\n```\n\n输出如下：\n\n```\n8\n8\n8\n8.0\n14\n8\n[Finished in 0.2s]\n\n```\n可以看出python对四则运算支持优先级，注意一下*这里的幂用2个乘号表示*\n- 基本类型转为字符串\n基本类型和字符串混合使用时注意把基本类型先转换为字符串，使用str(基本类型值)，否则会引发异常。\n```\nage = 25;\nprint(str(age))\nsay = \"I'am \"+age \nprint(say)\n```\n\n```\n25\nTraceback (most recent call last):\n  File \"/Users/jenson/Desktop/python_work/str_text.py\", line 15, in <module>\n    say = \"I'am \"+age \nTypeError: Can't convert 'int' object to str implicitly\n[Finished in 0.0s with exit code 1]\n[cmd: ['/Library/Frameworks/Python.framework/Versions/3.5/bin/python3', '-u', '/Users/jenson/Desktop/python_work/str_text.py']]\n[dir: /Users/jenson/Desktop/python_work]\n[path: /usr/bin:/bin:/usr/sbin:/sbin]\n```\n\n第一个print已经打印，第二个却报了异常，因为没有转换。\n\n- python2和python3整数除法比较\n\n在python2下做除法运算3/2，得到结果是1 ，并不是1.5\n\n![屏幕快照 2017-01-06 下午10.34.19.png](http://upload-images.jianshu.io/upload_images/1796052-92eac21fee40ffd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n而在python3下是正常的\n\n![屏幕快照 2017-01-06 下午10.35.27.png](http://upload-images.jianshu.io/upload_images/1796052-4b8c5bd6f9354a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是因为python2中计算整数结果时不是采取四舍五入，而是将整数部分直接删除，所以在python2中如果要避免这种情况，要确保至少有一个操作数为浮点数，这样得到的结果也为浮点数\n\n完毕。","source":"_posts/Python入门系列(2) 字符串、变量和简单数据类型的上手.md","raw":"---\ntitle: Python入门系列(2):字符串、变量和简单数据类型的上手\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n\n# 说在前面的话\n\njava在声明变量时都要先指定数据类型 比如 int a=3 ; Stringt name = \"jenson\";\n但是在python中可以直接使用变量\npython中的注释使用\"#\"\n\n# 字符串的使用\n\n- 直接声明变量\n\n```\nprint(\"jenson\")\nname =\"jenson\"\nprint(name)\n```\n\n打印如下\n\n```\njenson\njenson\n[Finished in 0.0s]\n```\n- 字符串拼接直接使用+号\n\n```\nprint(\"hello jenson\")\nname = \"hello\"+ \" jenson\"\nprint(name)\n```\n\n打印结果一样一样的\n\n```\nhello jenson\nhello jenson\n[Finished in 0.0s]\n```\n\n- 去除字符串的空白\n\n```\nname = \"   jenson   \"\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n```\n\n结果如下\n\n![屏幕快照 2017-01-06 下午10.01.19.png](http://upload-images.jianshu.io/upload_images/1796052-c10ea4a7be3c8130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里去除的空白分别是左边、右边和两边的空白，并不能去除中间空白\n- 字符串的大小写\n\n```\nsay = \"hello jenson\"\nprint(say)\nprint(say.upper())\nprint(say.lower())\nprint(say.title())\n```\n\n结果如下：\n\n```\nhello jenson\nHELLO JENSON\nhello jenson\nHello Jenson\n[Finished in 0.0s]\n```\n\n可见三个函数的作用分别是使字符串大写、小写、单词首字母大写。\n- 基本类型和运算\n\n```\nprint(3+5)\nprint(10-2)\nprint(2*4)\nprint(16/2)\nprint(2+3*4)\nprint(2**3)\n```\n\n输出如下：\n\n```\n8\n8\n8\n8.0\n14\n8\n[Finished in 0.2s]\n\n```\n可以看出python对四则运算支持优先级，注意一下*这里的幂用2个乘号表示*\n- 基本类型转为字符串\n基本类型和字符串混合使用时注意把基本类型先转换为字符串，使用str(基本类型值)，否则会引发异常。\n```\nage = 25;\nprint(str(age))\nsay = \"I'am \"+age \nprint(say)\n```\n\n```\n25\nTraceback (most recent call last):\n  File \"/Users/jenson/Desktop/python_work/str_text.py\", line 15, in <module>\n    say = \"I'am \"+age \nTypeError: Can't convert 'int' object to str implicitly\n[Finished in 0.0s with exit code 1]\n[cmd: ['/Library/Frameworks/Python.framework/Versions/3.5/bin/python3', '-u', '/Users/jenson/Desktop/python_work/str_text.py']]\n[dir: /Users/jenson/Desktop/python_work]\n[path: /usr/bin:/bin:/usr/sbin:/sbin]\n```\n\n第一个print已经打印，第二个却报了异常，因为没有转换。\n\n- python2和python3整数除法比较\n\n在python2下做除法运算3/2，得到结果是1 ，并不是1.5\n\n![屏幕快照 2017-01-06 下午10.34.19.png](http://upload-images.jianshu.io/upload_images/1796052-92eac21fee40ffd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n而在python3下是正常的\n\n![屏幕快照 2017-01-06 下午10.35.27.png](http://upload-images.jianshu.io/upload_images/1796052-4b8c5bd6f9354a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是因为python2中计算整数结果时不是采取四舍五入，而是将整数部分直接删除，所以在python2中如果要避免这种情况，要确保至少有一个操作数为浮点数，这样得到的结果也为浮点数\n\n完毕。","slug":"Python入门系列(2) 字符串、变量和简单数据类型的上手","published":1,"updated":"2017-04-22T12:02:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7m3001o449c3ejimv5l","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>java在声明变量时都要先指定数据类型 比如 int a=3 ; Stringt name = “jenson”;<br>但是在python中可以直接使用变量<br>python中的注释使用”#”</p>\n<h1 id=\"字符串的使用\"><a href=\"#字符串的使用\" class=\"headerlink\" title=\"字符串的使用\"></a>字符串的使用</h1><ul>\n<li>直接声明变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(&quot;jenson&quot;)</div><div class=\"line\">name =&quot;jenson&quot;</div><div class=\"line\">print(name)</div></pre></td></tr></table></figure>\n<p>打印如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jenson</div><div class=\"line\">jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<ul>\n<li>字符串拼接直接使用+号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(&quot;hello jenson&quot;)</div><div class=\"line\">name = &quot;hello&quot;+ &quot; jenson&quot;</div><div class=\"line\">print(name)</div></pre></td></tr></table></figure>\n<p>打印结果一样一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello jenson</div><div class=\"line\">hello jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<ul>\n<li>去除字符串的空白</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;   jenson   &quot;</div><div class=\"line\">print(name.lstrip())</div><div class=\"line\">print(name.rstrip())</div><div class=\"line\">print(name.strip())</div></pre></td></tr></table></figure>\n<p>结果如下</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c10ea4a7be3c8130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.01.19.png\"></p>\n<p>这里去除的空白分别是左边、右边和两边的空白，并不能去除中间空白</p>\n<ul>\n<li>字符串的大小写</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">say = &quot;hello jenson&quot;</div><div class=\"line\">print(say)</div><div class=\"line\">print(say.upper())</div><div class=\"line\">print(say.lower())</div><div class=\"line\">print(say.title())</div></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello jenson</div><div class=\"line\">HELLO JENSON</div><div class=\"line\">hello jenson</div><div class=\"line\">Hello Jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<p>可见三个函数的作用分别是使字符串大写、小写、单词首字母大写。</p>\n<ul>\n<li>基本类型和运算</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(3+5)</div><div class=\"line\">print(10-2)</div><div class=\"line\">print(2*4)</div><div class=\"line\">print(16/2)</div><div class=\"line\">print(2+3*4)</div><div class=\"line\">print(2**3)</div></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">8</div><div class=\"line\">8</div><div class=\"line\">8</div><div class=\"line\">8.0</div><div class=\"line\">14</div><div class=\"line\">8</div><div class=\"line\">[Finished in 0.2s]</div></pre></td></tr></table></figure>\n<p>可以看出python对四则运算支持优先级，注意一下<em>这里的幂用2个乘号表示</em></p>\n<ul>\n<li>基本类型转为字符串<br>基本类型和字符串混合使用时注意把基本类型先转换为字符串，使用str(基本类型值)，否则会引发异常。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">age = 25;</div><div class=\"line\">print(str(age))</div><div class=\"line\">say = &quot;I&apos;am &quot;+age </div><div class=\"line\">print(say)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">25</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File &quot;/Users/jenson/Desktop/python_work/str_text.py&quot;, line 15, in &lt;module&gt;</div><div class=\"line\">    say = &quot;I&apos;am &quot;+age </div><div class=\"line\">TypeError: Can&apos;t convert &apos;int&apos; object to str implicitly</div><div class=\"line\">[Finished in 0.0s with exit code 1]</div><div class=\"line\">[cmd: [&apos;/Library/Frameworks/Python.framework/Versions/3.5/bin/python3&apos;, &apos;-u&apos;, &apos;/Users/jenson/Desktop/python_work/str_text.py&apos;]]</div><div class=\"line\">[dir: /Users/jenson/Desktop/python_work]</div><div class=\"line\">[path: /usr/bin:/bin:/usr/sbin:/sbin]</div></pre></td></tr></table></figure>\n<p>第一个print已经打印，第二个却报了异常，因为没有转换。</p>\n<ul>\n<li>python2和python3整数除法比较</li>\n</ul>\n<p>在python2下做除法运算3/2，得到结果是1 ，并不是1.5</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-92eac21fee40ffd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.34.19.png\"></p>\n<p>而在python3下是正常的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-4b8c5bd6f9354a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.35.27.png\"></p>\n<p>这是因为python2中计算整数结果时不是采取四舍五入，而是将整数部分直接删除，所以在python2中如果要避免这种情况，要确保至少有一个操作数为浮点数，这样得到的结果也为浮点数</p>\n<p>完毕。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>java在声明变量时都要先指定数据类型 比如 int a=3 ; Stringt name = “jenson”;<br>但是在python中可以直接使用变量<br>python中的注释使用”#”</p>\n<h1 id=\"字符串的使用\"><a href=\"#字符串的使用\" class=\"headerlink\" title=\"字符串的使用\"></a>字符串的使用</h1><ul>\n<li>直接声明变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(&quot;jenson&quot;)</div><div class=\"line\">name =&quot;jenson&quot;</div><div class=\"line\">print(name)</div></pre></td></tr></table></figure>\n<p>打印如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jenson</div><div class=\"line\">jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<ul>\n<li>字符串拼接直接使用+号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(&quot;hello jenson&quot;)</div><div class=\"line\">name = &quot;hello&quot;+ &quot; jenson&quot;</div><div class=\"line\">print(name)</div></pre></td></tr></table></figure>\n<p>打印结果一样一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello jenson</div><div class=\"line\">hello jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<ul>\n<li>去除字符串的空白</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &quot;   jenson   &quot;</div><div class=\"line\">print(name.lstrip())</div><div class=\"line\">print(name.rstrip())</div><div class=\"line\">print(name.strip())</div></pre></td></tr></table></figure>\n<p>结果如下</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-c10ea4a7be3c8130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.01.19.png\"></p>\n<p>这里去除的空白分别是左边、右边和两边的空白，并不能去除中间空白</p>\n<ul>\n<li>字符串的大小写</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">say = &quot;hello jenson&quot;</div><div class=\"line\">print(say)</div><div class=\"line\">print(say.upper())</div><div class=\"line\">print(say.lower())</div><div class=\"line\">print(say.title())</div></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello jenson</div><div class=\"line\">HELLO JENSON</div><div class=\"line\">hello jenson</div><div class=\"line\">Hello Jenson</div><div class=\"line\">[Finished in 0.0s]</div></pre></td></tr></table></figure>\n<p>可见三个函数的作用分别是使字符串大写、小写、单词首字母大写。</p>\n<ul>\n<li>基本类型和运算</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(3+5)</div><div class=\"line\">print(10-2)</div><div class=\"line\">print(2*4)</div><div class=\"line\">print(16/2)</div><div class=\"line\">print(2+3*4)</div><div class=\"line\">print(2**3)</div></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">8</div><div class=\"line\">8</div><div class=\"line\">8</div><div class=\"line\">8.0</div><div class=\"line\">14</div><div class=\"line\">8</div><div class=\"line\">[Finished in 0.2s]</div></pre></td></tr></table></figure>\n<p>可以看出python对四则运算支持优先级，注意一下<em>这里的幂用2个乘号表示</em></p>\n<ul>\n<li>基本类型转为字符串<br>基本类型和字符串混合使用时注意把基本类型先转换为字符串，使用str(基本类型值)，否则会引发异常。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">age = 25;</div><div class=\"line\">print(str(age))</div><div class=\"line\">say = &quot;I&apos;am &quot;+age </div><div class=\"line\">print(say)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">25</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File &quot;/Users/jenson/Desktop/python_work/str_text.py&quot;, line 15, in &lt;module&gt;</div><div class=\"line\">    say = &quot;I&apos;am &quot;+age </div><div class=\"line\">TypeError: Can&apos;t convert &apos;int&apos; object to str implicitly</div><div class=\"line\">[Finished in 0.0s with exit code 1]</div><div class=\"line\">[cmd: [&apos;/Library/Frameworks/Python.framework/Versions/3.5/bin/python3&apos;, &apos;-u&apos;, &apos;/Users/jenson/Desktop/python_work/str_text.py&apos;]]</div><div class=\"line\">[dir: /Users/jenson/Desktop/python_work]</div><div class=\"line\">[path: /usr/bin:/bin:/usr/sbin:/sbin]</div></pre></td></tr></table></figure>\n<p>第一个print已经打印，第二个却报了异常，因为没有转换。</p>\n<ul>\n<li>python2和python3整数除法比较</li>\n</ul>\n<p>在python2下做除法运算3/2，得到结果是1 ，并不是1.5</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-92eac21fee40ffd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.34.19.png\"></p>\n<p>而在python3下是正常的</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-4b8c5bd6f9354a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-06 下午10.35.27.png\"></p>\n<p>这是因为python2中计算整数结果时不是采取四舍五入，而是将整数部分直接删除，所以在python2中如果要避免这种情况，要确保至少有一个操作数为浮点数，这样得到的结果也为浮点数</p>\n<p>完毕。</p>\n"},{"title":"Android网络框架okhttp执行流程分析","date":"2017-05-09T16:58:46.000Z","_content":"\n# 说在前面的话\n\nAndroid开发中，网络框架okhttp可以说是越来越风光，Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp，能够被谷歌认可，足见okhttp的强大之处了。既如此还有什么理由不去深入理解下它呢？很惭愧，这么好的东西以前一直处于简单调用，今天有时间把流程看了一下，简单总结了下执行请求时的大概流程作为备忘。\n\n\n\n# 执行流程\n\n![流程](Android网络框架执行流程分析/流程.png)\n\n\n\n","source":"_posts/Android网络框架执行流程分析.md","raw":"---\ntitle: Android网络框架okhttp执行流程分析\ndate: 2017-05-10 00:58:46\ntags: Android\ncategories: Android\n---\n\n# 说在前面的话\n\nAndroid开发中，网络框架okhttp可以说是越来越风光，Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp，能够被谷歌认可，足见okhttp的强大之处了。既如此还有什么理由不去深入理解下它呢？很惭愧，这么好的东西以前一直处于简单调用，今天有时间把流程看了一下，简单总结了下执行请求时的大概流程作为备忘。\n\n\n\n# 执行流程\n\n![流程](Android网络框架执行流程分析/流程.png)\n\n\n\n","slug":"Android网络框架执行流程分析","published":1,"updated":"2017-05-09T17:10:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7m7001r449cks38pf4k","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>Android开发中，网络框架okhttp可以说是越来越风光，Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp，能够被谷歌认可，足见okhttp的强大之处了。既如此还有什么理由不去深入理解下它呢？很惭愧，这么好的东西以前一直处于简单调用，今天有时间把流程看了一下，简单总结了下执行请求时的大概流程作为备忘。</p>\n<h1 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h1><p><img src=\"/2017/05/10/Android网络框架执行流程分析/流程.png\" alt=\"流程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>Android开发中，网络框架okhttp可以说是越来越风光，Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp，能够被谷歌认可，足见okhttp的强大之处了。既如此还有什么理由不去深入理解下它呢？很惭愧，这么好的东西以前一直处于简单调用，今天有时间把流程看了一下，简单总结了下执行请求时的大概流程作为备忘。</p>\n<h1 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h1><p><img src=\"/2017/05/10/Android网络框架执行流程分析/流程.png\" alt=\"流程\"></p>\n"},{"title":"UML--类图详解","date":"2017-04-21T13:22:50.000Z","_content":"类图是面向对象系统建模中很常用也很重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口间关系的一种模型。\n类之间的关系主要有泛化、实现、聚合、组合、依赖、关联6种关系。\n\n# 泛化关系(generalization)\n\numl中的泛化关系也就是继承关系。继承关系的2个类可以使用 is-a来表示。继承关系使用实线空心箭头来表示，箭头从子类指向父类。\n\n![屏幕快照 2017-03-02 下午3.39.00.png](http://upload-images.jianshu.io/upload_images/1796052-be6493449edd5912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nPS：泛化关系中的父类为非抽象类,泛化关系为面向对象中耦合度最大的一种关系\n\n#  实现关系(Realization)\n\n实现关系使用空心三角箭头的虚线表示，箭头从实现类指向接口。\n\n![屏幕快照 2017-03-02 下午3.51.25.png](http://upload-images.jianshu.io/upload_images/1796052-92a163450b82adc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不知道为什么在我的osx版的startuml中实现关系只是一条线，不晓得是不是bug\n\n# 聚合关系(Aggregation)\n\n聚合关系表示has-a的关系，是一种不稳定的包含关系。较强于一般关联,有整体与局部的关系,如果没有了整体,局部仍然可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。在类图使用空心的菱形的实线表示，菱形从局部指向整体。\n\n![屏幕快照 2017-03-02 下午3.56.37.png](http://upload-images.jianshu.io/upload_images/1796052-3018f76e4b869260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 组合关系(Composition)\n\n组合关系表示contains-a的关系，是一种强烈的包含关系。组合类负责被组合类的生命周期。是一种更强的聚合关系。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了。在类图使用实心菱形的实线表示，菱形从局部指向整体。\n\n![屏幕快照 2017-03-02 下午3.59.43.png](http://upload-images.jianshu.io/upload_images/1796052-cf5edcf29e224e3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 依赖关系(Dependency)\n\n依赖关系是对象关系最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用带箭头的虚线表示，箭头从使用类指向被依赖的类。\n\n![屏幕快照 2017-03-02 下午4.03.48.png](http://upload-images.jianshu.io/upload_images/1796052-77d40f8a95f1f73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 关联关系(Association)\n\n关联关系是对象之间一种引用关系，比如吃饭时\b客户与餐具类之间的关系。这种关系通常使用类的属性表达。关联又分为一般关联、聚合关联与组合关联。在类图使用带箭头的实线表示，箭头从使用类指向被关联的类。可以是单向和双向。\n\n![屏幕快照 2017-03-02 下午4.43.15.png](http://upload-images.jianshu.io/upload_images/1796052-78619e44991e9581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 聚合和组合如何区别？\n\n直白点的理解就是聚合关系的两个类，局部类的生命周期不受整体类的影响，能够剥离整体单独存在。\n而组合关系的两个类，局部类的生命周期受限于整体类，整体类不存在时，局部类也将消亡。\n举个栗子：\n学生去学校上学被分配到x年级：\n其中学生和学校属于聚合关系，学生可以脱离学校独立存在，县里学校不好可以去市里学校。而学校和班级是组合关系，就是说班级存在的前提是要有个学校。\n\n![屏幕快照 2017-03-02 下午4.31.06.png](http://upload-images.jianshu.io/upload_images/1796052-a3572272c2413345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/UML--类图详解.md","raw":"---\ntitle: UML--类图详解\ndate: 2017-04-21 21:22:50\ntags: 设计模式\ncategories: 设计模式\n---\n类图是面向对象系统建模中很常用也很重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口间关系的一种模型。\n类之间的关系主要有泛化、实现、聚合、组合、依赖、关联6种关系。\n\n# 泛化关系(generalization)\n\numl中的泛化关系也就是继承关系。继承关系的2个类可以使用 is-a来表示。继承关系使用实线空心箭头来表示，箭头从子类指向父类。\n\n![屏幕快照 2017-03-02 下午3.39.00.png](http://upload-images.jianshu.io/upload_images/1796052-be6493449edd5912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nPS：泛化关系中的父类为非抽象类,泛化关系为面向对象中耦合度最大的一种关系\n\n#  实现关系(Realization)\n\n实现关系使用空心三角箭头的虚线表示，箭头从实现类指向接口。\n\n![屏幕快照 2017-03-02 下午3.51.25.png](http://upload-images.jianshu.io/upload_images/1796052-92a163450b82adc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不知道为什么在我的osx版的startuml中实现关系只是一条线，不晓得是不是bug\n\n# 聚合关系(Aggregation)\n\n聚合关系表示has-a的关系，是一种不稳定的包含关系。较强于一般关联,有整体与局部的关系,如果没有了整体,局部仍然可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。在类图使用空心的菱形的实线表示，菱形从局部指向整体。\n\n![屏幕快照 2017-03-02 下午3.56.37.png](http://upload-images.jianshu.io/upload_images/1796052-3018f76e4b869260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 组合关系(Composition)\n\n组合关系表示contains-a的关系，是一种强烈的包含关系。组合类负责被组合类的生命周期。是一种更强的聚合关系。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了。在类图使用实心菱形的实线表示，菱形从局部指向整体。\n\n![屏幕快照 2017-03-02 下午3.59.43.png](http://upload-images.jianshu.io/upload_images/1796052-cf5edcf29e224e3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 依赖关系(Dependency)\n\n依赖关系是对象关系最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用带箭头的虚线表示，箭头从使用类指向被依赖的类。\n\n![屏幕快照 2017-03-02 下午4.03.48.png](http://upload-images.jianshu.io/upload_images/1796052-77d40f8a95f1f73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 关联关系(Association)\n\n关联关系是对象之间一种引用关系，比如吃饭时\b客户与餐具类之间的关系。这种关系通常使用类的属性表达。关联又分为一般关联、聚合关联与组合关联。在类图使用带箭头的实线表示，箭头从使用类指向被关联的类。可以是单向和双向。\n\n![屏幕快照 2017-03-02 下午4.43.15.png](http://upload-images.jianshu.io/upload_images/1796052-78619e44991e9581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 聚合和组合如何区别？\n\n直白点的理解就是聚合关系的两个类，局部类的生命周期不受整体类的影响，能够剥离整体单独存在。\n而组合关系的两个类，局部类的生命周期受限于整体类，整体类不存在时，局部类也将消亡。\n举个栗子：\n学生去学校上学被分配到x年级：\n其中学生和学校属于聚合关系，学生可以脱离学校独立存在，县里学校不好可以去市里学校。而学校和班级是组合关系，就是说班级存在的前提是要有个学校。\n\n![屏幕快照 2017-03-02 下午4.31.06.png](http://upload-images.jianshu.io/upload_images/1796052-a3572272c2413345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"UML--类图详解","published":1,"updated":"2017-05-10T09:25:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7mc001w449cfcm03c9o","content":"<p>类图是面向对象系统建模中很常用也很重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口间关系的一种模型。<br>类之间的关系主要有泛化、实现、聚合、组合、依赖、关联6种关系。</p>\n<h1 id=\"泛化关系-generalization\"><a href=\"#泛化关系-generalization\" class=\"headerlink\" title=\"泛化关系(generalization)\"></a>泛化关系(generalization)</h1><p>uml中的泛化关系也就是继承关系。继承关系的2个类可以使用 is-a来表示。继承关系使用实线空心箭头来表示，箭头从子类指向父类。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-be6493449edd5912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.39.00.png\"></p>\n<p>PS：泛化关系中的父类为非抽象类,泛化关系为面向对象中耦合度最大的一种关系</p>\n<h1 id=\"实现关系-Realization\"><a href=\"#实现关系-Realization\" class=\"headerlink\" title=\"实现关系(Realization)\"></a>实现关系(Realization)</h1><p>实现关系使用空心三角箭头的虚线表示，箭头从实现类指向接口。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-92a163450b82adc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.51.25.png\"></p>\n<p>不知道为什么在我的osx版的startuml中实现关系只是一条线，不晓得是不是bug</p>\n<h1 id=\"聚合关系-Aggregation\"><a href=\"#聚合关系-Aggregation\" class=\"headerlink\" title=\"聚合关系(Aggregation)\"></a>聚合关系(Aggregation)</h1><p>聚合关系表示has-a的关系，是一种不稳定的包含关系。较强于一般关联,有整体与局部的关系,如果没有了整体,局部仍然可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。在类图使用空心的菱形的实线表示，菱形从局部指向整体。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3018f76e4b869260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.56.37.png\"></p>\n<h1 id=\"组合关系-Composition\"><a href=\"#组合关系-Composition\" class=\"headerlink\" title=\"组合关系(Composition)\"></a>组合关系(Composition)</h1><p>组合关系表示contains-a的关系，是一种强烈的包含关系。组合类负责被组合类的生命周期。是一种更强的聚合关系。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了。在类图使用实心菱形的实线表示，菱形从局部指向整体。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-cf5edcf29e224e3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.59.43.png\"></p>\n<h1 id=\"依赖关系-Dependency\"><a href=\"#依赖关系-Dependency\" class=\"headerlink\" title=\"依赖关系(Dependency)\"></a>依赖关系(Dependency)</h1><p>依赖关系是对象关系最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用带箭头的虚线表示，箭头从使用类指向被依赖的类。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-77d40f8a95f1f73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.03.48.png\"></p>\n<h1 id=\"关联关系-Association\"><a href=\"#关联关系-Association\" class=\"headerlink\" title=\"关联关系(Association)\"></a>关联关系(Association)</h1><p>关联关系是对象之间一种引用关系，比如吃饭时\b客户与餐具类之间的关系。这种关系通常使用类的属性表达。关联又分为一般关联、聚合关联与组合关联。在类图使用带箭头的实线表示，箭头从使用类指向被关联的类。可以是单向和双向。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-78619e44991e9581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.43.15.png\"></p>\n<h1 id=\"聚合和组合如何区别？\"><a href=\"#聚合和组合如何区别？\" class=\"headerlink\" title=\"聚合和组合如何区别？\"></a>聚合和组合如何区别？</h1><p>直白点的理解就是聚合关系的两个类，局部类的生命周期不受整体类的影响，能够剥离整体单独存在。<br>而组合关系的两个类，局部类的生命周期受限于整体类，整体类不存在时，局部类也将消亡。<br>举个栗子：<br>学生去学校上学被分配到x年级：<br>其中学生和学校属于聚合关系，学生可以脱离学校独立存在，县里学校不好可以去市里学校。而学校和班级是组合关系，就是说班级存在的前提是要有个学校。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a3572272c2413345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.31.06.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>类图是面向对象系统建模中很常用也很重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口间关系的一种模型。<br>类之间的关系主要有泛化、实现、聚合、组合、依赖、关联6种关系。</p>\n<h1 id=\"泛化关系-generalization\"><a href=\"#泛化关系-generalization\" class=\"headerlink\" title=\"泛化关系(generalization)\"></a>泛化关系(generalization)</h1><p>uml中的泛化关系也就是继承关系。继承关系的2个类可以使用 is-a来表示。继承关系使用实线空心箭头来表示，箭头从子类指向父类。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-be6493449edd5912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.39.00.png\"></p>\n<p>PS：泛化关系中的父类为非抽象类,泛化关系为面向对象中耦合度最大的一种关系</p>\n<h1 id=\"实现关系-Realization\"><a href=\"#实现关系-Realization\" class=\"headerlink\" title=\"实现关系(Realization)\"></a>实现关系(Realization)</h1><p>实现关系使用空心三角箭头的虚线表示，箭头从实现类指向接口。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-92a163450b82adc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.51.25.png\"></p>\n<p>不知道为什么在我的osx版的startuml中实现关系只是一条线，不晓得是不是bug</p>\n<h1 id=\"聚合关系-Aggregation\"><a href=\"#聚合关系-Aggregation\" class=\"headerlink\" title=\"聚合关系(Aggregation)\"></a>聚合关系(Aggregation)</h1><p>聚合关系表示has-a的关系，是一种不稳定的包含关系。较强于一般关联,有整体与局部的关系,如果没有了整体,局部仍然可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。在类图使用空心的菱形的实线表示，菱形从局部指向整体。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3018f76e4b869260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.56.37.png\"></p>\n<h1 id=\"组合关系-Composition\"><a href=\"#组合关系-Composition\" class=\"headerlink\" title=\"组合关系(Composition)\"></a>组合关系(Composition)</h1><p>组合关系表示contains-a的关系，是一种强烈的包含关系。组合类负责被组合类的生命周期。是一种更强的聚合关系。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了。在类图使用实心菱形的实线表示，菱形从局部指向整体。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-cf5edcf29e224e3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午3.59.43.png\"></p>\n<h1 id=\"依赖关系-Dependency\"><a href=\"#依赖关系-Dependency\" class=\"headerlink\" title=\"依赖关系(Dependency)\"></a>依赖关系(Dependency)</h1><p>依赖关系是对象关系最弱的一种关联方式，是临时性的关联。代码中一般指由局部变量、函数参数、返回值建立的对于其他对象的调用关系。一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。在类图使用带箭头的虚线表示，箭头从使用类指向被依赖的类。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-77d40f8a95f1f73d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.03.48.png\"></p>\n<h1 id=\"关联关系-Association\"><a href=\"#关联关系-Association\" class=\"headerlink\" title=\"关联关系(Association)\"></a>关联关系(Association)</h1><p>关联关系是对象之间一种引用关系，比如吃饭时\b客户与餐具类之间的关系。这种关系通常使用类的属性表达。关联又分为一般关联、聚合关联与组合关联。在类图使用带箭头的实线表示，箭头从使用类指向被关联的类。可以是单向和双向。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-78619e44991e9581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.43.15.png\"></p>\n<h1 id=\"聚合和组合如何区别？\"><a href=\"#聚合和组合如何区别？\" class=\"headerlink\" title=\"聚合和组合如何区别？\"></a>聚合和组合如何区别？</h1><p>直白点的理解就是聚合关系的两个类，局部类的生命周期不受整体类的影响，能够剥离整体单独存在。<br>而组合关系的两个类，局部类的生命周期受限于整体类，整体类不存在时，局部类也将消亡。<br>举个栗子：<br>学生去学校上学被分配到x年级：<br>其中学生和学校属于聚合关系，学生可以脱离学校独立存在，县里学校不好可以去市里学校。而学校和班级是组合关系，就是说班级存在的前提是要有个学校。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a3572272c2413345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-02 下午4.31.06.png\"></p>\n"},{"title":"Android性能优化之UI优化","date":"2017-05-04T04:00:30.000Z","_content":"\n# 为什么要进行UI优化\n\nUI的现实在应用层需要经过测量、布局、绘制三步，每一步都会耗费一定时间，如果UI繁重，导致耗费时间过多造成画面卡顿，造成不好的用户体验。研究显示，0-100ms的延迟会让用户感知到瞬时的卡顿，100-300ms的延迟会让用户感觉迟缓，300-1000ms的延迟让用户感觉“手机卡死了”，1000ms以上的延迟会让用户想要去干别的事情，由此可见有良好的UI优化习惯很重要。\n\n# 优化到什么程度\n\n如今屏幕刷新频率大都是60FPS，就是说每帧绘制只要16ms，即保证你的UI页面在16ms内绘制渲染完成，就会让用户感觉到体验是流畅的，所以我们需要做的就是确保我们的APP页面渲染小于16ms。\n\n# 如何优化\n\n## 布局优化\n\n- 减少xml布局层级\n\n  - Merge的使用\n\n    Merge是合并的意思，使用Merge合并子元素和父View，而Merge本身可以被忽略。使用Merge的场合：\n\n    xml布局中，根元素是FrameLayout时；\n\n    自定义View中，父元素尽量是FrameLayout或者LinearLayout；\n\n    >Merge不能乱用：\n    >\n    >Merge只能用在xml布局根元素；\n    >\n    >使用Merge加载一个布局时，必须制定一个ViewGroup作为其父元素，并且设置attachToRoot参数为True（inflate(int,ViewGroup,boolean)）；\n    >\n    >不能在ViewStub中使用Merge标签，原因就是ViewStub的inflate方法中没有attachToRoot的设置\n\n  - 合理使用RelativeLayout和LinearLayout\n\n    RelativeLayout一定程度上可以减少布局层级，但是其对子View测量次数多于LinearLayout。所以综合考虑：如果层级较多情况下，使用RelativeLayout能减少层级的话，优先使用RelativeLayout以便保持界面扁平化；如果层级相同的情况下优先使用LinearLayout，这样能减少子View多次测量。\n\n- ViewStub提高加载速度\n\n  ViewStub默认不可见不占位置，\n\n  如果在特定情况下才显示某些布局，可以使用ViewStub。\n\n  显示ViewStub有两种方法：ViewStub.inflate()和ViewStub.setVisibility(View.Visible)；\n\n  > 使用ViewStub注意：\n  >\n  > Viewstub只能加载一次，之后该对象引用会被置空；\n  >\n  > Viewstub只能用来加载一个布局文件，而不是某个View\n  >\n  > Viewstub中不能嵌套Merge\n\n- include实现view复用\n\n  对于在多个页面都会使用的公共布局诸如Title栏或导航栏，提取出来通过使用inlucde引入，这样只需要维护一份代码即可。\n\n## 避免过度绘制\n\n- 什么是过度绘制\n\n  过度绘制是说屏幕上某一像素在同一帧时间内被绘制多次。在UI布局中如果不可见的部分UI也在进行绘制，这会导致浪费多余的CPU和GPU资源。\n\n- 引起过度绘制原因\n\n  xml布局中控件重叠且都设置了背景或图片\n\n  自定义View，onDraw方法中同一区域绘制了多次\n\n- 如何避免过度绘制\n\n  - 布局优化\n\n    移除xml中非必须背景，或根据条件设置\n\n    移除window默认背景\n\n    按需设置占位背景图\n\n  - 自定义View优化\n\n    在自定义 V i e w中可以通过 c a n v a s . c l i p R e c t （ ）来帮助系统识别那些可见的区域 。这个方法可以指定一块矩形区域 ，只有在这个区域内才会被绘制 ，其他的区域会被忽视 。 c a n v a s . c l i p R e c t （ ）可以很好地帮助那些有多组重叠组件的自定义 V i e w来控制显示的区域 。 c l i p R e c t方法还可以帮助节约 C P U与 G P U资源 ，在 c l i p R e c t区域之外的绘制指令都不会被执行 ，那些部分内容在矩形区域内的组件 ，仍然会得到绘制 ，并且可以使用 c a n v a s . q u i c k r e j e c t （ ）来判断是否没和某个矩形相交 ，从而跳过那些非矩形区域内的绘制操作 。\n\n\n\n","source":"_posts/Android性能优化之UI优化.md","raw":"---\ntitle: Android性能优化之UI优化\ndate: 2017-05-04 12:00:30\ntags: Android\ncategories: Android\n---\n\n# 为什么要进行UI优化\n\nUI的现实在应用层需要经过测量、布局、绘制三步，每一步都会耗费一定时间，如果UI繁重，导致耗费时间过多造成画面卡顿，造成不好的用户体验。研究显示，0-100ms的延迟会让用户感知到瞬时的卡顿，100-300ms的延迟会让用户感觉迟缓，300-1000ms的延迟让用户感觉“手机卡死了”，1000ms以上的延迟会让用户想要去干别的事情，由此可见有良好的UI优化习惯很重要。\n\n# 优化到什么程度\n\n如今屏幕刷新频率大都是60FPS，就是说每帧绘制只要16ms，即保证你的UI页面在16ms内绘制渲染完成，就会让用户感觉到体验是流畅的，所以我们需要做的就是确保我们的APP页面渲染小于16ms。\n\n# 如何优化\n\n## 布局优化\n\n- 减少xml布局层级\n\n  - Merge的使用\n\n    Merge是合并的意思，使用Merge合并子元素和父View，而Merge本身可以被忽略。使用Merge的场合：\n\n    xml布局中，根元素是FrameLayout时；\n\n    自定义View中，父元素尽量是FrameLayout或者LinearLayout；\n\n    >Merge不能乱用：\n    >\n    >Merge只能用在xml布局根元素；\n    >\n    >使用Merge加载一个布局时，必须制定一个ViewGroup作为其父元素，并且设置attachToRoot参数为True（inflate(int,ViewGroup,boolean)）；\n    >\n    >不能在ViewStub中使用Merge标签，原因就是ViewStub的inflate方法中没有attachToRoot的设置\n\n  - 合理使用RelativeLayout和LinearLayout\n\n    RelativeLayout一定程度上可以减少布局层级，但是其对子View测量次数多于LinearLayout。所以综合考虑：如果层级较多情况下，使用RelativeLayout能减少层级的话，优先使用RelativeLayout以便保持界面扁平化；如果层级相同的情况下优先使用LinearLayout，这样能减少子View多次测量。\n\n- ViewStub提高加载速度\n\n  ViewStub默认不可见不占位置，\n\n  如果在特定情况下才显示某些布局，可以使用ViewStub。\n\n  显示ViewStub有两种方法：ViewStub.inflate()和ViewStub.setVisibility(View.Visible)；\n\n  > 使用ViewStub注意：\n  >\n  > Viewstub只能加载一次，之后该对象引用会被置空；\n  >\n  > Viewstub只能用来加载一个布局文件，而不是某个View\n  >\n  > Viewstub中不能嵌套Merge\n\n- include实现view复用\n\n  对于在多个页面都会使用的公共布局诸如Title栏或导航栏，提取出来通过使用inlucde引入，这样只需要维护一份代码即可。\n\n## 避免过度绘制\n\n- 什么是过度绘制\n\n  过度绘制是说屏幕上某一像素在同一帧时间内被绘制多次。在UI布局中如果不可见的部分UI也在进行绘制，这会导致浪费多余的CPU和GPU资源。\n\n- 引起过度绘制原因\n\n  xml布局中控件重叠且都设置了背景或图片\n\n  自定义View，onDraw方法中同一区域绘制了多次\n\n- 如何避免过度绘制\n\n  - 布局优化\n\n    移除xml中非必须背景，或根据条件设置\n\n    移除window默认背景\n\n    按需设置占位背景图\n\n  - 自定义View优化\n\n    在自定义 V i e w中可以通过 c a n v a s . c l i p R e c t （ ）来帮助系统识别那些可见的区域 。这个方法可以指定一块矩形区域 ，只有在这个区域内才会被绘制 ，其他的区域会被忽视 。 c a n v a s . c l i p R e c t （ ）可以很好地帮助那些有多组重叠组件的自定义 V i e w来控制显示的区域 。 c l i p R e c t方法还可以帮助节约 C P U与 G P U资源 ，在 c l i p R e c t区域之外的绘制指令都不会被执行 ，那些部分内容在矩形区域内的组件 ，仍然会得到绘制 ，并且可以使用 c a n v a s . q u i c k r e j e c t （ ）来判断是否没和某个矩形相交 ，从而跳过那些非矩形区域内的绘制操作 。\n\n\n\n","slug":"Android性能优化之UI优化","published":1,"updated":"2017-05-04T10:23:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7mg001z449c7lo5jbfa","content":"<h1 id=\"为什么要进行UI优化\"><a href=\"#为什么要进行UI优化\" class=\"headerlink\" title=\"为什么要进行UI优化\"></a>为什么要进行UI优化</h1><p>UI的现实在应用层需要经过测量、布局、绘制三步，每一步都会耗费一定时间，如果UI繁重，导致耗费时间过多造成画面卡顿，造成不好的用户体验。研究显示，0-100ms的延迟会让用户感知到瞬时的卡顿，100-300ms的延迟会让用户感觉迟缓，300-1000ms的延迟让用户感觉“手机卡死了”，1000ms以上的延迟会让用户想要去干别的事情，由此可见有良好的UI优化习惯很重要。</p>\n<h1 id=\"优化到什么程度\"><a href=\"#优化到什么程度\" class=\"headerlink\" title=\"优化到什么程度\"></a>优化到什么程度</h1><p>如今屏幕刷新频率大都是60FPS，就是说每帧绘制只要16ms，即保证你的UI页面在16ms内绘制渲染完成，就会让用户感觉到体验是流畅的，所以我们需要做的就是确保我们的APP页面渲染小于16ms。</p>\n<h1 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h1><h2 id=\"布局优化\"><a href=\"#布局优化\" class=\"headerlink\" title=\"布局优化\"></a>布局优化</h2><ul>\n<li><p>减少xml布局层级</p>\n<ul>\n<li><p>Merge的使用</p>\n<p>Merge是合并的意思，使用Merge合并子元素和父View，而Merge本身可以被忽略。使用Merge的场合：</p>\n<p>xml布局中，根元素是FrameLayout时；</p>\n<p>自定义View中，父元素尽量是FrameLayout或者LinearLayout；</p>\n<blockquote>\n<p>Merge不能乱用：</p>\n<p>Merge只能用在xml布局根元素；</p>\n<p>使用Merge加载一个布局时，必须制定一个ViewGroup作为其父元素，并且设置attachToRoot参数为True（inflate(int,ViewGroup,boolean)）；</p>\n<p>不能在ViewStub中使用Merge标签，原因就是ViewStub的inflate方法中没有attachToRoot的设置</p>\n</blockquote>\n</li>\n<li><p>合理使用RelativeLayout和LinearLayout</p>\n<p>RelativeLayout一定程度上可以减少布局层级，但是其对子View测量次数多于LinearLayout。所以综合考虑：如果层级较多情况下，使用RelativeLayout能减少层级的话，优先使用RelativeLayout以便保持界面扁平化；如果层级相同的情况下优先使用LinearLayout，这样能减少子View多次测量。</p>\n</li>\n</ul>\n</li>\n<li><p>ViewStub提高加载速度</p>\n<p>ViewStub默认不可见不占位置，</p>\n<p>如果在特定情况下才显示某些布局，可以使用ViewStub。</p>\n<p>显示ViewStub有两种方法：ViewStub.inflate()和ViewStub.setVisibility(View.Visible)；</p>\n<blockquote>\n<p>使用ViewStub注意：</p>\n<p>Viewstub只能加载一次，之后该对象引用会被置空；</p>\n<p>Viewstub只能用来加载一个布局文件，而不是某个View</p>\n<p>Viewstub中不能嵌套Merge</p>\n</blockquote>\n</li>\n<li><p>include实现view复用</p>\n<p>对于在多个页面都会使用的公共布局诸如Title栏或导航栏，提取出来通过使用inlucde引入，这样只需要维护一份代码即可。</p>\n</li>\n</ul>\n<h2 id=\"避免过度绘制\"><a href=\"#避免过度绘制\" class=\"headerlink\" title=\"避免过度绘制\"></a>避免过度绘制</h2><ul>\n<li><p>什么是过度绘制</p>\n<p>过度绘制是说屏幕上某一像素在同一帧时间内被绘制多次。在UI布局中如果不可见的部分UI也在进行绘制，这会导致浪费多余的CPU和GPU资源。</p>\n</li>\n<li><p>引起过度绘制原因</p>\n<p>xml布局中控件重叠且都设置了背景或图片</p>\n<p>自定义View，onDraw方法中同一区域绘制了多次</p>\n</li>\n<li><p>如何避免过度绘制</p>\n<ul>\n<li><p>布局优化</p>\n<p>移除xml中非必须背景，或根据条件设置</p>\n<p>移除window默认背景</p>\n<p>按需设置占位背景图</p>\n</li>\n<li><p>自定义View优化</p>\n<p>在自定义 V i e w中可以通过 c a n v a s . c l i p R e c t （ ）来帮助系统识别那些可见的区域 。这个方法可以指定一块矩形区域 ，只有在这个区域内才会被绘制 ，其他的区域会被忽视 。 c a n v a s . c l i p R e c t （ ）可以很好地帮助那些有多组重叠组件的自定义 V i e w来控制显示的区域 。 c l i p R e c t方法还可以帮助节约 C P U与 G P U资源 ，在 c l i p R e c t区域之外的绘制指令都不会被执行 ，那些部分内容在矩形区域内的组件 ，仍然会得到绘制 ，并且可以使用 c a n v a s . q u i c k r e j e c t （ ）来判断是否没和某个矩形相交 ，从而跳过那些非矩形区域内的绘制操作 。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么要进行UI优化\"><a href=\"#为什么要进行UI优化\" class=\"headerlink\" title=\"为什么要进行UI优化\"></a>为什么要进行UI优化</h1><p>UI的现实在应用层需要经过测量、布局、绘制三步，每一步都会耗费一定时间，如果UI繁重，导致耗费时间过多造成画面卡顿，造成不好的用户体验。研究显示，0-100ms的延迟会让用户感知到瞬时的卡顿，100-300ms的延迟会让用户感觉迟缓，300-1000ms的延迟让用户感觉“手机卡死了”，1000ms以上的延迟会让用户想要去干别的事情，由此可见有良好的UI优化习惯很重要。</p>\n<h1 id=\"优化到什么程度\"><a href=\"#优化到什么程度\" class=\"headerlink\" title=\"优化到什么程度\"></a>优化到什么程度</h1><p>如今屏幕刷新频率大都是60FPS，就是说每帧绘制只要16ms，即保证你的UI页面在16ms内绘制渲染完成，就会让用户感觉到体验是流畅的，所以我们需要做的就是确保我们的APP页面渲染小于16ms。</p>\n<h1 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h1><h2 id=\"布局优化\"><a href=\"#布局优化\" class=\"headerlink\" title=\"布局优化\"></a>布局优化</h2><ul>\n<li><p>减少xml布局层级</p>\n<ul>\n<li><p>Merge的使用</p>\n<p>Merge是合并的意思，使用Merge合并子元素和父View，而Merge本身可以被忽略。使用Merge的场合：</p>\n<p>xml布局中，根元素是FrameLayout时；</p>\n<p>自定义View中，父元素尽量是FrameLayout或者LinearLayout；</p>\n<blockquote>\n<p>Merge不能乱用：</p>\n<p>Merge只能用在xml布局根元素；</p>\n<p>使用Merge加载一个布局时，必须制定一个ViewGroup作为其父元素，并且设置attachToRoot参数为True（inflate(int,ViewGroup,boolean)）；</p>\n<p>不能在ViewStub中使用Merge标签，原因就是ViewStub的inflate方法中没有attachToRoot的设置</p>\n</blockquote>\n</li>\n<li><p>合理使用RelativeLayout和LinearLayout</p>\n<p>RelativeLayout一定程度上可以减少布局层级，但是其对子View测量次数多于LinearLayout。所以综合考虑：如果层级较多情况下，使用RelativeLayout能减少层级的话，优先使用RelativeLayout以便保持界面扁平化；如果层级相同的情况下优先使用LinearLayout，这样能减少子View多次测量。</p>\n</li>\n</ul>\n</li>\n<li><p>ViewStub提高加载速度</p>\n<p>ViewStub默认不可见不占位置，</p>\n<p>如果在特定情况下才显示某些布局，可以使用ViewStub。</p>\n<p>显示ViewStub有两种方法：ViewStub.inflate()和ViewStub.setVisibility(View.Visible)；</p>\n<blockquote>\n<p>使用ViewStub注意：</p>\n<p>Viewstub只能加载一次，之后该对象引用会被置空；</p>\n<p>Viewstub只能用来加载一个布局文件，而不是某个View</p>\n<p>Viewstub中不能嵌套Merge</p>\n</blockquote>\n</li>\n<li><p>include实现view复用</p>\n<p>对于在多个页面都会使用的公共布局诸如Title栏或导航栏，提取出来通过使用inlucde引入，这样只需要维护一份代码即可。</p>\n</li>\n</ul>\n<h2 id=\"避免过度绘制\"><a href=\"#避免过度绘制\" class=\"headerlink\" title=\"避免过度绘制\"></a>避免过度绘制</h2><ul>\n<li><p>什么是过度绘制</p>\n<p>过度绘制是说屏幕上某一像素在同一帧时间内被绘制多次。在UI布局中如果不可见的部分UI也在进行绘制，这会导致浪费多余的CPU和GPU资源。</p>\n</li>\n<li><p>引起过度绘制原因</p>\n<p>xml布局中控件重叠且都设置了背景或图片</p>\n<p>自定义View，onDraw方法中同一区域绘制了多次</p>\n</li>\n<li><p>如何避免过度绘制</p>\n<ul>\n<li><p>布局优化</p>\n<p>移除xml中非必须背景，或根据条件设置</p>\n<p>移除window默认背景</p>\n<p>按需设置占位背景图</p>\n</li>\n<li><p>自定义View优化</p>\n<p>在自定义 V i e w中可以通过 c a n v a s . c l i p R e c t （ ）来帮助系统识别那些可见的区域 。这个方法可以指定一块矩形区域 ，只有在这个区域内才会被绘制 ，其他的区域会被忽视 。 c a n v a s . c l i p R e c t （ ）可以很好地帮助那些有多组重叠组件的自定义 V i e w来控制显示的区域 。 c l i p R e c t方法还可以帮助节约 C P U与 G P U资源 ，在 c l i p R e c t区域之外的绘制指令都不会被执行 ，那些部分内容在矩形区域内的组件 ，仍然会得到绘制 ，并且可以使用 c a n v a s . q u i c k r e j e c t （ ）来判断是否没和某个矩形相交 ，从而跳过那些非矩形区域内的绘制操作 。</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"osx下pip3安装matplotlib时 The following required packages can not be built freetype","date":"2017-04-22T10:55:54.000Z","_content":"'The following required packages can not be built: * freetype'\n出现这个提示，乍一看以为没有安装freetype的原因，后来找其安装方法。使用brew install freetype  ，有提示already installed。然后又看了很多文章，照着改了很多都没有办法。后来胡乱一通查找看到了这个[问答](http://stackoverflow.com/questions/12363557/matplotlib-install-failure-on-mac-osx-10-8-mountain-lion)\n```\nI think the other answers are on the right track, but I encountered this same problem and can attest that:\nbrew install pkg-config\nbrew install freetype\npip install matplotlib\n```\n上面意思说这哥们遇到过同样的问题，下面的能解决。所以试了下```brew install pkg-config```然后自动安装了，因为freetype已经提示安装了。最后又安装了一次```pip3 install matplotlib```成功了","source":"_posts/osx下pip3安装matplotlib时The following required packages can not be built freetype.md","raw":"---\ntitle: osx下pip3安装matplotlib时 The following required packages can not be built freetype\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n'The following required packages can not be built: * freetype'\n出现这个提示，乍一看以为没有安装freetype的原因，后来找其安装方法。使用brew install freetype  ，有提示already installed。然后又看了很多文章，照着改了很多都没有办法。后来胡乱一通查找看到了这个[问答](http://stackoverflow.com/questions/12363557/matplotlib-install-failure-on-mac-osx-10-8-mountain-lion)\n```\nI think the other answers are on the right track, but I encountered this same problem and can attest that:\nbrew install pkg-config\nbrew install freetype\npip install matplotlib\n```\n上面意思说这哥们遇到过同样的问题，下面的能解决。所以试了下```brew install pkg-config```然后自动安装了，因为freetype已经提示安装了。最后又安装了一次```pip3 install matplotlib```成功了","slug":"osx下pip3安装matplotlib时The following required packages can not be built freetype","published":1,"updated":"2017-04-22T11:16:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7mo0022449ckj23zkih","content":"<p>‘The following required packages can not be built: * freetype’<br>出现这个提示，乍一看以为没有安装freetype的原因，后来找其安装方法。使用brew install freetype  ，有提示already installed。然后又看了很多文章，照着改了很多都没有办法。后来胡乱一通查找看到了这个<a href=\"http://stackoverflow.com/questions/12363557/matplotlib-install-failure-on-mac-osx-10-8-mountain-lion\" target=\"_blank\" rel=\"external\">问答</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">I think the other answers are on the right track, but I encountered this same problem and can attest that:</div><div class=\"line\">brew install pkg-config</div><div class=\"line\">brew install freetype</div><div class=\"line\">pip install matplotlib</div></pre></td></tr></table></figure></p>\n<p>上面意思说这哥们遇到过同样的问题，下面的能解决。所以试了下<code>brew install pkg-config</code>然后自动安装了，因为freetype已经提示安装了。最后又安装了一次<code>pip3 install matplotlib</code>成功了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>‘The following required packages can not be built: * freetype’<br>出现这个提示，乍一看以为没有安装freetype的原因，后来找其安装方法。使用brew install freetype  ，有提示already installed。然后又看了很多文章，照着改了很多都没有办法。后来胡乱一通查找看到了这个<a href=\"http://stackoverflow.com/questions/12363557/matplotlib-install-failure-on-mac-osx-10-8-mountain-lion\">问答</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">I think the other answers are on the right track, but I encountered this same problem and can attest that:</div><div class=\"line\">brew install pkg-config</div><div class=\"line\">brew install freetype</div><div class=\"line\">pip install matplotlib</div></pre></td></tr></table></figure></p>\n<p>上面意思说这哥们遇到过同样的问题，下面的能解决。所以试了下<code>brew install pkg-config</code>然后自动安装了，因为freetype已经提示安装了。最后又安装了一次<code>pip3 install matplotlib</code>成功了</p>\n"},{"title":"osx下如何使用SublimeText阅读Android系统源码","date":"2017-04-22T10:55:54.000Z","_content":"\n>以前用win系统时使用sourceinsight阅读源码方便至极，但是自从换到mac下，尝试了很多方法很多工具，比如understand、比如vscode、比如wine下安装sourceinsight。总是有各种问题，所以这次尝试使用SublimeText\n\n平时使用Sublimetext都是打开单个文件，这次要导入几万个文件，这在一些ide中称为project。同样在Sublime中也是如此。\n\n#### 1. 创建工程\n\n　　Project > Add Folder to Project 选择源码目录即可\n　　这时在\b窗口左边栏中将出现刚刚添加的文件目录，如果还需要添加其他目录，则重复这一操作即可。\n\n#### 2. 保存工程\n\n　　Project > Save Project As\n　　点击保存后Sublime Text将自动生成两个文件：\nproject_name.sumlime-project：包含工程定义，该文件会被记录到版本控制里。\nproject_name.sublim-workspace：包含了用户的工程数据，例如打开的文件和修改等，该文件不会被记录到版本控制里。\n　　在*.sublime-project文件中，你可以定义工程配置。例如你可以定义多个目录路径，或者哪些目录或文件需要排除在外。例如：\n　　以上*.sublime-project文件中定义了两个目录，而“name”标签是该目录在Sublime Text的\b左边栏中显示的名字。通过定义“name”，你可以将一些长路径或者名字很长的目录以更简洁的名称显示在\b左边栏中。\n\n#### 3、添加索引\n\n- 安装Package Control插件\n  1.打开控制台\n       方法1：View->show console \n       方法2：ctrl+~\n    2.输入代码：\n  python2.x代码:\n\n```\nimport urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())  \n```\npython3.x代码：\n\n```\nimport urllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n```\n- 安装CTags\n  - 1. 首先 Preference -> Browser Packages... 查看是否已经安装了CTags Package，如果没有则继续下面步骤\n  - 2. Preference -> Package control, 输入“install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装\n\n   - 3.创建索引\n  \n![屏幕快照 2017-03-22 下午2.55.23.png](http://upload-images.jianshu.io/upload_images/1796052-38f35a1199d9e85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4、异常处理\n\n- 期间出现Package Control:There are no packages available for installation弹窗提示\n选择Preference->Browser Packages打开文件夹后\n删除Package Control目录、删除User目录下相关Package Control名称文件等，再次安装。\n- ctag rebuild时弹窗异常如图：\n\n![屏幕快照 2017-03-22 下午3.01.14.png](http://upload-images.jianshu.io/upload_images/1796052-ad6b9e4b667a7b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是因为我们还没有安装和配置ctags\n下载ctags-5.8.tar.gz解压并编译，依次执行如下命令：\ntar xzvf ctags-5.8.tar.gz\ncd ctags-5.8\n./configure\nmake\nsudo make install\n打开Preference ->Package settings->ctags->settings-user和settings-default\n把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径/usr/local/bin/ctags（可以通过which ctags命令查看ctags路径）\n#### 5、快捷键\n- 修改跳转\n默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：\n Perference->Package Settings->CTags->Mouse Binding Default->复制到Mouse Binding User，把里面的\"ctrl+shift\"，修改为“command”，这样就可以用“command+左键”跳转了：\n\n```\n        Command+P：查找文件\n        Command+R：查找方法\n        Command+左键：文件或函数跳转        \n        Command+右键：返回文件或函数跳转的原始位置\n```\n\n至此Android源码项目创建完成并创建索引，代码跳转也反应迅速。","source":"_posts/osx下如何使用SublimeText阅读Android系统源码.md","raw":"---\ntitle: osx下如何使用SublimeText阅读Android系统源码\ndate: 2017-04-22 18:55:54\ntags: 工具\ncategories: 工具\n---\n\n>以前用win系统时使用sourceinsight阅读源码方便至极，但是自从换到mac下，尝试了很多方法很多工具，比如understand、比如vscode、比如wine下安装sourceinsight。总是有各种问题，所以这次尝试使用SublimeText\n\n平时使用Sublimetext都是打开单个文件，这次要导入几万个文件，这在一些ide中称为project。同样在Sublime中也是如此。\n\n#### 1. 创建工程\n\n　　Project > Add Folder to Project 选择源码目录即可\n　　这时在\b窗口左边栏中将出现刚刚添加的文件目录，如果还需要添加其他目录，则重复这一操作即可。\n\n#### 2. 保存工程\n\n　　Project > Save Project As\n　　点击保存后Sublime Text将自动生成两个文件：\nproject_name.sumlime-project：包含工程定义，该文件会被记录到版本控制里。\nproject_name.sublim-workspace：包含了用户的工程数据，例如打开的文件和修改等，该文件不会被记录到版本控制里。\n　　在*.sublime-project文件中，你可以定义工程配置。例如你可以定义多个目录路径，或者哪些目录或文件需要排除在外。例如：\n　　以上*.sublime-project文件中定义了两个目录，而“name”标签是该目录在Sublime Text的\b左边栏中显示的名字。通过定义“name”，你可以将一些长路径或者名字很长的目录以更简洁的名称显示在\b左边栏中。\n\n#### 3、添加索引\n\n- 安装Package Control插件\n  1.打开控制台\n       方法1：View->show console \n       方法2：ctrl+~\n    2.输入代码：\n  python2.x代码:\n\n```\nimport urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())  \n```\npython3.x代码：\n\n```\nimport urllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n```\n- 安装CTags\n  - 1. 首先 Preference -> Browser Packages... 查看是否已经安装了CTags Package，如果没有则继续下面步骤\n  - 2. Preference -> Package control, 输入“install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装\n\n   - 3.创建索引\n  \n![屏幕快照 2017-03-22 下午2.55.23.png](http://upload-images.jianshu.io/upload_images/1796052-38f35a1199d9e85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 4、异常处理\n\n- 期间出现Package Control:There are no packages available for installation弹窗提示\n选择Preference->Browser Packages打开文件夹后\n删除Package Control目录、删除User目录下相关Package Control名称文件等，再次安装。\n- ctag rebuild时弹窗异常如图：\n\n![屏幕快照 2017-03-22 下午3.01.14.png](http://upload-images.jianshu.io/upload_images/1796052-ad6b9e4b667a7b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是因为我们还没有安装和配置ctags\n下载ctags-5.8.tar.gz解压并编译，依次执行如下命令：\ntar xzvf ctags-5.8.tar.gz\ncd ctags-5.8\n./configure\nmake\nsudo make install\n打开Preference ->Package settings->ctags->settings-user和settings-default\n把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径/usr/local/bin/ctags（可以通过which ctags命令查看ctags路径）\n#### 5、快捷键\n- 修改跳转\n默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：\n Perference->Package Settings->CTags->Mouse Binding Default->复制到Mouse Binding User，把里面的\"ctrl+shift\"，修改为“command”，这样就可以用“command+左键”跳转了：\n\n```\n        Command+P：查找文件\n        Command+R：查找方法\n        Command+左键：文件或函数跳转        \n        Command+右键：返回文件或函数跳转的原始位置\n```\n\n至此Android源码项目创建完成并创建索引，代码跳转也反应迅速。","slug":"osx下如何使用SublimeText阅读Android系统源码","published":1,"updated":"2017-04-22T10:50:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ms0027449c6udngl22","content":"<blockquote>\n<p>以前用win系统时使用sourceinsight阅读源码方便至极，但是自从换到mac下，尝试了很多方法很多工具，比如understand、比如vscode、比如wine下安装sourceinsight。总是有各种问题，所以这次尝试使用SublimeText</p>\n</blockquote>\n<p>平时使用Sublimetext都是打开单个文件，这次要导入几万个文件，这在一些ide中称为project。同样在Sublime中也是如此。</p>\n<h4 id=\"1-创建工程\"><a href=\"#1-创建工程\" class=\"headerlink\" title=\"1. 创建工程\"></a>1. 创建工程</h4><p>　　Project &gt; Add Folder to Project 选择源码目录即可<br>　　这时在\b窗口左边栏中将出现刚刚添加的文件目录，如果还需要添加其他目录，则重复这一操作即可。</p>\n<h4 id=\"2-保存工程\"><a href=\"#2-保存工程\" class=\"headerlink\" title=\"2. 保存工程\"></a>2. 保存工程</h4><p>　　Project &gt; Save Project As<br>　　点击保存后Sublime Text将自动生成两个文件：<br>project_name.sumlime-project：包含工程定义，该文件会被记录到版本控制里。<br>project_name.sublim-workspace：包含了用户的工程数据，例如打开的文件和修改等，该文件不会被记录到版本控制里。<br>　　在<em>.sublime-project文件中，你可以定义工程配置。例如你可以定义多个目录路径，或者哪些目录或文件需要排除在外。例如：<br>　　以上</em>.sublime-project文件中定义了两个目录，而“name”标签是该目录在Sublime Text的\b左边栏中显示的名字。通过定义“name”，你可以将一些长路径或者名字很长的目录以更简洁的名称显示在\b左边栏中。</p>\n<h4 id=\"3、添加索引\"><a href=\"#3、添加索引\" class=\"headerlink\" title=\"3、添加索引\"></a>3、添加索引</h4><ul>\n<li>安装Package Control插件<br>1.打开控制台<pre><code>方法1：View-&gt;show console \n方法2：ctrl+~\n</code></pre>  2.输入代码：<br>python2.x代码:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib2,os;pf=&apos;Package Control.sublime-package&apos;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib2.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure>\n<p>python3.x代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request,os;pf=&apos;Package Control.sublime-package&apos;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib.request.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure>\n<ul>\n<li><p>安装CTags</p>\n<ul>\n<li><ol>\n<li>首先 Preference -&gt; Browser Packages… 查看是否已经安装了CTags Package，如果没有则继续下面步骤</li>\n</ol>\n</li>\n<li><ol>\n<li>Preference -&gt; Package control, 输入“install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装</li>\n</ol>\n<ul>\n<li>3.创建索引</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-38f35a1199d9e85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-22 下午2.55.23.png\"></p>\n<h4 id=\"4、异常处理\"><a href=\"#4、异常处理\" class=\"headerlink\" title=\"4、异常处理\"></a>4、异常处理</h4><ul>\n<li>期间出现Package Control:There are no packages available for installation弹窗提示<br>选择Preference-&gt;Browser Packages打开文件夹后<br>删除Package Control目录、删除User目录下相关Package Control名称文件等，再次安装。</li>\n<li>ctag rebuild时弹窗异常如图：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ad6b9e4b667a7b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-22 下午3.01.14.png\"></p>\n<p>这是因为我们还没有安装和配置ctags<br>下载ctags-5.8.tar.gz解压并编译，依次执行如下命令：<br>tar xzvf ctags-5.8.tar.gz<br>cd ctags-5.8<br>./configure<br>make<br>sudo make install<br>打开Preference -&gt;Package settings-&gt;ctags-&gt;settings-user和settings-default<br>把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径/usr/local/bin/ctags（可以通过which ctags命令查看ctags路径）</p>\n<h4 id=\"5、快捷键\"><a href=\"#5、快捷键\" class=\"headerlink\" title=\"5、快捷键\"></a>5、快捷键</h4><ul>\n<li>修改跳转<br>默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：<br>Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding Default-&gt;复制到Mouse Binding User，把里面的”ctrl+shift”，修改为“command”，这样就可以用“command+左键”跳转了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Command+P：查找文件</div><div class=\"line\">Command+R：查找方法</div><div class=\"line\">Command+左键：文件或函数跳转        </div><div class=\"line\">Command+右键：返回文件或函数跳转的原始位置</div></pre></td></tr></table></figure>\n<p>至此Android源码项目创建完成并创建索引，代码跳转也反应迅速。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>以前用win系统时使用sourceinsight阅读源码方便至极，但是自从换到mac下，尝试了很多方法很多工具，比如understand、比如vscode、比如wine下安装sourceinsight。总是有各种问题，所以这次尝试使用SublimeText</p>\n</blockquote>\n<p>平时使用Sublimetext都是打开单个文件，这次要导入几万个文件，这在一些ide中称为project。同样在Sublime中也是如此。</p>\n<h4 id=\"1-创建工程\"><a href=\"#1-创建工程\" class=\"headerlink\" title=\"1. 创建工程\"></a>1. 创建工程</h4><p>　　Project &gt; Add Folder to Project 选择源码目录即可<br>　　这时在\b窗口左边栏中将出现刚刚添加的文件目录，如果还需要添加其他目录，则重复这一操作即可。</p>\n<h4 id=\"2-保存工程\"><a href=\"#2-保存工程\" class=\"headerlink\" title=\"2. 保存工程\"></a>2. 保存工程</h4><p>　　Project &gt; Save Project As<br>　　点击保存后Sublime Text将自动生成两个文件：<br>project_name.sumlime-project：包含工程定义，该文件会被记录到版本控制里。<br>project_name.sublim-workspace：包含了用户的工程数据，例如打开的文件和修改等，该文件不会被记录到版本控制里。<br>　　在<em>.sublime-project文件中，你可以定义工程配置。例如你可以定义多个目录路径，或者哪些目录或文件需要排除在外。例如：<br>　　以上</em>.sublime-project文件中定义了两个目录，而“name”标签是该目录在Sublime Text的\b左边栏中显示的名字。通过定义“name”，你可以将一些长路径或者名字很长的目录以更简洁的名称显示在\b左边栏中。</p>\n<h4 id=\"3、添加索引\"><a href=\"#3、添加索引\" class=\"headerlink\" title=\"3、添加索引\"></a>3、添加索引</h4><ul>\n<li>安装Package Control插件<br>1.打开控制台<pre><code>方法1：View-&gt;show console \n方法2：ctrl+~\n</code></pre>  2.输入代码：<br>python2.x代码:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib2,os;pf=&apos;Package Control.sublime-package&apos;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib2.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure>\n<p>python3.x代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request,os;pf=&apos;Package Control.sublime-package&apos;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib.request.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure>\n<ul>\n<li><p>安装CTags</p>\n<ul>\n<li><ol>\n<li>首先 Preference -&gt; Browser Packages… 查看是否已经安装了CTags Package，如果没有则继续下面步骤</li>\n</ol>\n</li>\n<li><ol>\n<li>Preference -&gt; Package control, 输入“install package”，它会找出你可以安装的插件，在列表中选择ctag插件进行安装</li>\n</ol>\n<ul>\n<li>3.创建索引</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-38f35a1199d9e85a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-22 下午2.55.23.png\"></p>\n<h4 id=\"4、异常处理\"><a href=\"#4、异常处理\" class=\"headerlink\" title=\"4、异常处理\"></a>4、异常处理</h4><ul>\n<li>期间出现Package Control:There are no packages available for installation弹窗提示<br>选择Preference-&gt;Browser Packages打开文件夹后<br>删除Package Control目录、删除User目录下相关Package Control名称文件等，再次安装。</li>\n<li>ctag rebuild时弹窗异常如图：</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-ad6b9e4b667a7b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-22 下午3.01.14.png\"></p>\n<p>这是因为我们还没有安装和配置ctags<br>下载ctags-5.8.tar.gz解压并编译，依次执行如下命令：<br>tar xzvf ctags-5.8.tar.gz<br>cd ctags-5.8<br>./configure<br>make<br>sudo make install<br>打开Preference -&gt;Package settings-&gt;ctags-&gt;settings-user和settings-default<br>把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径/usr/local/bin/ctags（可以通过which ctags命令查看ctags路径）</p>\n<h4 id=\"5、快捷键\"><a href=\"#5、快捷键\" class=\"headerlink\" title=\"5、快捷键\"></a>5、快捷键</h4><ul>\n<li>修改跳转<br>默认函数跳转：Ctrl+shift+左键; 跳转返回：Ctrl+shift+右键。修改方法：<br>Perference-&gt;Package Settings-&gt;CTags-&gt;Mouse Binding Default-&gt;复制到Mouse Binding User，把里面的”ctrl+shift”，修改为“command”，这样就可以用“command+左键”跳转了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Command+P：查找文件</div><div class=\"line\">Command+R：查找方法</div><div class=\"line\">Command+左键：文件或函数跳转        </div><div class=\"line\">Command+右键：返回文件或函数跳转的原始位置</div></pre></td></tr></table></figure>\n<p>至此Android源码项目创建完成并创建索引，代码跳转也反应迅速。</p>\n"},{"title":"osx如何安装Homrbrew","date":"2017-04-22T10:55:54.000Z","_content":"- 1.homebrew依赖于xcode，所以在终端先执行 ```xcode-select --install``` 期间弹窗一直确定即可，根据网络速度不同，可能稍有延迟\n\n- 2.上一步完成了，终端继续输入\n```ruby -e \"$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)\"```直到看到终端中显示install successful字样\n- 3.执行执行```brew help```看是否有提示\n","source":"_posts/osx如何安装Homrbrew.md","raw":"---\ntitle: osx如何安装Homrbrew\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n- 1.homebrew依赖于xcode，所以在终端先执行 ```xcode-select --install``` 期间弹窗一直确定即可，根据网络速度不同，可能稍有延迟\n\n- 2.上一步完成了，终端继续输入\n```ruby -e \"$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)\"```直到看到终端中显示install successful字样\n- 3.执行执行```brew help```看是否有提示\n","slug":"osx如何安装Homrbrew","published":1,"updated":"2017-04-22T10:56:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7mu002a449cqa8eruxk","content":"<ul>\n<li><p>1.homebrew依赖于xcode，所以在终端先执行 <code>xcode-select --install</code> 期间弹窗一直确定即可，根据网络速度不同，可能稍有延迟</p>\n</li>\n<li><p>2.上一步完成了，终端继续输入<br><code>ruby -e &quot;$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>直到看到终端中显示install successful字样</p>\n</li>\n<li>3.执行执行<code>brew help</code>看是否有提示</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>1.homebrew依赖于xcode，所以在终端先执行 <code>xcode-select --install</code> 期间弹窗一直确定即可，根据网络速度不同，可能稍有延迟</p>\n</li>\n<li><p>2.上一步完成了，终端继续输入<br><code>ruby -e &quot;$(curl -fsSLhttps://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>直到看到终端中显示install successful字样</p>\n</li>\n<li>3.执行执行<code>brew help</code>看是否有提示</li>\n</ul>\n"},{"title":"pycharm黄线问题","date":"2017-04-22T10:55:54.000Z","_content":"如下图打开文件时出现很多黄色波浪警告的线条让人眼花缭乱。\n![屏幕快照 2017-01-08 下午2.29.57.png](http://upload-images.jianshu.io/upload_images/1796052-f36e7a1fd5ffa11e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开pycharm的设置然后找到Editor->Colors & Fonts ->  General.在右边找到警告线类型，点击后会自动选中对应的文本提示。\n![屏幕快照 2017-01-08 下午2.32.01.png](http://upload-images.jianshu.io/upload_images/1796052-a5f70acfb13e6fa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n图中可以看到weak waring 去掉effects的勾选保存即可。搞定！","source":"_posts/pycharm黄线问题.md","raw":"---\ntitle: pycharm黄线问题\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n如下图打开文件时出现很多黄色波浪警告的线条让人眼花缭乱。\n![屏幕快照 2017-01-08 下午2.29.57.png](http://upload-images.jianshu.io/upload_images/1796052-f36e7a1fd5ffa11e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开pycharm的设置然后找到Editor->Colors & Fonts ->  General.在右边找到警告线类型，点击后会自动选中对应的文本提示。\n![屏幕快照 2017-01-08 下午2.32.01.png](http://upload-images.jianshu.io/upload_images/1796052-a5f70acfb13e6fa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n图中可以看到weak waring 去掉effects的勾选保存即可。搞定！","slug":"pycharm黄线问题","published":1,"updated":"2017-04-22T10:55:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7my002f449ctor43qre","content":"<p>如下图打开文件时出现很多黄色波浪警告的线条让人眼花缭乱。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-f36e7a1fd5ffa11e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-08 下午2.29.57.png\"></p>\n<p>打开pycharm的设置然后找到Editor-&gt;Colors &amp; Fonts -&gt;  General.在右边找到警告线类型，点击后会自动选中对应的文本提示。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a5f70acfb13e6fa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-08 下午2.32.01.png\"><br>图中可以看到weak waring 去掉effects的勾选保存即可。搞定！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如下图打开文件时出现很多黄色波浪警告的线条让人眼花缭乱。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-f36e7a1fd5ffa11e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-08 下午2.29.57.png\"></p>\n<p>打开pycharm的设置然后找到Editor-&gt;Colors &amp; Fonts -&gt;  General.在右边找到警告线类型，点击后会自动选中对应的文本提示。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a5f70acfb13e6fa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-08 下午2.32.01.png\"><br>图中可以看到weak waring 去掉effects的勾选保存即可。搞定！</p>\n"},{"title":"为什么我在工作线程刷新UI没报错？","date":"2017-04-21T12:55:54.000Z","_content":"\n>从做Android开发以来就一直被灌输“只能在主线程刷新UI”的思想，但是这两天发现个问题，在onCreate中创建工作线程并刷新UI没有报错。代码是这样的：\n\n```\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n       final TextView tv = (TextView) findViewById(R.id.sample_text);\n       new Thread(new Runnable() {\n           @Override\n           public void run() {\n               tv.setText(\"来自\"+Thread.currentThread().getName()+\"线程的更新\");\n           }\n       }).start();\n    }\n```\n期待已久的crash没有出现，反而页面是这样显示的：\n\n![屏幕快照 2017-03-26 下午7.14.46.png](http://upload-images.jianshu.io/upload_images/1796052-7be6319d0fc94867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n不禁让人陷入深思···\n![思考.jpg](http://upload-images.jianshu.io/upload_images/1796052-8a0ce88639c31d1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一步，分析问题原因。以前工作线程刷新UI会出现异常并提示只能在UI线程刷新UI。所以假设有个地方(函数)会在刷新UI前判断当前线程是不是主线程，那么现在问题就是验证下是否真的存在这么个地方。问题是从setText引起的，那就从这里出发看看。\n点进去看下发现又调用了其重载函数：\n```\n    @android.view.RemotableViewMethod\n    public final void setText(CharSequence text) {\n        setText(text, mBufferType);\n    }\n```\n继续深入发现这个方法代码挺多的，但是不用过于关注细节，粗略浏览下不难发现前面大部分代码大多是对text文本格式的一些处理判断，无关刷新UI，直到            checkForRelayout()方法执行，从名字看是“从新布局”，根据view绘制流程测量、布局、绘制，那布局完了不是就绘制刷新了吗？所以决定去checkForRelayout方法看看。\n\n```\n    private void setText(CharSequence text, BufferType type,\n                         boolean notifyBefore, int oldlen) {\n        if (text == null) {\n            text = \"\";\n        }\n\n        // If suggestions are not enabled, remove the suggestion spans from the text\n        if (!isSuggestionsEnabled()) {\n            text = removeSuggestionSpans(text);\n        }\n\n        if (!mUserSetTextScaleX) mTextPaint.setTextScaleX(1.0f);\n\n        if (text instanceof Spanned &&\n            ((Spanned) text).getSpanStart(TextUtils.TruncateAt.MARQUEE) >= 0) {\n            if (ViewConfiguration.get(mContext).isFadingMarqueeEnabled()) {\n                setHorizontalFadingEdgeEnabled(true);\n                mMarqueeFadeMode = MARQUEE_FADE_NORMAL;\n            } else {\n                setHorizontalFadingEdgeEnabled(false);\n                mMarqueeFadeMode = MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS;\n            }\n            setEllipsize(TextUtils.TruncateAt.MARQUEE);\n        }\n\n        int n = mFilters.length;\n        for (int i = 0; i < n; i++) {\n            CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);\n            if (out != null) {\n                text = out;\n            }\n        }\n\n        if (notifyBefore) {\n            if (mText != null) {\n                oldlen = mText.length();\n                sendBeforeTextChanged(mText, 0, oldlen, text.length());\n            } else {\n                sendBeforeTextChanged(\"\", 0, 0, text.length());\n            }\n        }\n\n        boolean needEditableForNotification = false;\n\n        if (mListeners != null && mListeners.size() != 0) {\n            needEditableForNotification = true;\n        }\n\n        if (type == BufferType.EDITABLE || getKeyListener() != null ||\n                needEditableForNotification) {\n            createEditorIfNeeded();\n            Editable t = mEditableFactory.newEditable(text);\n            text = t;\n            setFilters(t, mFilters);\n            InputMethodManager imm = InputMethodManager.peekInstance();\n            if (imm != null) imm.restartInput(this);\n        } else if (type == BufferType.SPANNABLE || mMovement != null) {\n            text = mSpannableFactory.newSpannable(text);\n        } else if (!(text instanceof CharWrapper)) {\n            text = TextUtils.stringOrSpannedString(text);\n        }\n\n        if (mAutoLinkMask != 0) {\n            Spannable s2;\n\n            if (type == BufferType.EDITABLE || text instanceof Spannable) {\n                s2 = (Spannable) text;\n            } else {\n                s2 = mSpannableFactory.newSpannable(text);\n            }\n\n            if (Linkify.addLinks(s2, mAutoLinkMask)) {\n                text = s2;\n                type = (type == BufferType.EDITABLE) ? BufferType.EDITABLE : BufferType.SPANNABLE;\n\n                /*\n                 * We must go ahead and set the text before changing the\n                 * movement method, because setMovementMethod() may call\n                 * setText() again to try to upgrade the buffer type.\n                 */\n                mText = text;\n\n                // Do not change the movement method for text that support text selection as it\n                // would prevent an arbitrary cursor displacement.\n                if (mLinksClickable && !textCanBeSelected()) {\n                    setMovementMethod(LinkMovementMethod.getInstance());\n                }\n            }\n        }\n\n        mBufferType = type;\n        mText = text;\n\n        if (mTransformation == null) {\n            mTransformed = text;\n        } else {\n            mTransformed = mTransformation.getTransformation(text, this);\n        }\n\n        final int textLength = text.length();\n\n        if (text instanceof Spannable && !mAllowTransformationLengthChange) {\n            Spannable sp = (Spannable) text;\n\n            // Remove any ChangeWatchers that might have come from other TextViews.\n            final ChangeWatcher[] watchers = sp.getSpans(0, sp.length(), ChangeWatcher.class);\n            final int count = watchers.length;\n            for (int i = 0; i < count; i++) {\n                sp.removeSpan(watchers[i]);\n            }\n\n            if (mChangeWatcher == null) mChangeWatcher = new ChangeWatcher();\n\n            sp.setSpan(mChangeWatcher, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE |\n                       (CHANGE_WATCHER_PRIORITY << Spanned.SPAN_PRIORITY_SHIFT));\n\n            if (mEditor != null) mEditor.addSpanWatchers(sp);\n\n            if (mTransformation != null) {\n                sp.setSpan(mTransformation, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n            }\n\n            if (mMovement != null) {\n                mMovement.initialize(this, (Spannable) text);\n\n                /*\n                 * Initializing the movement method will have set the\n                 * selection, so reset mSelectionMoved to keep that from\n                 * interfering with the normal on-focus selection-setting.\n                 */\n                if (mEditor != null) mEditor.mSelectionMoved = false;\n            }\n        }\n\n        if (mLayout != null) {\n            checkForRelayout();\n        }\n\n        sendOnTextChanged(text, 0, oldlen, textLength);\n        onTextChanged(text, 0, oldlen, textLength);\n\n        notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT);\n\n        if (needEditableForNotification) {\n            sendAfterTextChanged((Editable) text);\n        }\n\n        // SelectionModifierCursorController depends on textCanBeSelected, which depends on text\n        if (mEditor != null) mEditor.prepareCursorControllers();\n    }\n```\n\n找到checkForRelayout方法查看：\n\n```\n    private void checkForRelayout() {\n        // If we have a fixed width, we can just swap in a new text layout\n        // if the text height stays the same or if the view height is fixed.\n\n        if ((mLayoutParams.width != LayoutParams.WRAP_CONTENT ||\n                (mMaxWidthMode == mMinWidthMode && mMaxWidth == mMinWidth)) &&\n                (mHint == null || mHintLayout != null) &&\n                (mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight() > 0)) {\n            // Static width, so try making a new text layout.\n\n            int oldht = mLayout.getHeight();\n            int want = mLayout.getWidth();\n            int hintWant = mHintLayout == null ? 0 : mHintLayout.getWidth();\n\n            /*\n             * No need to bring the text into view, since the size is not\n             * changing (unless we do the requestLayout(), in which case it\n             * will happen at measure).\n             */\n            makeNewLayout(want, hintWant, UNKNOWN_BORING, UNKNOWN_BORING,\n                          mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight(),\n                          false);\n\n            if (mEllipsize != TextUtils.TruncateAt.MARQUEE) {\n                // In a fixed-height view, so use our new text layout.\n                if (mLayoutParams.height != LayoutParams.WRAP_CONTENT &&\n                    mLayoutParams.height != LayoutParams.MATCH_PARENT) {\n                    invalidate();\n                    return;\n                }\n\n                // Dynamic height, but height has stayed the same,\n                // so use our new text layout.\n                if (mLayout.getHeight() == oldht &&\n                    (mHintLayout == null || mHintLayout.getHeight() == oldht)) {\n                    invalidate();\n                    return;\n                }\n            }\n\n            // We lose: the height has changed and we have a dynamic height.\n            // Request a new view layout using our new text layout.\n            requestLayout();\n            invalidate();\n        } else {\n            // Dynamic width, so we have no choice but to request a new\n            // view layout with a new text layout.\n            nullLayouts();\n            requestLayout();\n            invalidate();\n        }\n    }\n```\n发现不管是if还是else，都要执行invalidate()，那就进去看看，一路进展比较顺利，好像离真理更进一步了。经过连续的三连调跳转到了invalidateInternal方法：\n\n```\n public void invalidate() {\n        invalidate(true);\n    }\n\n    /**\n     * This is where the invalidate() work actually happens. A full invalidate()\n     * causes the drawing cache to be invalidated, but this function can be\n     * called with invalidateCache set to false to skip that invalidation step\n     * for cases that do not need it (for example, a component that remains at\n     * the same dimensions with the same content).\n     *\n     * @param invalidateCache Whether the drawing cache for this view should be\n     *            invalidated as well. This is usually true for a full\n     *            invalidate, but may be set to false if the View's contents or\n     *            dimensions have not changed.\n     */\n    void invalidate(boolean invalidateCache) {\n        invalidateInternal(0, 0, mRight - mLeft, mBottom - mTop, invalidateCache, true);\n    }\n\n   void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,\n            boolean fullInvalidate) {\n        if (mGhostView != null) {\n            mGhostView.invalidate(true);\n            return;\n        }\n\n        if (skipInvalidate()) {\n            return;\n        }\n\n        if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)\n                || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)\n                || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED\n                || (fullInvalidate && isOpaque() != mLastIsOpaque)) {\n            if (fullInvalidate) {\n                mLastIsOpaque = isOpaque();\n                mPrivateFlags &= ~PFLAG_DRAWN;\n            }\n\n            mPrivateFlags |= PFLAG_DIRTY;\n\n            if (invalidateCache) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n                mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n            }\n\n            // Propagate the damage rectangle to the parent view.\n            final AttachInfo ai = mAttachInfo;\n            final ViewParent p = mParent;\n            if (p != null && ai != null && l < r && t < b) {\n                final Rect damage = ai.mTmpInvalRect;\n                damage.set(l, t, r, b);\n                p.invalidateChild(this, damage);\n            }\n\n            // Damage the entire projection receiver, if necessary.\n            if (mBackground != null && mBackground.isProjected()) {\n                final View receiver = getProjectionReceiver();\n                if (receiver != null) {\n                    receiver.damageInParent();\n                }\n            }\n\n            // Damage the entire IsolatedZVolume receiving this view's shadow.\n            if (isHardwareAccelerated() && getZ() != 0) {\n                damageShadowReceiver();\n            }\n        }\n    }\n```\n重点看invalidateChild()这个方法，方法里面有do while循环，每次循环出当前view的parent，最后一次循环返回的parent时ViewRootImpl类实例：\n\n```\n public final void invalidateChild(View child, final Rect dirty) {\n        ViewParent parent = this;\n\n        final AttachInfo attachInfo = mAttachInfo;\n        if (attachInfo != null) {\n            // If the child is drawing an animation, we want to copy this flag onto\n            // ourselves and the parent to make sure the invalidate request goes\n            // through\n            final boolean drawAnimation = (child.mPrivateFlags & PFLAG_DRAW_ANIMATION)\n                    == PFLAG_DRAW_ANIMATION;\n\n            // Check whether the child that requests the invalidate is fully opaque\n            // Views being animated or transformed are not considered opaque because we may\n            // be invalidating their old position and need the parent to paint behind them.\n            Matrix childMatrix = child.getMatrix();\n            final boolean isOpaque = child.isOpaque() && !drawAnimation &&\n                    child.getAnimation() == null && childMatrix.isIdentity();\n            // Mark the child as dirty, using the appropriate flag\n            // Make sure we do not set both flags at the same time\n            int opaqueFlag = isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;\n\n            if (child.mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n                mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n            }\n\n            final int[] location = attachInfo.mInvalidateChildLocation;\n            location[CHILD_LEFT_INDEX] = child.mLeft;\n            location[CHILD_TOP_INDEX] = child.mTop;\n            if (!childMatrix.isIdentity() ||\n                    (mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {\n                RectF boundingRect = attachInfo.mTmpTransformRect;\n                boundingRect.set(dirty);\n                Matrix transformMatrix;\n                if ((mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {\n                    Transformation t = attachInfo.mTmpTransformation;\n                    boolean transformed = getChildStaticTransformation(child, t);\n                    if (transformed) {\n                        transformMatrix = attachInfo.mTmpMatrix;\n                        transformMatrix.set(t.getMatrix());\n                        if (!childMatrix.isIdentity()) {\n                            transformMatrix.preConcat(childMatrix);\n                        }\n                    } else {\n                        transformMatrix = childMatrix;\n                    }\n                } else {\n                    transformMatrix = childMatrix;\n                }\n                transformMatrix.mapRect(boundingRect);\n                dirty.set((int) (boundingRect.left - 0.5f),\n                        (int) (boundingRect.top - 0.5f),\n                        (int) (boundingRect.right + 0.5f),\n                        (int) (boundingRect.bottom + 0.5f));\n            }\n\n            do {\n                View view = null;\n                if (parent instanceof View) {\n                    view = (View) parent;\n                }\n\n                if (drawAnimation) {\n                    if (view != null) {\n                        view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;\n                    } else if (parent instanceof ViewRootImpl) {\n                        ((ViewRootImpl) parent).mIsAnimating = true;\n                    }\n                }\n\n                // If the parent is dirty opaque or not dirty, mark it dirty with the opaque\n                // flag coming from the child that initiated the invalidate\n                if (view != null) {\n                    if ((view.mViewFlags & FADING_EDGE_MASK) != 0 &&\n                            view.getSolidColor() == 0) {\n                        opaqueFlag = PFLAG_DIRTY;\n                    }\n                    if ((view.mPrivateFlags & PFLAG_DIRTY_MASK) != PFLAG_DIRTY) {\n                        view.mPrivateFlags = (view.mPrivateFlags & ~PFLAG_DIRTY_MASK) | opaqueFlag;\n                    }\n                }\n\n                parent = parent.invalidateChildInParent(location, dirty);\n                if (view != null) {\n                    // Account for transform on current parent\n                    Matrix m = view.getMatrix();\n                    if (!m.isIdentity()) {\n                        RectF boundingRect = attachInfo.mTmpTransformRect;\n                        boundingRect.set(dirty);\n                        m.mapRect(boundingRect);\n                        dirty.set((int) (boundingRect.left - 0.5f),\n                                (int) (boundingRect.top - 0.5f),\n                                (int) (boundingRect.right + 0.5f),\n                                (int) (boundingRect.bottom + 0.5f));\n                    }\n                }\n            } while (parent != null);\n        }\n    }\n```\n现在查看ViewRootImpl类的invalidateChildInParent()方法：\n\n```\n    @Override\n    public ViewParent invalidateChildInParent(int[] location, Rect dirty) {\n        checkThread();\n        if (DEBUG_DRAW) Log.v(TAG, \"Invalidate child: \" + dirty);\n\n        if (dirty == null) {\n            invalidate();\n            return null;\n        } else if (dirty.isEmpty() && !mIsAnimating) {\n            return null;\n        }\n\n        if (mCurScrollY != 0 || mTranslator != null) {\n            mTempRect.set(dirty);\n            dirty = mTempRect;\n            if (mCurScrollY != 0) {\n                dirty.offset(0, -mCurScrollY);\n            }\n            if (mTranslator != null) {\n                mTranslator.translateRectInAppWindowToScreen(dirty);\n            }\n            if (mAttachInfo.mScalingRequired) {\n                dirty.inset(-1, -1);\n            }\n        }\n\n        final Rect localDirty = mDirty;\n        if (!localDirty.isEmpty() && !localDirty.contains(dirty)) {\n            mAttachInfo.mSetIgnoreDirtyState = true;\n            mAttachInfo.mIgnoreDirtyState = true;\n        }\n\n        // Add the new dirty rect to the current one\n        localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);\n        // Intersect with the bounds of the window to skip\n        // updates that lie outside of the visible region\n        final float appScale = mAttachInfo.mApplicationScale;\n        final boolean intersected = localDirty.intersect(0, 0,\n                (int) (mWidth * appScale + 0.5f), (int) (mHeight * appScale + 0.5f));\n        if (!intersected) {\n            localDirty.setEmpty();\n        }\n        if (!mWillDrawSoon && (intersected || mIsAnimating)) {\n            scheduleTraversals();\n        }\n\n        return null;\n    }\n```\n方法块的第一行好像就是我们要找的验证线程的地方checkThread()，而该方法内容也很简单，看到抛出的异常就很熟悉了：\n\n```\n    void checkThread() {\n        if (mThread != Thread.currentThread()) {\n            throw new CalledFromWrongThreadException(\n                    \"Only the original thread that created a view hierarchy can touch its views.\");\n        }\n    }\n```\n第二步，验证线程地方已经找到了，假设得到了证实，那么为什么该有的异常没有出现呢？现在再次假设是不是因为某些原因导致checkThread()没有执行呢？\n\n有人可能会问会不会是mThread == Thread.currentThread()？其实这是不可能的 ，先看下mThread赋值：\n\n```\n    public ViewRootImpl(Context context, Display display) {\n        mContext = context;\n        mWindowSession = WindowManagerGlobal.getWindowSession();\n        mDisplay = display;\n        mBasePackageName = context.getBasePackageName();\n\n        mDisplayAdjustments = display.getDisplayAdjustments();\n\n        mThread = Thread.currentThread();\n```\nViewRootImpl类实例化是在Activity启动时的主线程创建的，所以mThread是主线程实例，而checkThread()中的Thread.currentThread()，最初是由textView.setText()调用的一系列方法栈，并且setText是在子线程调用。\n\n继续刚才的假设，不过现在要逆推回去，checkThread()方法没有执行，可以认为ViewRootImpl的invalidateChildInParent()方法没有执行，它又是在ViewGroup中invalidateChild()方法里的do while中调用，要使do while不被调用，继续往上看，如果attachInfo为null，进不去if语句块也就不会执行checkThread()了，这是第一个可能的原因。记录下，继续逆推。\n\nView中的invalidateInternal()方法：\n\n```\n      // Propagate the damage rectangle to the parent view.\n            final AttachInfo ai = mAttachInfo;\n            final ViewParent p = mParent;\n            if (p != null && ai != null && l < r && t < b) {\n                final Rect damage = ai.mTmpInvalRect;\n                damage.set(l, t, r, b);\n                p.invalidateChild(this, damage);\n            }\n```\n根据判断条件，如果p即mParent或者ai即mAttachInfo 任一为null，都不会执行invalidateChild，这是第二个可能原因，这里的ai和第一个原因的attachInfo是一样的，所以第一个原因可能忽略，精力关注在第二个原因上。\n\n>现在的关注点是实例p和ai是什么时候创建的，有没有为null的现象？\n\n```\n     final AttachInfo ai = mAttachInfo;\n```\n而mAttachInfo是在View的dispatchAttachedToWindow()方法中赋值的：\n\n```\n void dispatchAttachedToWindow(AttachInfo info, int visibility) {\n        //System.out.println(\"Attached! \" + this);\n        mAttachInfo = info;\n}\n```\nView的dispatchAttachedToWindow()方法是在ViewRootImpl中的performTraversals()方法调用，这个方法是遍历View Tree\n\n```\n private void performTraversals() {\n        // cache mView since it is used so much below...\n        final View host = mView;\n        ·······\n        host.dispatchAttachedToWindow(mAttachInfo, 0);\n\n```\n可见View中的mAttachInfo来自ViewrootImpl的mAttachInfo，而ViewrootImpl的mAttachInfo是在其构造方法中被赋值的：\n\n```\n\n    public ViewRootImpl(Context context, Display display) {\n        mContext = context;\n        mWindowSession = WindowManagerGlobal.getWindowSession();\n        mDisplay = display;\n        mBasePackageName = context.getBasePackageName();\n\n        mDisplayAdjustments = display.getDisplayAdjustments();\n\n        mThread = Thread.currentThread();\n        mLocation = new WindowLeaked(null);\n        mLocation.fillInStackTrace();\n        mWidth = -1;\n        mHeight = -1;\n        mDirty = new Rect();\n        mTempRect = new Rect();\n        mVisRect = new Rect();\n        mWinFrame = new Rect();\n        mWindow = new W(this);\n        mTargetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n        mViewVisibility = View.GONE;\n        mTransparentRegion = new Region();\n        mPreviousTransparentRegion = new Region();\n        mFirst = true; // true for the first time the view is added\n        mAdded = false;\n        mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this);\n       \n    }\n```\n\n之前说了ViewRootImpl实例是在Activity启动时创建的，现在看看具体是启动的什么时候:在向window添加view的时候即：WindowManagerGlobal的addView方法中创建ViewrootImpl实例：\n\n```\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent and we're running on L or above (or in the\n            // system context), assume we want hardware acceleration.\n            final Context context = view.getContext();\n            if (context != null\n                    && context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.LOLLIPOP) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\n        ViewRootImpl root;\n        View panelParentView = null;\n\n        synchronized (mLock) {\n            // Start watching for system property changes.\n            if (mSystemPropertyUpdater == null) {\n                mSystemPropertyUpdater = new Runnable() {\n                    @Override public void run() {\n                        synchronized (mLock) {\n                            for (int i = mRoots.size() - 1; i >= 0; --i) {\n                                mRoots.get(i).loadSystemProperties();\n                            }\n                        }\n                    }\n                };\n                SystemProperties.addChangeCallback(mSystemPropertyUpdater);\n            }\n\n            int index = findViewLocked(view, false);\n            if (index >= 0) {\n                if (mDyingViews.contains(view)) {\n                    // Don't wait for MSG_DIE to make it's way through root's queue.\n                    mRoots.get(index).doDie();\n                } else {\n                    throw new IllegalStateException(\"View \" + view\n                            + \" has already been added to the window manager.\");\n                }\n                // The previous removeView() had not completed executing. Now it has.\n            }\n\n            // If this is a panel window, then find the window it is being\n            // attached to for future reference.\n            if (wparams.type >= WindowManager.LayoutParams.FIRST_SUB_WINDOW &&\n                    wparams.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {\n                final int count = mViews.size();\n                for (int i = 0; i < count; i++) {\n                    if (mRoots.get(i).mWindow.asBinder() == wparams.token) {\n                        panelParentView = mViews.get(i);\n                    }\n                }\n            }\n\n            root = new ViewRootImpl(view.getContext(), display);\n\n            view.setLayoutParams(wparams);\n\n            mViews.add(view);\n            mRoots.add(root);\n            mParams.add(wparams);\n        }\n\n        // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n    }\n\n```\n\n而调用addView()方法是在ActivityThread类的handleResumeActivity()方法：\n\n```\n\n    final void handleResumeActivity(IBinder token,\n            boolean clearHide, boolean isForward, boolean reallyResume) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n        mSomeActivitiesChanged = true;\n\n        // TODO Push resumeArgs into the activity for consideration\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n\n        if (r != null) {\n            final Activity a = r.activity;\n\n            if (localLOGV) Slog.v(\n                TAG, \"Resume \" + r + \" started activity: \" +\n                a.mStartedActivity + \", hideForNow: \" + r.hideForNow\n                + \", finished: \" + a.mFinished);\n\n            final int forwardBit = isForward ?\n                    WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;\n\n            // If the window hasn't yet been added to the window manager,\n            // and this guy didn't finish itself or start another activity,\n            // then go ahead and add the window.\n            boolean willBeVisible = !a.mStartedActivity;\n            if (!willBeVisible) {\n                try {\n                    willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(\n                            a.getActivityToken());\n                } catch (RemoteException e) {\n                }\n            }\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);\n                }\n\n            // If the window has already been added, but during resume\n            // we started another activity, then don't yet make the\n            // window visible.\n            } else if (!willBeVisible) {\n                if (localLOGV) Slog.v(\n                    TAG, \"Launch \" + r + \" mStartedActivity set\");\n                r.hideForNow = true;\n            }\n\n            // Get rid of anything left hanging around.\n            cleanUpPendingRemoveWindows(r);\n\n            // The window is now visible if it has been added, we are not\n            // simply finishing, and we are not starting another activity.\n            if (!r.activity.mFinished && willBeVisible\n                    && r.activity.mDecor != null && !r.hideForNow) {\n                if (r.newConfig != null) {\n                    if (DEBUG_CONFIGURATION) Slog.v(TAG, \"Resuming activity \"\n                            + r.activityInfo.name + \" with newConfig \" + r.newConfig);\n                    performConfigurationChanged(r.activity, r.newConfig);\n                    freeTextLayoutCachesIfNeeded(r.activity.mCurrentConfig.diff(r.newConfig));\n                    r.newConfig = null;\n                }\n                if (localLOGV) Slog.v(TAG, \"Resuming \" + r + \" with isForward=\"\n                        + isForward);\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                if ((l.softInputMode\n                        & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)\n                        != forwardBit) {\n                    l.softInputMode = (l.softInputMode\n                            & (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))\n                            | forwardBit;\n                    if (r.activity.mVisibleFromClient) {\n                        ViewManager wm = a.getWindowManager();\n                        View decor = r.window.getDecorView();\n                        wm.updateViewLayout(decor, l);\n                    }\n                }\n                r.activity.mVisibleFromServer = true;\n                mNumVisibleActivities++;\n                if (r.activity.mVisibleFromClient) {\n                    r.activity.makeVisible();\n                }\n            }\n\n            if (!r.onlyLocalRequest) {\n                r.nextIdle = mNewActivities;\n                mNewActivities = r;\n                if (localLOGV) Slog.v(\n                    TAG, \"Scheduling idle handler for \" + r);\n                Looper.myQueue().addIdleHandler(new Idler());\n            }\n            r.onlyLocalRequest = false;\n\n            // Tell the activity manager we have resumed.\n            if (reallyResume) {\n                try {\n                    ActivityManagerNative.getDefault().activityResumed(token);\n                } catch (RemoteException ex) {\n                }\n            }\n\n        } else {\n            // If an exception was thrown when trying to resume, then\n            // just end this activity.\n            try {\n                ActivityManagerNative.getDefault()\n                    .finishActivity(token, Activity.RESULT_CANCELED, null, false);\n            } catch (RemoteException ex) {\n            }\n        }\n    }\n```\n\n看到上面的方法有些人心里可能有底儿了，handleResumeActivity()方法是不是让Activity回调onResume？如果是的话一切就都明了了，因为ViewrootImpl是在onReume期间创建，而AttachInfo是在ViewRootImpl实例化时创建，我们的工作线程是在onCreate时刷新UI的，那时候还没有实例化AttachInfo，导致mAttachInfo为null，最终if条件判断失败没有进入。然而这一切都是在YY，实践才是检验真理的唯一标准，动起来：\n\n看到这一行代码```\nActivityClientRecord r = performResumeActivity(token, clearHide);\n```微微一笑，点进去看看，\n\n```\n    public final ActivityClientRecord performResumeActivity(IBinder token,\n            boolean clearHide) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (localLOGV) Slog.v(TAG, \"Performing resume of \" + r\n                + \" finished=\" + r.activity.mFinished);\n        if (r != null && !r.activity.mFinished) {\n            if (clearHide) {\n                r.hideForNow = false;\n                r.activity.mStartedActivity = false;\n            }\n            try {\n                r.activity.mFragments.noteStateNotSaved();\n                if (r.pendingIntents != null) {\n                    deliverNewIntents(r, r.pendingIntents);\n                    r.pendingIntents = null;\n                }\n                if (r.pendingResults != null) {\n                    deliverResults(r, r.pendingResults);\n                    r.pendingResults = null;\n                }\n                r.activity.performResume();\n\n                EventLog.writeEvent(LOG_ON_RESUME_CALLED,\n                        UserHandle.myUserId(), r.activity.getComponentName().getClassName());\n\n                r.paused = false;\n                r.stopped = false;\n                r.state = null;\n                r.persistentState = null;\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(r.activity, e)) {\n                    throw new RuntimeException(\n                        \"Unable to resume activity \"\n                        + r.intent.getComponent().toShortString()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        }\n        return r;\n    }\n```\n代码很短，很容易提取有用信息：``` r.activity.performResume();```在进去看看：\n\n```\n\n    final void performResume() {\n        performRestart();\n\n        mFragments.execPendingActions();\n\n        mLastNonConfigurationInstances = null;\n\n        mCalled = false;\n        // mResumed is set by the instrumentation\n        mInstrumentation.callActivityOnResume(this);\n        if (!mCalled) {\n            throw new SuperNotCalledException(\n                \"Activity \" + mComponent.toShortString() +\n                \" did not call through to super.onResume()\");\n        }\n\n        // Now really resume, and install the current status bar and menu.\n        mCalled = false;\n\n        mFragments.dispatchResume();\n        mFragments.execPendingActions();\n\n        onPostResume();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\n                \"Activity \" + mComponent.toShortString() +\n                \" did not call through to super.onPostResume()\");\n        }\n    }\n```\n看到```mInstrumentation```这个属性就能感觉到越来越接近SDK API层了，看看它的```callActivityOnResume()```方法做了什么：\n\n```\n    public void callActivityOnResume(Activity activity) {\n        activity.mResumed = true;\n        activity.onResume();\n        \n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    am.match(activity, activity, activity.getIntent());\n                }\n            }\n        }\n    }\n```\n\n一行```activity.onResume();```已经水落石出。\n回到handleResumeActivity代码中，我精简下：\n\n```\n final void handleResumeActivity(IBinder token,\n            boolean clearHide, boolean isForward, boolean reallyResume) {\n   //这里是最终回调Activity的onResume()方法\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n//省略若干\n        if (r != null) {\n            final Activity a = r.activity;\n            final int forwardBit = isForward ?\n            WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;\n            boolean willBeVisible = !a.mStartedActivity;\n\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n//这里是调用WindowManagerGlobal的addView()方法最终实例化ViewRootImpl，进而实例化AttachInfo\n                    wm.addView(decor, l);\n                }\n       \n            } else if (!willBeVisible) {\n                if (localLOGV) Slog.v(\n                    TAG, \"Launch \" + r + \" mStartedActivity set\");\n                r.hideForNow = true;\n            }\n        }\n    }\n```\n\n\n另外关于阅读源码问题，win下当然使用SourceInsight不二选，如果是在mac下可以参考我的[osx下如何使用SublimeText阅读Android系统源码](http://www.jianshu.com/p/c295d2729ecf).。","source":"_posts/为什么我在工作线程刷新UI没报错.md","raw":"---\ntitle: 为什么我在工作线程刷新UI没报错？\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n\n>从做Android开发以来就一直被灌输“只能在主线程刷新UI”的思想，但是这两天发现个问题，在onCreate中创建工作线程并刷新UI没有报错。代码是这样的：\n\n```\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n       final TextView tv = (TextView) findViewById(R.id.sample_text);\n       new Thread(new Runnable() {\n           @Override\n           public void run() {\n               tv.setText(\"来自\"+Thread.currentThread().getName()+\"线程的更新\");\n           }\n       }).start();\n    }\n```\n期待已久的crash没有出现，反而页面是这样显示的：\n\n![屏幕快照 2017-03-26 下午7.14.46.png](http://upload-images.jianshu.io/upload_images/1796052-7be6319d0fc94867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n不禁让人陷入深思···\n![思考.jpg](http://upload-images.jianshu.io/upload_images/1796052-8a0ce88639c31d1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n第一步，分析问题原因。以前工作线程刷新UI会出现异常并提示只能在UI线程刷新UI。所以假设有个地方(函数)会在刷新UI前判断当前线程是不是主线程，那么现在问题就是验证下是否真的存在这么个地方。问题是从setText引起的，那就从这里出发看看。\n点进去看下发现又调用了其重载函数：\n```\n    @android.view.RemotableViewMethod\n    public final void setText(CharSequence text) {\n        setText(text, mBufferType);\n    }\n```\n继续深入发现这个方法代码挺多的，但是不用过于关注细节，粗略浏览下不难发现前面大部分代码大多是对text文本格式的一些处理判断，无关刷新UI，直到            checkForRelayout()方法执行，从名字看是“从新布局”，根据view绘制流程测量、布局、绘制，那布局完了不是就绘制刷新了吗？所以决定去checkForRelayout方法看看。\n\n```\n    private void setText(CharSequence text, BufferType type,\n                         boolean notifyBefore, int oldlen) {\n        if (text == null) {\n            text = \"\";\n        }\n\n        // If suggestions are not enabled, remove the suggestion spans from the text\n        if (!isSuggestionsEnabled()) {\n            text = removeSuggestionSpans(text);\n        }\n\n        if (!mUserSetTextScaleX) mTextPaint.setTextScaleX(1.0f);\n\n        if (text instanceof Spanned &&\n            ((Spanned) text).getSpanStart(TextUtils.TruncateAt.MARQUEE) >= 0) {\n            if (ViewConfiguration.get(mContext).isFadingMarqueeEnabled()) {\n                setHorizontalFadingEdgeEnabled(true);\n                mMarqueeFadeMode = MARQUEE_FADE_NORMAL;\n            } else {\n                setHorizontalFadingEdgeEnabled(false);\n                mMarqueeFadeMode = MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS;\n            }\n            setEllipsize(TextUtils.TruncateAt.MARQUEE);\n        }\n\n        int n = mFilters.length;\n        for (int i = 0; i < n; i++) {\n            CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);\n            if (out != null) {\n                text = out;\n            }\n        }\n\n        if (notifyBefore) {\n            if (mText != null) {\n                oldlen = mText.length();\n                sendBeforeTextChanged(mText, 0, oldlen, text.length());\n            } else {\n                sendBeforeTextChanged(\"\", 0, 0, text.length());\n            }\n        }\n\n        boolean needEditableForNotification = false;\n\n        if (mListeners != null && mListeners.size() != 0) {\n            needEditableForNotification = true;\n        }\n\n        if (type == BufferType.EDITABLE || getKeyListener() != null ||\n                needEditableForNotification) {\n            createEditorIfNeeded();\n            Editable t = mEditableFactory.newEditable(text);\n            text = t;\n            setFilters(t, mFilters);\n            InputMethodManager imm = InputMethodManager.peekInstance();\n            if (imm != null) imm.restartInput(this);\n        } else if (type == BufferType.SPANNABLE || mMovement != null) {\n            text = mSpannableFactory.newSpannable(text);\n        } else if (!(text instanceof CharWrapper)) {\n            text = TextUtils.stringOrSpannedString(text);\n        }\n\n        if (mAutoLinkMask != 0) {\n            Spannable s2;\n\n            if (type == BufferType.EDITABLE || text instanceof Spannable) {\n                s2 = (Spannable) text;\n            } else {\n                s2 = mSpannableFactory.newSpannable(text);\n            }\n\n            if (Linkify.addLinks(s2, mAutoLinkMask)) {\n                text = s2;\n                type = (type == BufferType.EDITABLE) ? BufferType.EDITABLE : BufferType.SPANNABLE;\n\n                /*\n                 * We must go ahead and set the text before changing the\n                 * movement method, because setMovementMethod() may call\n                 * setText() again to try to upgrade the buffer type.\n                 */\n                mText = text;\n\n                // Do not change the movement method for text that support text selection as it\n                // would prevent an arbitrary cursor displacement.\n                if (mLinksClickable && !textCanBeSelected()) {\n                    setMovementMethod(LinkMovementMethod.getInstance());\n                }\n            }\n        }\n\n        mBufferType = type;\n        mText = text;\n\n        if (mTransformation == null) {\n            mTransformed = text;\n        } else {\n            mTransformed = mTransformation.getTransformation(text, this);\n        }\n\n        final int textLength = text.length();\n\n        if (text instanceof Spannable && !mAllowTransformationLengthChange) {\n            Spannable sp = (Spannable) text;\n\n            // Remove any ChangeWatchers that might have come from other TextViews.\n            final ChangeWatcher[] watchers = sp.getSpans(0, sp.length(), ChangeWatcher.class);\n            final int count = watchers.length;\n            for (int i = 0; i < count; i++) {\n                sp.removeSpan(watchers[i]);\n            }\n\n            if (mChangeWatcher == null) mChangeWatcher = new ChangeWatcher();\n\n            sp.setSpan(mChangeWatcher, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE |\n                       (CHANGE_WATCHER_PRIORITY << Spanned.SPAN_PRIORITY_SHIFT));\n\n            if (mEditor != null) mEditor.addSpanWatchers(sp);\n\n            if (mTransformation != null) {\n                sp.setSpan(mTransformation, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n            }\n\n            if (mMovement != null) {\n                mMovement.initialize(this, (Spannable) text);\n\n                /*\n                 * Initializing the movement method will have set the\n                 * selection, so reset mSelectionMoved to keep that from\n                 * interfering with the normal on-focus selection-setting.\n                 */\n                if (mEditor != null) mEditor.mSelectionMoved = false;\n            }\n        }\n\n        if (mLayout != null) {\n            checkForRelayout();\n        }\n\n        sendOnTextChanged(text, 0, oldlen, textLength);\n        onTextChanged(text, 0, oldlen, textLength);\n\n        notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT);\n\n        if (needEditableForNotification) {\n            sendAfterTextChanged((Editable) text);\n        }\n\n        // SelectionModifierCursorController depends on textCanBeSelected, which depends on text\n        if (mEditor != null) mEditor.prepareCursorControllers();\n    }\n```\n\n找到checkForRelayout方法查看：\n\n```\n    private void checkForRelayout() {\n        // If we have a fixed width, we can just swap in a new text layout\n        // if the text height stays the same or if the view height is fixed.\n\n        if ((mLayoutParams.width != LayoutParams.WRAP_CONTENT ||\n                (mMaxWidthMode == mMinWidthMode && mMaxWidth == mMinWidth)) &&\n                (mHint == null || mHintLayout != null) &&\n                (mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight() > 0)) {\n            // Static width, so try making a new text layout.\n\n            int oldht = mLayout.getHeight();\n            int want = mLayout.getWidth();\n            int hintWant = mHintLayout == null ? 0 : mHintLayout.getWidth();\n\n            /*\n             * No need to bring the text into view, since the size is not\n             * changing (unless we do the requestLayout(), in which case it\n             * will happen at measure).\n             */\n            makeNewLayout(want, hintWant, UNKNOWN_BORING, UNKNOWN_BORING,\n                          mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight(),\n                          false);\n\n            if (mEllipsize != TextUtils.TruncateAt.MARQUEE) {\n                // In a fixed-height view, so use our new text layout.\n                if (mLayoutParams.height != LayoutParams.WRAP_CONTENT &&\n                    mLayoutParams.height != LayoutParams.MATCH_PARENT) {\n                    invalidate();\n                    return;\n                }\n\n                // Dynamic height, but height has stayed the same,\n                // so use our new text layout.\n                if (mLayout.getHeight() == oldht &&\n                    (mHintLayout == null || mHintLayout.getHeight() == oldht)) {\n                    invalidate();\n                    return;\n                }\n            }\n\n            // We lose: the height has changed and we have a dynamic height.\n            // Request a new view layout using our new text layout.\n            requestLayout();\n            invalidate();\n        } else {\n            // Dynamic width, so we have no choice but to request a new\n            // view layout with a new text layout.\n            nullLayouts();\n            requestLayout();\n            invalidate();\n        }\n    }\n```\n发现不管是if还是else，都要执行invalidate()，那就进去看看，一路进展比较顺利，好像离真理更进一步了。经过连续的三连调跳转到了invalidateInternal方法：\n\n```\n public void invalidate() {\n        invalidate(true);\n    }\n\n    /**\n     * This is where the invalidate() work actually happens. A full invalidate()\n     * causes the drawing cache to be invalidated, but this function can be\n     * called with invalidateCache set to false to skip that invalidation step\n     * for cases that do not need it (for example, a component that remains at\n     * the same dimensions with the same content).\n     *\n     * @param invalidateCache Whether the drawing cache for this view should be\n     *            invalidated as well. This is usually true for a full\n     *            invalidate, but may be set to false if the View's contents or\n     *            dimensions have not changed.\n     */\n    void invalidate(boolean invalidateCache) {\n        invalidateInternal(0, 0, mRight - mLeft, mBottom - mTop, invalidateCache, true);\n    }\n\n   void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,\n            boolean fullInvalidate) {\n        if (mGhostView != null) {\n            mGhostView.invalidate(true);\n            return;\n        }\n\n        if (skipInvalidate()) {\n            return;\n        }\n\n        if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)\n                || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)\n                || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED\n                || (fullInvalidate && isOpaque() != mLastIsOpaque)) {\n            if (fullInvalidate) {\n                mLastIsOpaque = isOpaque();\n                mPrivateFlags &= ~PFLAG_DRAWN;\n            }\n\n            mPrivateFlags |= PFLAG_DIRTY;\n\n            if (invalidateCache) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n                mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n            }\n\n            // Propagate the damage rectangle to the parent view.\n            final AttachInfo ai = mAttachInfo;\n            final ViewParent p = mParent;\n            if (p != null && ai != null && l < r && t < b) {\n                final Rect damage = ai.mTmpInvalRect;\n                damage.set(l, t, r, b);\n                p.invalidateChild(this, damage);\n            }\n\n            // Damage the entire projection receiver, if necessary.\n            if (mBackground != null && mBackground.isProjected()) {\n                final View receiver = getProjectionReceiver();\n                if (receiver != null) {\n                    receiver.damageInParent();\n                }\n            }\n\n            // Damage the entire IsolatedZVolume receiving this view's shadow.\n            if (isHardwareAccelerated() && getZ() != 0) {\n                damageShadowReceiver();\n            }\n        }\n    }\n```\n重点看invalidateChild()这个方法，方法里面有do while循环，每次循环出当前view的parent，最后一次循环返回的parent时ViewRootImpl类实例：\n\n```\n public final void invalidateChild(View child, final Rect dirty) {\n        ViewParent parent = this;\n\n        final AttachInfo attachInfo = mAttachInfo;\n        if (attachInfo != null) {\n            // If the child is drawing an animation, we want to copy this flag onto\n            // ourselves and the parent to make sure the invalidate request goes\n            // through\n            final boolean drawAnimation = (child.mPrivateFlags & PFLAG_DRAW_ANIMATION)\n                    == PFLAG_DRAW_ANIMATION;\n\n            // Check whether the child that requests the invalidate is fully opaque\n            // Views being animated or transformed are not considered opaque because we may\n            // be invalidating their old position and need the parent to paint behind them.\n            Matrix childMatrix = child.getMatrix();\n            final boolean isOpaque = child.isOpaque() && !drawAnimation &&\n                    child.getAnimation() == null && childMatrix.isIdentity();\n            // Mark the child as dirty, using the appropriate flag\n            // Make sure we do not set both flags at the same time\n            int opaqueFlag = isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;\n\n            if (child.mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n                mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n            }\n\n            final int[] location = attachInfo.mInvalidateChildLocation;\n            location[CHILD_LEFT_INDEX] = child.mLeft;\n            location[CHILD_TOP_INDEX] = child.mTop;\n            if (!childMatrix.isIdentity() ||\n                    (mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {\n                RectF boundingRect = attachInfo.mTmpTransformRect;\n                boundingRect.set(dirty);\n                Matrix transformMatrix;\n                if ((mGroupFlags & ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) {\n                    Transformation t = attachInfo.mTmpTransformation;\n                    boolean transformed = getChildStaticTransformation(child, t);\n                    if (transformed) {\n                        transformMatrix = attachInfo.mTmpMatrix;\n                        transformMatrix.set(t.getMatrix());\n                        if (!childMatrix.isIdentity()) {\n                            transformMatrix.preConcat(childMatrix);\n                        }\n                    } else {\n                        transformMatrix = childMatrix;\n                    }\n                } else {\n                    transformMatrix = childMatrix;\n                }\n                transformMatrix.mapRect(boundingRect);\n                dirty.set((int) (boundingRect.left - 0.5f),\n                        (int) (boundingRect.top - 0.5f),\n                        (int) (boundingRect.right + 0.5f),\n                        (int) (boundingRect.bottom + 0.5f));\n            }\n\n            do {\n                View view = null;\n                if (parent instanceof View) {\n                    view = (View) parent;\n                }\n\n                if (drawAnimation) {\n                    if (view != null) {\n                        view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;\n                    } else if (parent instanceof ViewRootImpl) {\n                        ((ViewRootImpl) parent).mIsAnimating = true;\n                    }\n                }\n\n                // If the parent is dirty opaque or not dirty, mark it dirty with the opaque\n                // flag coming from the child that initiated the invalidate\n                if (view != null) {\n                    if ((view.mViewFlags & FADING_EDGE_MASK) != 0 &&\n                            view.getSolidColor() == 0) {\n                        opaqueFlag = PFLAG_DIRTY;\n                    }\n                    if ((view.mPrivateFlags & PFLAG_DIRTY_MASK) != PFLAG_DIRTY) {\n                        view.mPrivateFlags = (view.mPrivateFlags & ~PFLAG_DIRTY_MASK) | opaqueFlag;\n                    }\n                }\n\n                parent = parent.invalidateChildInParent(location, dirty);\n                if (view != null) {\n                    // Account for transform on current parent\n                    Matrix m = view.getMatrix();\n                    if (!m.isIdentity()) {\n                        RectF boundingRect = attachInfo.mTmpTransformRect;\n                        boundingRect.set(dirty);\n                        m.mapRect(boundingRect);\n                        dirty.set((int) (boundingRect.left - 0.5f),\n                                (int) (boundingRect.top - 0.5f),\n                                (int) (boundingRect.right + 0.5f),\n                                (int) (boundingRect.bottom + 0.5f));\n                    }\n                }\n            } while (parent != null);\n        }\n    }\n```\n现在查看ViewRootImpl类的invalidateChildInParent()方法：\n\n```\n    @Override\n    public ViewParent invalidateChildInParent(int[] location, Rect dirty) {\n        checkThread();\n        if (DEBUG_DRAW) Log.v(TAG, \"Invalidate child: \" + dirty);\n\n        if (dirty == null) {\n            invalidate();\n            return null;\n        } else if (dirty.isEmpty() && !mIsAnimating) {\n            return null;\n        }\n\n        if (mCurScrollY != 0 || mTranslator != null) {\n            mTempRect.set(dirty);\n            dirty = mTempRect;\n            if (mCurScrollY != 0) {\n                dirty.offset(0, -mCurScrollY);\n            }\n            if (mTranslator != null) {\n                mTranslator.translateRectInAppWindowToScreen(dirty);\n            }\n            if (mAttachInfo.mScalingRequired) {\n                dirty.inset(-1, -1);\n            }\n        }\n\n        final Rect localDirty = mDirty;\n        if (!localDirty.isEmpty() && !localDirty.contains(dirty)) {\n            mAttachInfo.mSetIgnoreDirtyState = true;\n            mAttachInfo.mIgnoreDirtyState = true;\n        }\n\n        // Add the new dirty rect to the current one\n        localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);\n        // Intersect with the bounds of the window to skip\n        // updates that lie outside of the visible region\n        final float appScale = mAttachInfo.mApplicationScale;\n        final boolean intersected = localDirty.intersect(0, 0,\n                (int) (mWidth * appScale + 0.5f), (int) (mHeight * appScale + 0.5f));\n        if (!intersected) {\n            localDirty.setEmpty();\n        }\n        if (!mWillDrawSoon && (intersected || mIsAnimating)) {\n            scheduleTraversals();\n        }\n\n        return null;\n    }\n```\n方法块的第一行好像就是我们要找的验证线程的地方checkThread()，而该方法内容也很简单，看到抛出的异常就很熟悉了：\n\n```\n    void checkThread() {\n        if (mThread != Thread.currentThread()) {\n            throw new CalledFromWrongThreadException(\n                    \"Only the original thread that created a view hierarchy can touch its views.\");\n        }\n    }\n```\n第二步，验证线程地方已经找到了，假设得到了证实，那么为什么该有的异常没有出现呢？现在再次假设是不是因为某些原因导致checkThread()没有执行呢？\n\n有人可能会问会不会是mThread == Thread.currentThread()？其实这是不可能的 ，先看下mThread赋值：\n\n```\n    public ViewRootImpl(Context context, Display display) {\n        mContext = context;\n        mWindowSession = WindowManagerGlobal.getWindowSession();\n        mDisplay = display;\n        mBasePackageName = context.getBasePackageName();\n\n        mDisplayAdjustments = display.getDisplayAdjustments();\n\n        mThread = Thread.currentThread();\n```\nViewRootImpl类实例化是在Activity启动时的主线程创建的，所以mThread是主线程实例，而checkThread()中的Thread.currentThread()，最初是由textView.setText()调用的一系列方法栈，并且setText是在子线程调用。\n\n继续刚才的假设，不过现在要逆推回去，checkThread()方法没有执行，可以认为ViewRootImpl的invalidateChildInParent()方法没有执行，它又是在ViewGroup中invalidateChild()方法里的do while中调用，要使do while不被调用，继续往上看，如果attachInfo为null，进不去if语句块也就不会执行checkThread()了，这是第一个可能的原因。记录下，继续逆推。\n\nView中的invalidateInternal()方法：\n\n```\n      // Propagate the damage rectangle to the parent view.\n            final AttachInfo ai = mAttachInfo;\n            final ViewParent p = mParent;\n            if (p != null && ai != null && l < r && t < b) {\n                final Rect damage = ai.mTmpInvalRect;\n                damage.set(l, t, r, b);\n                p.invalidateChild(this, damage);\n            }\n```\n根据判断条件，如果p即mParent或者ai即mAttachInfo 任一为null，都不会执行invalidateChild，这是第二个可能原因，这里的ai和第一个原因的attachInfo是一样的，所以第一个原因可能忽略，精力关注在第二个原因上。\n\n>现在的关注点是实例p和ai是什么时候创建的，有没有为null的现象？\n\n```\n     final AttachInfo ai = mAttachInfo;\n```\n而mAttachInfo是在View的dispatchAttachedToWindow()方法中赋值的：\n\n```\n void dispatchAttachedToWindow(AttachInfo info, int visibility) {\n        //System.out.println(\"Attached! \" + this);\n        mAttachInfo = info;\n}\n```\nView的dispatchAttachedToWindow()方法是在ViewRootImpl中的performTraversals()方法调用，这个方法是遍历View Tree\n\n```\n private void performTraversals() {\n        // cache mView since it is used so much below...\n        final View host = mView;\n        ·······\n        host.dispatchAttachedToWindow(mAttachInfo, 0);\n\n```\n可见View中的mAttachInfo来自ViewrootImpl的mAttachInfo，而ViewrootImpl的mAttachInfo是在其构造方法中被赋值的：\n\n```\n\n    public ViewRootImpl(Context context, Display display) {\n        mContext = context;\n        mWindowSession = WindowManagerGlobal.getWindowSession();\n        mDisplay = display;\n        mBasePackageName = context.getBasePackageName();\n\n        mDisplayAdjustments = display.getDisplayAdjustments();\n\n        mThread = Thread.currentThread();\n        mLocation = new WindowLeaked(null);\n        mLocation.fillInStackTrace();\n        mWidth = -1;\n        mHeight = -1;\n        mDirty = new Rect();\n        mTempRect = new Rect();\n        mVisRect = new Rect();\n        mWinFrame = new Rect();\n        mWindow = new W(this);\n        mTargetSdkVersion = context.getApplicationInfo().targetSdkVersion;\n        mViewVisibility = View.GONE;\n        mTransparentRegion = new Region();\n        mPreviousTransparentRegion = new Region();\n        mFirst = true; // true for the first time the view is added\n        mAdded = false;\n        mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this);\n       \n    }\n```\n\n之前说了ViewRootImpl实例是在Activity启动时创建的，现在看看具体是启动的什么时候:在向window添加view的时候即：WindowManagerGlobal的addView方法中创建ViewrootImpl实例：\n\n```\n public void addView(View view, ViewGroup.LayoutParams params,\n            Display display, Window parentWindow) {\n        if (view == null) {\n            throw new IllegalArgumentException(\"view must not be null\");\n        }\n        if (display == null) {\n            throw new IllegalArgumentException(\"display must not be null\");\n        }\n        if (!(params instanceof WindowManager.LayoutParams)) {\n            throw new IllegalArgumentException(\"Params must be WindowManager.LayoutParams\");\n        }\n\n        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;\n        if (parentWindow != null) {\n            parentWindow.adjustLayoutParamsForSubWindow(wparams);\n        } else {\n            // If there's no parent and we're running on L or above (or in the\n            // system context), assume we want hardware acceleration.\n            final Context context = view.getContext();\n            if (context != null\n                    && context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.LOLLIPOP) {\n                wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;\n            }\n        }\n\n        ViewRootImpl root;\n        View panelParentView = null;\n\n        synchronized (mLock) {\n            // Start watching for system property changes.\n            if (mSystemPropertyUpdater == null) {\n                mSystemPropertyUpdater = new Runnable() {\n                    @Override public void run() {\n                        synchronized (mLock) {\n                            for (int i = mRoots.size() - 1; i >= 0; --i) {\n                                mRoots.get(i).loadSystemProperties();\n                            }\n                        }\n                    }\n                };\n                SystemProperties.addChangeCallback(mSystemPropertyUpdater);\n            }\n\n            int index = findViewLocked(view, false);\n            if (index >= 0) {\n                if (mDyingViews.contains(view)) {\n                    // Don't wait for MSG_DIE to make it's way through root's queue.\n                    mRoots.get(index).doDie();\n                } else {\n                    throw new IllegalStateException(\"View \" + view\n                            + \" has already been added to the window manager.\");\n                }\n                // The previous removeView() had not completed executing. Now it has.\n            }\n\n            // If this is a panel window, then find the window it is being\n            // attached to for future reference.\n            if (wparams.type >= WindowManager.LayoutParams.FIRST_SUB_WINDOW &&\n                    wparams.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {\n                final int count = mViews.size();\n                for (int i = 0; i < count; i++) {\n                    if (mRoots.get(i).mWindow.asBinder() == wparams.token) {\n                        panelParentView = mViews.get(i);\n                    }\n                }\n            }\n\n            root = new ViewRootImpl(view.getContext(), display);\n\n            view.setLayoutParams(wparams);\n\n            mViews.add(view);\n            mRoots.add(root);\n            mParams.add(wparams);\n        }\n\n        // do this last because it fires off messages to start doing things\n        try {\n            root.setView(view, wparams, panelParentView);\n        } catch (RuntimeException e) {\n            // BadTokenException or InvalidDisplayException, clean up.\n            synchronized (mLock) {\n                final int index = findViewLocked(view, false);\n                if (index >= 0) {\n                    removeViewLocked(index, true);\n                }\n            }\n            throw e;\n        }\n    }\n\n```\n\n而调用addView()方法是在ActivityThread类的handleResumeActivity()方法：\n\n```\n\n    final void handleResumeActivity(IBinder token,\n            boolean clearHide, boolean isForward, boolean reallyResume) {\n        // If we are getting ready to gc after going to the background, well\n        // we are back active so skip it.\n        unscheduleGcIdler();\n        mSomeActivitiesChanged = true;\n\n        // TODO Push resumeArgs into the activity for consideration\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n\n        if (r != null) {\n            final Activity a = r.activity;\n\n            if (localLOGV) Slog.v(\n                TAG, \"Resume \" + r + \" started activity: \" +\n                a.mStartedActivity + \", hideForNow: \" + r.hideForNow\n                + \", finished: \" + a.mFinished);\n\n            final int forwardBit = isForward ?\n                    WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;\n\n            // If the window hasn't yet been added to the window manager,\n            // and this guy didn't finish itself or start another activity,\n            // then go ahead and add the window.\n            boolean willBeVisible = !a.mStartedActivity;\n            if (!willBeVisible) {\n                try {\n                    willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(\n                            a.getActivityToken());\n                } catch (RemoteException e) {\n                }\n            }\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n                    wm.addView(decor, l);\n                }\n\n            // If the window has already been added, but during resume\n            // we started another activity, then don't yet make the\n            // window visible.\n            } else if (!willBeVisible) {\n                if (localLOGV) Slog.v(\n                    TAG, \"Launch \" + r + \" mStartedActivity set\");\n                r.hideForNow = true;\n            }\n\n            // Get rid of anything left hanging around.\n            cleanUpPendingRemoveWindows(r);\n\n            // The window is now visible if it has been added, we are not\n            // simply finishing, and we are not starting another activity.\n            if (!r.activity.mFinished && willBeVisible\n                    && r.activity.mDecor != null && !r.hideForNow) {\n                if (r.newConfig != null) {\n                    if (DEBUG_CONFIGURATION) Slog.v(TAG, \"Resuming activity \"\n                            + r.activityInfo.name + \" with newConfig \" + r.newConfig);\n                    performConfigurationChanged(r.activity, r.newConfig);\n                    freeTextLayoutCachesIfNeeded(r.activity.mCurrentConfig.diff(r.newConfig));\n                    r.newConfig = null;\n                }\n                if (localLOGV) Slog.v(TAG, \"Resuming \" + r + \" with isForward=\"\n                        + isForward);\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                if ((l.softInputMode\n                        & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)\n                        != forwardBit) {\n                    l.softInputMode = (l.softInputMode\n                            & (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))\n                            | forwardBit;\n                    if (r.activity.mVisibleFromClient) {\n                        ViewManager wm = a.getWindowManager();\n                        View decor = r.window.getDecorView();\n                        wm.updateViewLayout(decor, l);\n                    }\n                }\n                r.activity.mVisibleFromServer = true;\n                mNumVisibleActivities++;\n                if (r.activity.mVisibleFromClient) {\n                    r.activity.makeVisible();\n                }\n            }\n\n            if (!r.onlyLocalRequest) {\n                r.nextIdle = mNewActivities;\n                mNewActivities = r;\n                if (localLOGV) Slog.v(\n                    TAG, \"Scheduling idle handler for \" + r);\n                Looper.myQueue().addIdleHandler(new Idler());\n            }\n            r.onlyLocalRequest = false;\n\n            // Tell the activity manager we have resumed.\n            if (reallyResume) {\n                try {\n                    ActivityManagerNative.getDefault().activityResumed(token);\n                } catch (RemoteException ex) {\n                }\n            }\n\n        } else {\n            // If an exception was thrown when trying to resume, then\n            // just end this activity.\n            try {\n                ActivityManagerNative.getDefault()\n                    .finishActivity(token, Activity.RESULT_CANCELED, null, false);\n            } catch (RemoteException ex) {\n            }\n        }\n    }\n```\n\n看到上面的方法有些人心里可能有底儿了，handleResumeActivity()方法是不是让Activity回调onResume？如果是的话一切就都明了了，因为ViewrootImpl是在onReume期间创建，而AttachInfo是在ViewRootImpl实例化时创建，我们的工作线程是在onCreate时刷新UI的，那时候还没有实例化AttachInfo，导致mAttachInfo为null，最终if条件判断失败没有进入。然而这一切都是在YY，实践才是检验真理的唯一标准，动起来：\n\n看到这一行代码```\nActivityClientRecord r = performResumeActivity(token, clearHide);\n```微微一笑，点进去看看，\n\n```\n    public final ActivityClientRecord performResumeActivity(IBinder token,\n            boolean clearHide) {\n        ActivityClientRecord r = mActivities.get(token);\n        if (localLOGV) Slog.v(TAG, \"Performing resume of \" + r\n                + \" finished=\" + r.activity.mFinished);\n        if (r != null && !r.activity.mFinished) {\n            if (clearHide) {\n                r.hideForNow = false;\n                r.activity.mStartedActivity = false;\n            }\n            try {\n                r.activity.mFragments.noteStateNotSaved();\n                if (r.pendingIntents != null) {\n                    deliverNewIntents(r, r.pendingIntents);\n                    r.pendingIntents = null;\n                }\n                if (r.pendingResults != null) {\n                    deliverResults(r, r.pendingResults);\n                    r.pendingResults = null;\n                }\n                r.activity.performResume();\n\n                EventLog.writeEvent(LOG_ON_RESUME_CALLED,\n                        UserHandle.myUserId(), r.activity.getComponentName().getClassName());\n\n                r.paused = false;\n                r.stopped = false;\n                r.state = null;\n                r.persistentState = null;\n            } catch (Exception e) {\n                if (!mInstrumentation.onException(r.activity, e)) {\n                    throw new RuntimeException(\n                        \"Unable to resume activity \"\n                        + r.intent.getComponent().toShortString()\n                        + \": \" + e.toString(), e);\n                }\n            }\n        }\n        return r;\n    }\n```\n代码很短，很容易提取有用信息：``` r.activity.performResume();```在进去看看：\n\n```\n\n    final void performResume() {\n        performRestart();\n\n        mFragments.execPendingActions();\n\n        mLastNonConfigurationInstances = null;\n\n        mCalled = false;\n        // mResumed is set by the instrumentation\n        mInstrumentation.callActivityOnResume(this);\n        if (!mCalled) {\n            throw new SuperNotCalledException(\n                \"Activity \" + mComponent.toShortString() +\n                \" did not call through to super.onResume()\");\n        }\n\n        // Now really resume, and install the current status bar and menu.\n        mCalled = false;\n\n        mFragments.dispatchResume();\n        mFragments.execPendingActions();\n\n        onPostResume();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\n                \"Activity \" + mComponent.toShortString() +\n                \" did not call through to super.onPostResume()\");\n        }\n    }\n```\n看到```mInstrumentation```这个属性就能感觉到越来越接近SDK API层了，看看它的```callActivityOnResume()```方法做了什么：\n\n```\n    public void callActivityOnResume(Activity activity) {\n        activity.mResumed = true;\n        activity.onResume();\n        \n        if (mActivityMonitors != null) {\n            synchronized (mSync) {\n                final int N = mActivityMonitors.size();\n                for (int i=0; i<N; i++) {\n                    final ActivityMonitor am = mActivityMonitors.get(i);\n                    am.match(activity, activity, activity.getIntent());\n                }\n            }\n        }\n    }\n```\n\n一行```activity.onResume();```已经水落石出。\n回到handleResumeActivity代码中，我精简下：\n\n```\n final void handleResumeActivity(IBinder token,\n            boolean clearHide, boolean isForward, boolean reallyResume) {\n   //这里是最终回调Activity的onResume()方法\n        ActivityClientRecord r = performResumeActivity(token, clearHide);\n//省略若干\n        if (r != null) {\n            final Activity a = r.activity;\n            final int forwardBit = isForward ?\n            WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;\n            boolean willBeVisible = !a.mStartedActivity;\n\n            if (r.window == null && !a.mFinished && willBeVisible) {\n                r.window = r.activity.getWindow();\n                View decor = r.window.getDecorView();\n                decor.setVisibility(View.INVISIBLE);\n                ViewManager wm = a.getWindowManager();\n                WindowManager.LayoutParams l = r.window.getAttributes();\n                a.mDecor = decor;\n                l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n                l.softInputMode |= forwardBit;\n                if (a.mVisibleFromClient) {\n                    a.mWindowAdded = true;\n//这里是调用WindowManagerGlobal的addView()方法最终实例化ViewRootImpl，进而实例化AttachInfo\n                    wm.addView(decor, l);\n                }\n       \n            } else if (!willBeVisible) {\n                if (localLOGV) Slog.v(\n                    TAG, \"Launch \" + r + \" mStartedActivity set\");\n                r.hideForNow = true;\n            }\n        }\n    }\n```\n\n\n另外关于阅读源码问题，win下当然使用SourceInsight不二选，如果是在mac下可以参考我的[osx下如何使用SublimeText阅读Android系统源码](http://www.jianshu.com/p/c295d2729ecf).。","slug":"为什么我在工作线程刷新UI没报错","published":1,"updated":"2017-04-22T10:11:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7n5002i449cqxj311fb","content":"<blockquote>\n<p>从做Android开发以来就一直被灌输“只能在主线程刷新UI”的思想，但是这两天发现个问题，在onCreate中创建工作线程并刷新UI没有报错。代码是这样的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">   final TextView tv = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">   new Thread(new Runnable() &#123;</div><div class=\"line\">       @Override</div><div class=\"line\">       public void run() &#123;</div><div class=\"line\">           tv.setText(&quot;来自&quot;+Thread.currentThread().getName()+&quot;线程的更新&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>期待已久的crash没有出现，反而页面是这样显示的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-7be6319d0fc94867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-26 下午7.14.46.png\"><br>不禁让人陷入深思···<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8a0ce88639c31d1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"思考.jpg\"></p>\n<p>第一步，分析问题原因。以前工作线程刷新UI会出现异常并提示只能在UI线程刷新UI。所以假设有个地方(函数)会在刷新UI前判断当前线程是不是主线程，那么现在问题就是验证下是否真的存在这么个地方。问题是从setText引起的，那就从这里出发看看。<br>点进去看下发现又调用了其重载函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@android.view.RemotableViewMethod</div><div class=\"line\">public final void setText(CharSequence text) &#123;</div><div class=\"line\">    setText(text, mBufferType);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续深入发现这个方法代码挺多的，但是不用过于关注细节，粗略浏览下不难发现前面大部分代码大多是对text文本格式的一些处理判断，无关刷新UI，直到            checkForRelayout()方法执行，从名字看是“从新布局”，根据view绘制流程测量、布局、绘制，那布局完了不是就绘制刷新了吗？所以决定去checkForRelayout方法看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setText(CharSequence text, BufferType type,</div><div class=\"line\">                     boolean notifyBefore, int oldlen) &#123;</div><div class=\"line\">    if (text == null) &#123;</div><div class=\"line\">        text = &quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // If suggestions are not enabled, remove the suggestion spans from the text</div><div class=\"line\">    if (!isSuggestionsEnabled()) &#123;</div><div class=\"line\">        text = removeSuggestionSpans(text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (!mUserSetTextScaleX) mTextPaint.setTextScaleX(1.0f);</div><div class=\"line\"></div><div class=\"line\">    if (text instanceof Spanned &amp;&amp;</div><div class=\"line\">        ((Spanned) text).getSpanStart(TextUtils.TruncateAt.MARQUEE) &gt;= 0) &#123;</div><div class=\"line\">        if (ViewConfiguration.get(mContext).isFadingMarqueeEnabled()) &#123;</div><div class=\"line\">            setHorizontalFadingEdgeEnabled(true);</div><div class=\"line\">            mMarqueeFadeMode = MARQUEE_FADE_NORMAL;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            setHorizontalFadingEdgeEnabled(false);</div><div class=\"line\">            mMarqueeFadeMode = MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setEllipsize(TextUtils.TruncateAt.MARQUEE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int n = mFilters.length;</div><div class=\"line\">    for (int i = 0; i &lt; n; i++) &#123;</div><div class=\"line\">        CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);</div><div class=\"line\">        if (out != null) &#123;</div><div class=\"line\">            text = out;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (notifyBefore) &#123;</div><div class=\"line\">        if (mText != null) &#123;</div><div class=\"line\">            oldlen = mText.length();</div><div class=\"line\">            sendBeforeTextChanged(mText, 0, oldlen, text.length());</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            sendBeforeTextChanged(&quot;&quot;, 0, 0, text.length());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boolean needEditableForNotification = false;</div><div class=\"line\"></div><div class=\"line\">    if (mListeners != null &amp;&amp; mListeners.size() != 0) &#123;</div><div class=\"line\">        needEditableForNotification = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (type == BufferType.EDITABLE || getKeyListener() != null ||</div><div class=\"line\">            needEditableForNotification) &#123;</div><div class=\"line\">        createEditorIfNeeded();</div><div class=\"line\">        Editable t = mEditableFactory.newEditable(text);</div><div class=\"line\">        text = t;</div><div class=\"line\">        setFilters(t, mFilters);</div><div class=\"line\">        InputMethodManager imm = InputMethodManager.peekInstance();</div><div class=\"line\">        if (imm != null) imm.restartInput(this);</div><div class=\"line\">    &#125; else if (type == BufferType.SPANNABLE || mMovement != null) &#123;</div><div class=\"line\">        text = mSpannableFactory.newSpannable(text);</div><div class=\"line\">    &#125; else if (!(text instanceof CharWrapper)) &#123;</div><div class=\"line\">        text = TextUtils.stringOrSpannedString(text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mAutoLinkMask != 0) &#123;</div><div class=\"line\">        Spannable s2;</div><div class=\"line\"></div><div class=\"line\">        if (type == BufferType.EDITABLE || text instanceof Spannable) &#123;</div><div class=\"line\">            s2 = (Spannable) text;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            s2 = mSpannableFactory.newSpannable(text);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (Linkify.addLinks(s2, mAutoLinkMask)) &#123;</div><div class=\"line\">            text = s2;</div><div class=\"line\">            type = (type == BufferType.EDITABLE) ? BufferType.EDITABLE : BufferType.SPANNABLE;</div><div class=\"line\"></div><div class=\"line\">            /*</div><div class=\"line\">             * We must go ahead and set the text before changing the</div><div class=\"line\">             * movement method, because setMovementMethod() may call</div><div class=\"line\">             * setText() again to try to upgrade the buffer type.</div><div class=\"line\">             */</div><div class=\"line\">            mText = text;</div><div class=\"line\"></div><div class=\"line\">            // Do not change the movement method for text that support text selection as it</div><div class=\"line\">            // would prevent an arbitrary cursor displacement.</div><div class=\"line\">            if (mLinksClickable &amp;&amp; !textCanBeSelected()) &#123;</div><div class=\"line\">                setMovementMethod(LinkMovementMethod.getInstance());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mBufferType = type;</div><div class=\"line\">    mText = text;</div><div class=\"line\"></div><div class=\"line\">    if (mTransformation == null) &#123;</div><div class=\"line\">        mTransformed = text;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        mTransformed = mTransformation.getTransformation(text, this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final int textLength = text.length();</div><div class=\"line\"></div><div class=\"line\">    if (text instanceof Spannable &amp;&amp; !mAllowTransformationLengthChange) &#123;</div><div class=\"line\">        Spannable sp = (Spannable) text;</div><div class=\"line\"></div><div class=\"line\">        // Remove any ChangeWatchers that might have come from other TextViews.</div><div class=\"line\">        final ChangeWatcher[] watchers = sp.getSpans(0, sp.length(), ChangeWatcher.class);</div><div class=\"line\">        final int count = watchers.length;</div><div class=\"line\">        for (int i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">            sp.removeSpan(watchers[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (mChangeWatcher == null) mChangeWatcher = new ChangeWatcher();</div><div class=\"line\"></div><div class=\"line\">        sp.setSpan(mChangeWatcher, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE |</div><div class=\"line\">                   (CHANGE_WATCHER_PRIORITY &lt;&lt; Spanned.SPAN_PRIORITY_SHIFT));</div><div class=\"line\"></div><div class=\"line\">        if (mEditor != null) mEditor.addSpanWatchers(sp);</div><div class=\"line\"></div><div class=\"line\">        if (mTransformation != null) &#123;</div><div class=\"line\">            sp.setSpan(mTransformation, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (mMovement != null) &#123;</div><div class=\"line\">            mMovement.initialize(this, (Spannable) text);</div><div class=\"line\"></div><div class=\"line\">            /*</div><div class=\"line\">             * Initializing the movement method will have set the</div><div class=\"line\">             * selection, so reset mSelectionMoved to keep that from</div><div class=\"line\">             * interfering with the normal on-focus selection-setting.</div><div class=\"line\">             */</div><div class=\"line\">            if (mEditor != null) mEditor.mSelectionMoved = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mLayout != null) &#123;</div><div class=\"line\">        checkForRelayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sendOnTextChanged(text, 0, oldlen, textLength);</div><div class=\"line\">    onTextChanged(text, 0, oldlen, textLength);</div><div class=\"line\"></div><div class=\"line\">    notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT);</div><div class=\"line\"></div><div class=\"line\">    if (needEditableForNotification) &#123;</div><div class=\"line\">        sendAfterTextChanged((Editable) text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // SelectionModifierCursorController depends on textCanBeSelected, which depends on text</div><div class=\"line\">    if (mEditor != null) mEditor.prepareCursorControllers();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>找到checkForRelayout方法查看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void checkForRelayout() &#123;</div><div class=\"line\">    // If we have a fixed width, we can just swap in a new text layout</div><div class=\"line\">    // if the text height stays the same or if the view height is fixed.</div><div class=\"line\"></div><div class=\"line\">    if ((mLayoutParams.width != LayoutParams.WRAP_CONTENT ||</div><div class=\"line\">            (mMaxWidthMode == mMinWidthMode &amp;&amp; mMaxWidth == mMinWidth)) &amp;&amp;</div><div class=\"line\">            (mHint == null || mHintLayout != null) &amp;&amp;</div><div class=\"line\">            (mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight() &gt; 0)) &#123;</div><div class=\"line\">        // Static width, so try making a new text layout.</div><div class=\"line\"></div><div class=\"line\">        int oldht = mLayout.getHeight();</div><div class=\"line\">        int want = mLayout.getWidth();</div><div class=\"line\">        int hintWant = mHintLayout == null ? 0 : mHintLayout.getWidth();</div><div class=\"line\"></div><div class=\"line\">        /*</div><div class=\"line\">         * No need to bring the text into view, since the size is not</div><div class=\"line\">         * changing (unless we do the requestLayout(), in which case it</div><div class=\"line\">         * will happen at measure).</div><div class=\"line\">         */</div><div class=\"line\">        makeNewLayout(want, hintWant, UNKNOWN_BORING, UNKNOWN_BORING,</div><div class=\"line\">                      mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight(),</div><div class=\"line\">                      false);</div><div class=\"line\"></div><div class=\"line\">        if (mEllipsize != TextUtils.TruncateAt.MARQUEE) &#123;</div><div class=\"line\">            // In a fixed-height view, so use our new text layout.</div><div class=\"line\">            if (mLayoutParams.height != LayoutParams.WRAP_CONTENT &amp;&amp;</div><div class=\"line\">                mLayoutParams.height != LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                invalidate();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            // Dynamic height, but height has stayed the same,</div><div class=\"line\">            // so use our new text layout.</div><div class=\"line\">            if (mLayout.getHeight() == oldht &amp;&amp;</div><div class=\"line\">                (mHintLayout == null || mHintLayout.getHeight() == oldht)) &#123;</div><div class=\"line\">                invalidate();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // We lose: the height has changed and we have a dynamic height.</div><div class=\"line\">        // Request a new view layout using our new text layout.</div><div class=\"line\">        requestLayout();</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // Dynamic width, so we have no choice but to request a new</div><div class=\"line\">        // view layout with a new text layout.</div><div class=\"line\">        nullLayouts();</div><div class=\"line\">        requestLayout();</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发现不管是if还是else，都要执行invalidate()，那就进去看看，一路进展比较顺利，好像离真理更进一步了。经过连续的三连调跳转到了invalidateInternal方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void invalidate() &#123;</div><div class=\"line\">       invalidate(true);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * This is where the invalidate() work actually happens. A full invalidate()</div><div class=\"line\">    * causes the drawing cache to be invalidated, but this function can be</div><div class=\"line\">    * called with invalidateCache set to false to skip that invalidation step</div><div class=\"line\">    * for cases that do not need it (for example, a component that remains at</div><div class=\"line\">    * the same dimensions with the same content).</div><div class=\"line\">    *</div><div class=\"line\">    * @param invalidateCache Whether the drawing cache for this view should be</div><div class=\"line\">    *            invalidated as well. This is usually true for a full</div><div class=\"line\">    *            invalidate, but may be set to false if the View&apos;s contents or</div><div class=\"line\">    *            dimensions have not changed.</div><div class=\"line\">    */</div><div class=\"line\">   void invalidate(boolean invalidateCache) &#123;</div><div class=\"line\">       invalidateInternal(0, 0, mRight - mLeft, mBottom - mTop, invalidateCache, true);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,</div><div class=\"line\">           boolean fullInvalidate) &#123;</div><div class=\"line\">       if (mGhostView != null) &#123;</div><div class=\"line\">           mGhostView.invalidate(true);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       if (skipInvalidate()) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       if ((mPrivateFlags &amp; (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)</div><div class=\"line\">               || (invalidateCache &amp;&amp; (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)</div><div class=\"line\">               || (mPrivateFlags &amp; PFLAG_INVALIDATED) != PFLAG_INVALIDATED</div><div class=\"line\">               || (fullInvalidate &amp;&amp; isOpaque() != mLastIsOpaque)) &#123;</div><div class=\"line\">           if (fullInvalidate) &#123;</div><div class=\"line\">               mLastIsOpaque = isOpaque();</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWN;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           mPrivateFlags |= PFLAG_DIRTY;</div><div class=\"line\"></div><div class=\"line\">           if (invalidateCache) &#123;</div><div class=\"line\">               mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Propagate the damage rectangle to the parent view.</div><div class=\"line\">           final AttachInfo ai = mAttachInfo;</div><div class=\"line\">           final ViewParent p = mParent;</div><div class=\"line\">           if (p != null &amp;&amp; ai != null &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">               final Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">               damage.set(l, t, r, b);</div><div class=\"line\">               p.invalidateChild(this, damage);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Damage the entire projection receiver, if necessary.</div><div class=\"line\">           if (mBackground != null &amp;&amp; mBackground.isProjected()) &#123;</div><div class=\"line\">               final View receiver = getProjectionReceiver();</div><div class=\"line\">               if (receiver != null) &#123;</div><div class=\"line\">                   receiver.damageInParent();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Damage the entire IsolatedZVolume receiving this view&apos;s shadow.</div><div class=\"line\">           if (isHardwareAccelerated() &amp;&amp; getZ() != 0) &#123;</div><div class=\"line\">               damageShadowReceiver();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重点看invalidateChild()这个方法，方法里面有do while循环，每次循环出当前view的parent，最后一次循环返回的parent时ViewRootImpl类实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void invalidateChild(View child, final Rect dirty) &#123;</div><div class=\"line\">       ViewParent parent = this;</div><div class=\"line\"></div><div class=\"line\">       final AttachInfo attachInfo = mAttachInfo;</div><div class=\"line\">       if (attachInfo != null) &#123;</div><div class=\"line\">           // If the child is drawing an animation, we want to copy this flag onto</div><div class=\"line\">           // ourselves and the parent to make sure the invalidate request goes</div><div class=\"line\">           // through</div><div class=\"line\">           final boolean drawAnimation = (child.mPrivateFlags &amp; PFLAG_DRAW_ANIMATION)</div><div class=\"line\">                   == PFLAG_DRAW_ANIMATION;</div><div class=\"line\"></div><div class=\"line\">           // Check whether the child that requests the invalidate is fully opaque</div><div class=\"line\">           // Views being animated or transformed are not considered opaque because we may</div><div class=\"line\">           // be invalidating their old position and need the parent to paint behind them.</div><div class=\"line\">           Matrix childMatrix = child.getMatrix();</div><div class=\"line\">           final boolean isOpaque = child.isOpaque() &amp;&amp; !drawAnimation &amp;&amp;</div><div class=\"line\">                   child.getAnimation() == null &amp;&amp; childMatrix.isIdentity();</div><div class=\"line\">           // Mark the child as dirty, using the appropriate flag</div><div class=\"line\">           // Make sure we do not set both flags at the same time</div><div class=\"line\">           int opaqueFlag = isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;</div><div class=\"line\"></div><div class=\"line\">           if (child.mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">               mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           final int[] location = attachInfo.mInvalidateChildLocation;</div><div class=\"line\">           location[CHILD_LEFT_INDEX] = child.mLeft;</div><div class=\"line\">           location[CHILD_TOP_INDEX] = child.mTop;</div><div class=\"line\">           if (!childMatrix.isIdentity() ||</div><div class=\"line\">                   (mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) &#123;</div><div class=\"line\">               RectF boundingRect = attachInfo.mTmpTransformRect;</div><div class=\"line\">               boundingRect.set(dirty);</div><div class=\"line\">               Matrix transformMatrix;</div><div class=\"line\">               if ((mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) &#123;</div><div class=\"line\">                   Transformation t = attachInfo.mTmpTransformation;</div><div class=\"line\">                   boolean transformed = getChildStaticTransformation(child, t);</div><div class=\"line\">                   if (transformed) &#123;</div><div class=\"line\">                       transformMatrix = attachInfo.mTmpMatrix;</div><div class=\"line\">                       transformMatrix.set(t.getMatrix());</div><div class=\"line\">                       if (!childMatrix.isIdentity()) &#123;</div><div class=\"line\">                           transformMatrix.preConcat(childMatrix);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; else &#123;</div><div class=\"line\">                       transformMatrix = childMatrix;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; else &#123;</div><div class=\"line\">                   transformMatrix = childMatrix;</div><div class=\"line\">               &#125;</div><div class=\"line\">               transformMatrix.mapRect(boundingRect);</div><div class=\"line\">               dirty.set((int) (boundingRect.left - 0.5f),</div><div class=\"line\">                       (int) (boundingRect.top - 0.5f),</div><div class=\"line\">                       (int) (boundingRect.right + 0.5f),</div><div class=\"line\">                       (int) (boundingRect.bottom + 0.5f));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           do &#123;</div><div class=\"line\">               View view = null;</div><div class=\"line\">               if (parent instanceof View) &#123;</div><div class=\"line\">                   view = (View) parent;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               if (drawAnimation) &#123;</div><div class=\"line\">                   if (view != null) &#123;</div><div class=\"line\">                       view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</div><div class=\"line\">                   &#125; else if (parent instanceof ViewRootImpl) &#123;</div><div class=\"line\">                       ((ViewRootImpl) parent).mIsAnimating = true;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               // If the parent is dirty opaque or not dirty, mark it dirty with the opaque</div><div class=\"line\">               // flag coming from the child that initiated the invalidate</div><div class=\"line\">               if (view != null) &#123;</div><div class=\"line\">                   if ((view.mViewFlags &amp; FADING_EDGE_MASK) != 0 &amp;&amp;</div><div class=\"line\">                           view.getSolidColor() == 0) &#123;</div><div class=\"line\">                       opaqueFlag = PFLAG_DIRTY;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   if ((view.mPrivateFlags &amp; PFLAG_DIRTY_MASK) != PFLAG_DIRTY) &#123;</div><div class=\"line\">                       view.mPrivateFlags = (view.mPrivateFlags &amp; ~PFLAG_DIRTY_MASK) | opaqueFlag;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               parent = parent.invalidateChildInParent(location, dirty);</div><div class=\"line\">               if (view != null) &#123;</div><div class=\"line\">                   // Account for transform on current parent</div><div class=\"line\">                   Matrix m = view.getMatrix();</div><div class=\"line\">                   if (!m.isIdentity()) &#123;</div><div class=\"line\">                       RectF boundingRect = attachInfo.mTmpTransformRect;</div><div class=\"line\">                       boundingRect.set(dirty);</div><div class=\"line\">                       m.mapRect(boundingRect);</div><div class=\"line\">                       dirty.set((int) (boundingRect.left - 0.5f),</div><div class=\"line\">                               (int) (boundingRect.top - 0.5f),</div><div class=\"line\">                               (int) (boundingRect.right + 0.5f),</div><div class=\"line\">                               (int) (boundingRect.bottom + 0.5f));</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; while (parent != null);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>现在查看ViewRootImpl类的invalidateChildInParent()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public ViewParent invalidateChildInParent(int[] location, Rect dirty) &#123;</div><div class=\"line\">    checkThread();</div><div class=\"line\">    if (DEBUG_DRAW) Log.v(TAG, &quot;Invalidate child: &quot; + dirty);</div><div class=\"line\"></div><div class=\"line\">    if (dirty == null) &#123;</div><div class=\"line\">        invalidate();</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125; else if (dirty.isEmpty() &amp;&amp; !mIsAnimating) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mCurScrollY != 0 || mTranslator != null) &#123;</div><div class=\"line\">        mTempRect.set(dirty);</div><div class=\"line\">        dirty = mTempRect;</div><div class=\"line\">        if (mCurScrollY != 0) &#123;</div><div class=\"line\">            dirty.offset(0, -mCurScrollY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (mTranslator != null) &#123;</div><div class=\"line\">            mTranslator.translateRectInAppWindowToScreen(dirty);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (mAttachInfo.mScalingRequired) &#123;</div><div class=\"line\">            dirty.inset(-1, -1);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final Rect localDirty = mDirty;</div><div class=\"line\">    if (!localDirty.isEmpty() &amp;&amp; !localDirty.contains(dirty)) &#123;</div><div class=\"line\">        mAttachInfo.mSetIgnoreDirtyState = true;</div><div class=\"line\">        mAttachInfo.mIgnoreDirtyState = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Add the new dirty rect to the current one</div><div class=\"line\">    localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);</div><div class=\"line\">    // Intersect with the bounds of the window to skip</div><div class=\"line\">    // updates that lie outside of the visible region</div><div class=\"line\">    final float appScale = mAttachInfo.mApplicationScale;</div><div class=\"line\">    final boolean intersected = localDirty.intersect(0, 0,</div><div class=\"line\">            (int) (mWidth * appScale + 0.5f), (int) (mHeight * appScale + 0.5f));</div><div class=\"line\">    if (!intersected) &#123;</div><div class=\"line\">        localDirty.setEmpty();</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!mWillDrawSoon &amp;&amp; (intersected || mIsAnimating)) &#123;</div><div class=\"line\">        scheduleTraversals();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方法块的第一行好像就是我们要找的验证线程的地方checkThread()，而该方法内容也很简单，看到抛出的异常就很熟悉了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">void checkThread() &#123;</div><div class=\"line\">    if (mThread != Thread.currentThread()) &#123;</div><div class=\"line\">        throw new CalledFromWrongThreadException(</div><div class=\"line\">                &quot;Only the original thread that created a view hierarchy can touch its views.&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二步，验证线程地方已经找到了，假设得到了证实，那么为什么该有的异常没有出现呢？现在再次假设是不是因为某些原因导致checkThread()没有执行呢？</p>\n<p>有人可能会问会不会是mThread == Thread.currentThread()？其实这是不可能的 ，先看下mThread赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ViewRootImpl(Context context, Display display) &#123;</div><div class=\"line\">    mContext = context;</div><div class=\"line\">    mWindowSession = WindowManagerGlobal.getWindowSession();</div><div class=\"line\">    mDisplay = display;</div><div class=\"line\">    mBasePackageName = context.getBasePackageName();</div><div class=\"line\"></div><div class=\"line\">    mDisplayAdjustments = display.getDisplayAdjustments();</div><div class=\"line\"></div><div class=\"line\">    mThread = Thread.currentThread();</div></pre></td></tr></table></figure>\n<p>ViewRootImpl类实例化是在Activity启动时的主线程创建的，所以mThread是主线程实例，而checkThread()中的Thread.currentThread()，最初是由textView.setText()调用的一系列方法栈，并且setText是在子线程调用。</p>\n<p>继续刚才的假设，不过现在要逆推回去，checkThread()方法没有执行，可以认为ViewRootImpl的invalidateChildInParent()方法没有执行，它又是在ViewGroup中invalidateChild()方法里的do while中调用，要使do while不被调用，继续往上看，如果attachInfo为null，进不去if语句块也就不会执行checkThread()了，这是第一个可能的原因。记录下，继续逆推。</p>\n<p>View中的invalidateInternal()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Propagate the damage rectangle to the parent view.</div><div class=\"line\">      final AttachInfo ai = mAttachInfo;</div><div class=\"line\">      final ViewParent p = mParent;</div><div class=\"line\">      if (p != null &amp;&amp; ai != null &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">          final Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">          damage.set(l, t, r, b);</div><div class=\"line\">          p.invalidateChild(this, damage);</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>根据判断条件，如果p即mParent或者ai即mAttachInfo 任一为null，都不会执行invalidateChild，这是第二个可能原因，这里的ai和第一个原因的attachInfo是一样的，所以第一个原因可能忽略，精力关注在第二个原因上。</p>\n<blockquote>\n<p>现在的关注点是实例p和ai是什么时候创建的，有没有为null的现象？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">final AttachInfo ai = mAttachInfo;</div></pre></td></tr></table></figure>\n<p>而mAttachInfo是在View的dispatchAttachedToWindow()方法中赋值的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void dispatchAttachedToWindow(AttachInfo info, int visibility) &#123;</div><div class=\"line\">        //System.out.println(&quot;Attached! &quot; + this);</div><div class=\"line\">        mAttachInfo = info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View的dispatchAttachedToWindow()方法是在ViewRootImpl中的performTraversals()方法调用，这个方法是遍历View Tree</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void performTraversals() &#123;</div><div class=\"line\">       // cache mView since it is used so much below...</div><div class=\"line\">       final View host = mView;</div><div class=\"line\">       ·······</div><div class=\"line\">       host.dispatchAttachedToWindow(mAttachInfo, 0);</div></pre></td></tr></table></figure>\n<p>可见View中的mAttachInfo来自ViewrootImpl的mAttachInfo，而ViewrootImpl的mAttachInfo是在其构造方法中被赋值的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public ViewRootImpl(Context context, Display display) &#123;</div><div class=\"line\">    mContext = context;</div><div class=\"line\">    mWindowSession = WindowManagerGlobal.getWindowSession();</div><div class=\"line\">    mDisplay = display;</div><div class=\"line\">    mBasePackageName = context.getBasePackageName();</div><div class=\"line\"></div><div class=\"line\">    mDisplayAdjustments = display.getDisplayAdjustments();</div><div class=\"line\"></div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">    mLocation = new WindowLeaked(null);</div><div class=\"line\">    mLocation.fillInStackTrace();</div><div class=\"line\">    mWidth = -1;</div><div class=\"line\">    mHeight = -1;</div><div class=\"line\">    mDirty = new Rect();</div><div class=\"line\">    mTempRect = new Rect();</div><div class=\"line\">    mVisRect = new Rect();</div><div class=\"line\">    mWinFrame = new Rect();</div><div class=\"line\">    mWindow = new W(this);</div><div class=\"line\">    mTargetSdkVersion = context.getApplicationInfo().targetSdkVersion;</div><div class=\"line\">    mViewVisibility = View.GONE;</div><div class=\"line\">    mTransparentRegion = new Region();</div><div class=\"line\">    mPreviousTransparentRegion = new Region();</div><div class=\"line\">    mFirst = true; // true for the first time the view is added</div><div class=\"line\">    mAdded = false;</div><div class=\"line\">    mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之前说了ViewRootImpl实例是在Activity启动时创建的，现在看看具体是启动的什么时候:在向window添加view的时候即：WindowManagerGlobal的addView方法中创建ViewrootImpl实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void addView(View view, ViewGroup.LayoutParams params,</div><div class=\"line\">           Display display, Window parentWindow) &#123;</div><div class=\"line\">       if (view == null) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;view must not be null&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (display == null) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;display must not be null&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (!(params instanceof WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;Params must be WindowManager.LayoutParams&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\">       if (parentWindow != null) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; else &#123;</div><div class=\"line\">           // If there&apos;s no parent and we&apos;re running on L or above (or in the</div><div class=\"line\">           // system context), assume we want hardware acceleration.</div><div class=\"line\">           final Context context = view.getContext();</div><div class=\"line\">           if (context != null</div><div class=\"line\">                   &amp;&amp; context.getApplicationInfo().targetSdkVersion &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ViewRootImpl root;</div><div class=\"line\">       View panelParentView = null;</div><div class=\"line\"></div><div class=\"line\">       synchronized (mLock) &#123;</div><div class=\"line\">           // Start watching for system property changes.</div><div class=\"line\">           if (mSystemPropertyUpdater == null) &#123;</div><div class=\"line\">               mSystemPropertyUpdater = new Runnable() &#123;</div><div class=\"line\">                   @Override public void run() &#123;</div><div class=\"line\">                       synchronized (mLock) &#123;</div><div class=\"line\">                           for (int i = mRoots.size() - 1; i &gt;= 0; --i) &#123;</div><div class=\"line\">                               mRoots.get(i).loadSystemProperties();</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;;</div><div class=\"line\">               SystemProperties.addChangeCallback(mSystemPropertyUpdater);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           int index = findViewLocked(view, false);</div><div class=\"line\">           if (index &gt;= 0) &#123;</div><div class=\"line\">               if (mDyingViews.contains(view)) &#123;</div><div class=\"line\">                   // Don&apos;t wait for MSG_DIE to make it&apos;s way through root&apos;s queue.</div><div class=\"line\">                   mRoots.get(index).doDie();</div><div class=\"line\">               &#125; else &#123;</div><div class=\"line\">                   throw new IllegalStateException(&quot;View &quot; + view</div><div class=\"line\">                           + &quot; has already been added to the window manager.&quot;);</div><div class=\"line\">               &#125;</div><div class=\"line\">               // The previous removeView() had not completed executing. Now it has.</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // If this is a panel window, then find the window it is being</div><div class=\"line\">           // attached to for future reference.</div><div class=\"line\">           if (wparams.type &gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;&amp;</div><div class=\"line\">                   wparams.type &lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) &#123;</div><div class=\"line\">               final int count = mViews.size();</div><div class=\"line\">               for (int i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">                   if (mRoots.get(i).mWindow.asBinder() == wparams.token) &#123;</div><div class=\"line\">                       panelParentView = mViews.get(i);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           root = new ViewRootImpl(view.getContext(), display);</div><div class=\"line\"></div><div class=\"line\">           view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">           mViews.add(view);</div><div class=\"line\">           mRoots.add(root);</div><div class=\"line\">           mParams.add(wparams);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       // do this last because it fires off messages to start doing things</div><div class=\"line\">       try &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; catch (RuntimeException e) &#123;</div><div class=\"line\">           // BadTokenException or InvalidDisplayException, clean up.</div><div class=\"line\">           synchronized (mLock) &#123;</div><div class=\"line\">               final int index = findViewLocked(view, false);</div><div class=\"line\">               if (index &gt;= 0) &#123;</div><div class=\"line\">                   removeViewLocked(index, true);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           throw e;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>而调用addView()方法是在ActivityThread类的handleResumeActivity()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">final void handleResumeActivity(IBinder token,</div><div class=\"line\">        boolean clearHide, boolean isForward, boolean reallyResume) &#123;</div><div class=\"line\">    // If we are getting ready to gc after going to the background, well</div><div class=\"line\">    // we are back active so skip it.</div><div class=\"line\">    unscheduleGcIdler();</div><div class=\"line\">    mSomeActivitiesChanged = true;</div><div class=\"line\"></div><div class=\"line\">    // TODO Push resumeArgs into the activity for consideration</div><div class=\"line\">    ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\"></div><div class=\"line\">    if (r != null) &#123;</div><div class=\"line\">        final Activity a = r.activity;</div><div class=\"line\"></div><div class=\"line\">        if (localLOGV) Slog.v(</div><div class=\"line\">            TAG, &quot;Resume &quot; + r + &quot; started activity: &quot; +</div><div class=\"line\">            a.mStartedActivity + &quot;, hideForNow: &quot; + r.hideForNow</div><div class=\"line\">            + &quot;, finished: &quot; + a.mFinished);</div><div class=\"line\"></div><div class=\"line\">        final int forwardBit = isForward ?</div><div class=\"line\">                WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;</div><div class=\"line\"></div><div class=\"line\">        // If the window hasn&apos;t yet been added to the window manager,</div><div class=\"line\">        // and this guy didn&apos;t finish itself or start another activity,</div><div class=\"line\">        // then go ahead and add the window.</div><div class=\"line\">        boolean willBeVisible = !a.mStartedActivity;</div><div class=\"line\">        if (!willBeVisible) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(</div><div class=\"line\">                        a.getActivityToken());</div><div class=\"line\">            &#125; catch (RemoteException e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">            r.window = r.activity.getWindow();</div><div class=\"line\">            View decor = r.window.getDecorView();</div><div class=\"line\">            decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">            ViewManager wm = a.getWindowManager();</div><div class=\"line\">            WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">            a.mDecor = decor;</div><div class=\"line\">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">            l.softInputMode |= forwardBit;</div><div class=\"line\">            if (a.mVisibleFromClient) &#123;</div><div class=\"line\">                a.mWindowAdded = true;</div><div class=\"line\">                wm.addView(decor, l);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        // If the window has already been added, but during resume</div><div class=\"line\">        // we started another activity, then don&apos;t yet make the</div><div class=\"line\">        // window visible.</div><div class=\"line\">        &#125; else if (!willBeVisible) &#123;</div><div class=\"line\">            if (localLOGV) Slog.v(</div><div class=\"line\">                TAG, &quot;Launch &quot; + r + &quot; mStartedActivity set&quot;);</div><div class=\"line\">            r.hideForNow = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // Get rid of anything left hanging around.</div><div class=\"line\">        cleanUpPendingRemoveWindows(r);</div><div class=\"line\"></div><div class=\"line\">        // The window is now visible if it has been added, we are not</div><div class=\"line\">        // simply finishing, and we are not starting another activity.</div><div class=\"line\">        if (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                &amp;&amp; r.activity.mDecor != null &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">            if (r.newConfig != null) &#123;</div><div class=\"line\">                if (DEBUG_CONFIGURATION) Slog.v(TAG, &quot;Resuming activity &quot;</div><div class=\"line\">                        + r.activityInfo.name + &quot; with newConfig &quot; + r.newConfig);</div><div class=\"line\">                performConfigurationChanged(r.activity, r.newConfig);</div><div class=\"line\">                freeTextLayoutCachesIfNeeded(r.activity.mCurrentConfig.diff(r.newConfig));</div><div class=\"line\">                r.newConfig = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (localLOGV) Slog.v(TAG, &quot;Resuming &quot; + r + &quot; with isForward=&quot;</div><div class=\"line\">                    + isForward);</div><div class=\"line\">            WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">            if ((l.softInputMode</div><div class=\"line\">                    &amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)</div><div class=\"line\">                    != forwardBit) &#123;</div><div class=\"line\">                l.softInputMode = (l.softInputMode</div><div class=\"line\">                        &amp; (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))</div><div class=\"line\">                        | forwardBit;</div><div class=\"line\">                if (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                    ViewManager wm = a.getWindowManager();</div><div class=\"line\">                    View decor = r.window.getDecorView();</div><div class=\"line\">                    wm.updateViewLayout(decor, l);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            r.activity.mVisibleFromServer = true;</div><div class=\"line\">            mNumVisibleActivities++;</div><div class=\"line\">            if (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                r.activity.makeVisible();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (!r.onlyLocalRequest) &#123;</div><div class=\"line\">            r.nextIdle = mNewActivities;</div><div class=\"line\">            mNewActivities = r;</div><div class=\"line\">            if (localLOGV) Slog.v(</div><div class=\"line\">                TAG, &quot;Scheduling idle handler for &quot; + r);</div><div class=\"line\">            Looper.myQueue().addIdleHandler(new Idler());</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.onlyLocalRequest = false;</div><div class=\"line\"></div><div class=\"line\">        // Tell the activity manager we have resumed.</div><div class=\"line\">        if (reallyResume) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                ActivityManagerNative.getDefault().activityResumed(token);</div><div class=\"line\">            &#125; catch (RemoteException ex) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // If an exception was thrown when trying to resume, then</div><div class=\"line\">        // just end this activity.</div><div class=\"line\">        try &#123;</div><div class=\"line\">            ActivityManagerNative.getDefault()</div><div class=\"line\">                .finishActivity(token, Activity.RESULT_CANCELED, null, false);</div><div class=\"line\">        &#125; catch (RemoteException ex) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到上面的方法有些人心里可能有底儿了，handleResumeActivity()方法是不是让Activity回调onResume？如果是的话一切就都明了了，因为ViewrootImpl是在onReume期间创建，而AttachInfo是在ViewRootImpl实例化时创建，我们的工作线程是在onCreate时刷新UI的，那时候还没有实例化AttachInfo，导致mAttachInfo为null，最终if条件判断失败没有进入。然而这一切都是在YY，实践才是检验真理的唯一标准，动起来：</p>\n<p>看到这一行代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\">```微微一笑，点进去看看，</div></pre></td></tr></table></figure></p>\n<pre><code>public final ActivityClientRecord performResumeActivity(IBinder token,\n        boolean clearHide) {\n    ActivityClientRecord r = mActivities.get(token);\n    if (localLOGV) Slog.v(TAG, &quot;Performing resume of &quot; + r\n            + &quot; finished=&quot; + r.activity.mFinished);\n    if (r != null &amp;&amp; !r.activity.mFinished) {\n        if (clearHide) {\n            r.hideForNow = false;\n            r.activity.mStartedActivity = false;\n        }\n        try {\n            r.activity.mFragments.noteStateNotSaved();\n            if (r.pendingIntents != null) {\n                deliverNewIntents(r, r.pendingIntents);\n                r.pendingIntents = null;\n            }\n            if (r.pendingResults != null) {\n                deliverResults(r, r.pendingResults);\n                r.pendingResults = null;\n            }\n            r.activity.performResume();\n\n            EventLog.writeEvent(LOG_ON_RESUME_CALLED,\n                    UserHandle.myUserId(), r.activity.getComponentName().getClassName());\n\n            r.paused = false;\n            r.stopped = false;\n            r.state = null;\n            r.persistentState = null;\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(r.activity, e)) {\n                throw new RuntimeException(\n                    &quot;Unable to resume activity &quot;\n                    + r.intent.getComponent().toShortString()\n                    + &quot;: &quot; + e.toString(), e);\n            }\n        }\n    }\n    return r;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">代码很短，很容易提取有用信息：``` r.activity.performResume();```在进去看看：</div></pre></td></tr></table></figure>\n<pre><code>final void performResume() {\n    performRestart();\n\n    mFragments.execPendingActions();\n\n    mLastNonConfigurationInstances = null;\n\n    mCalled = false;\n    // mResumed is set by the instrumentation\n    mInstrumentation.callActivityOnResume(this);\n    if (!mCalled) {\n        throw new SuperNotCalledException(\n            &quot;Activity &quot; + mComponent.toShortString() +\n            &quot; did not call through to super.onResume()&quot;);\n    }\n\n    // Now really resume, and install the current status bar and menu.\n    mCalled = false;\n\n    mFragments.dispatchResume();\n    mFragments.execPendingActions();\n\n    onPostResume();\n    if (!mCalled) {\n        throw new SuperNotCalledException(\n            &quot;Activity &quot; + mComponent.toShortString() +\n            &quot; did not call through to super.onPostResume()&quot;);\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">看到```mInstrumentation```这个属性就能感觉到越来越接近SDK API层了，看看它的```callActivityOnResume()```方法做了什么：</div></pre></td></tr></table></figure>\n<pre><code>public void callActivityOnResume(Activity activity) {\n    activity.mResumed = true;\n    activity.onResume();\n\n    if (mActivityMonitors != null) {\n        synchronized (mSync) {\n            final int N = mActivityMonitors.size();\n            for (int i=0; i&lt;N; i++) {\n                final ActivityMonitor am = mActivityMonitors.get(i);\n                am.match(activity, activity, activity.getIntent());\n            }\n        }\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">一行```activity.onResume();```已经水落石出。</div><div class=\"line\">回到handleResumeActivity代码中，我精简下：</div></pre></td></tr></table></figure>\n<p> final void handleResumeActivity(IBinder token,<br>            boolean clearHide, boolean isForward, boolean reallyResume) {<br>   //这里是最终回调Activity的onResume()方法<br>        ActivityClientRecord r = performResumeActivity(token, clearHide);<br>//省略若干<br>        if (r != null) {<br>            final Activity a = r.activity;<br>            final int forwardBit = isForward ?<br>            WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;<br>            boolean willBeVisible = !a.mStartedActivity;</p>\n<pre><code>if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) {\n    r.window = r.activity.getWindow();\n    View decor = r.window.getDecorView();\n    decor.setVisibility(View.INVISIBLE);\n    ViewManager wm = a.getWindowManager();\n    WindowManager.LayoutParams l = r.window.getAttributes();\n    a.mDecor = decor;\n    l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n    l.softInputMode |= forwardBit;\n    if (a.mVisibleFromClient) {\n        a.mWindowAdded = true;\n</code></pre><p>//这里是调用WindowManagerGlobal的addView()方法最终实例化ViewRootImpl，进而实例化AttachInfo<br>                    wm.addView(decor, l);<br>                }</p>\n<pre><code>        } else if (!willBeVisible) {\n            if (localLOGV) Slog.v(\n                TAG, &quot;Launch &quot; + r + &quot; mStartedActivity set&quot;);\n            r.hideForNow = true;\n        }\n    }\n}\n</code></pre><p>```</p>\n<p>另外关于阅读源码问题，win下当然使用SourceInsight不二选，如果是在mac下可以参考我的<a href=\"http://www.jianshu.com/p/c295d2729ecf\" target=\"_blank\" rel=\"external\">osx下如何使用SublimeText阅读Android系统源码</a>.。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从做Android开发以来就一直被灌输“只能在主线程刷新UI”的思想，但是这两天发现个问题，在onCreate中创建工作线程并刷新UI没有报错。代码是这样的：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">   final TextView tv = (TextView) findViewById(R.id.sample_text);</div><div class=\"line\">   new Thread(new Runnable() &#123;</div><div class=\"line\">       @Override</div><div class=\"line\">       public void run() &#123;</div><div class=\"line\">           tv.setText(&quot;来自&quot;+Thread.currentThread().getName()+&quot;线程的更新&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;).start();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>期待已久的crash没有出现，反而页面是这样显示的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-7be6319d0fc94867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-03-26 下午7.14.46.png\"><br>不禁让人陷入深思···<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-8a0ce88639c31d1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"思考.jpg\"></p>\n<p>第一步，分析问题原因。以前工作线程刷新UI会出现异常并提示只能在UI线程刷新UI。所以假设有个地方(函数)会在刷新UI前判断当前线程是不是主线程，那么现在问题就是验证下是否真的存在这么个地方。问题是从setText引起的，那就从这里出发看看。<br>点进去看下发现又调用了其重载函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@android.view.RemotableViewMethod</div><div class=\"line\">public final void setText(CharSequence text) &#123;</div><div class=\"line\">    setText(text, mBufferType);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>继续深入发现这个方法代码挺多的，但是不用过于关注细节，粗略浏览下不难发现前面大部分代码大多是对text文本格式的一些处理判断，无关刷新UI，直到            checkForRelayout()方法执行，从名字看是“从新布局”，根据view绘制流程测量、布局、绘制，那布局完了不是就绘制刷新了吗？所以决定去checkForRelayout方法看看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setText(CharSequence text, BufferType type,</div><div class=\"line\">                     boolean notifyBefore, int oldlen) &#123;</div><div class=\"line\">    if (text == null) &#123;</div><div class=\"line\">        text = &quot;&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // If suggestions are not enabled, remove the suggestion spans from the text</div><div class=\"line\">    if (!isSuggestionsEnabled()) &#123;</div><div class=\"line\">        text = removeSuggestionSpans(text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (!mUserSetTextScaleX) mTextPaint.setTextScaleX(1.0f);</div><div class=\"line\"></div><div class=\"line\">    if (text instanceof Spanned &amp;&amp;</div><div class=\"line\">        ((Spanned) text).getSpanStart(TextUtils.TruncateAt.MARQUEE) &gt;= 0) &#123;</div><div class=\"line\">        if (ViewConfiguration.get(mContext).isFadingMarqueeEnabled()) &#123;</div><div class=\"line\">            setHorizontalFadingEdgeEnabled(true);</div><div class=\"line\">            mMarqueeFadeMode = MARQUEE_FADE_NORMAL;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            setHorizontalFadingEdgeEnabled(false);</div><div class=\"line\">            mMarqueeFadeMode = MARQUEE_FADE_SWITCH_SHOW_ELLIPSIS;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setEllipsize(TextUtils.TruncateAt.MARQUEE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int n = mFilters.length;</div><div class=\"line\">    for (int i = 0; i &lt; n; i++) &#123;</div><div class=\"line\">        CharSequence out = mFilters[i].filter(text, 0, text.length(), EMPTY_SPANNED, 0, 0);</div><div class=\"line\">        if (out != null) &#123;</div><div class=\"line\">            text = out;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (notifyBefore) &#123;</div><div class=\"line\">        if (mText != null) &#123;</div><div class=\"line\">            oldlen = mText.length();</div><div class=\"line\">            sendBeforeTextChanged(mText, 0, oldlen, text.length());</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            sendBeforeTextChanged(&quot;&quot;, 0, 0, text.length());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boolean needEditableForNotification = false;</div><div class=\"line\"></div><div class=\"line\">    if (mListeners != null &amp;&amp; mListeners.size() != 0) &#123;</div><div class=\"line\">        needEditableForNotification = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (type == BufferType.EDITABLE || getKeyListener() != null ||</div><div class=\"line\">            needEditableForNotification) &#123;</div><div class=\"line\">        createEditorIfNeeded();</div><div class=\"line\">        Editable t = mEditableFactory.newEditable(text);</div><div class=\"line\">        text = t;</div><div class=\"line\">        setFilters(t, mFilters);</div><div class=\"line\">        InputMethodManager imm = InputMethodManager.peekInstance();</div><div class=\"line\">        if (imm != null) imm.restartInput(this);</div><div class=\"line\">    &#125; else if (type == BufferType.SPANNABLE || mMovement != null) &#123;</div><div class=\"line\">        text = mSpannableFactory.newSpannable(text);</div><div class=\"line\">    &#125; else if (!(text instanceof CharWrapper)) &#123;</div><div class=\"line\">        text = TextUtils.stringOrSpannedString(text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mAutoLinkMask != 0) &#123;</div><div class=\"line\">        Spannable s2;</div><div class=\"line\"></div><div class=\"line\">        if (type == BufferType.EDITABLE || text instanceof Spannable) &#123;</div><div class=\"line\">            s2 = (Spannable) text;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            s2 = mSpannableFactory.newSpannable(text);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (Linkify.addLinks(s2, mAutoLinkMask)) &#123;</div><div class=\"line\">            text = s2;</div><div class=\"line\">            type = (type == BufferType.EDITABLE) ? BufferType.EDITABLE : BufferType.SPANNABLE;</div><div class=\"line\"></div><div class=\"line\">            /*</div><div class=\"line\">             * We must go ahead and set the text before changing the</div><div class=\"line\">             * movement method, because setMovementMethod() may call</div><div class=\"line\">             * setText() again to try to upgrade the buffer type.</div><div class=\"line\">             */</div><div class=\"line\">            mText = text;</div><div class=\"line\"></div><div class=\"line\">            // Do not change the movement method for text that support text selection as it</div><div class=\"line\">            // would prevent an arbitrary cursor displacement.</div><div class=\"line\">            if (mLinksClickable &amp;&amp; !textCanBeSelected()) &#123;</div><div class=\"line\">                setMovementMethod(LinkMovementMethod.getInstance());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mBufferType = type;</div><div class=\"line\">    mText = text;</div><div class=\"line\"></div><div class=\"line\">    if (mTransformation == null) &#123;</div><div class=\"line\">        mTransformed = text;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        mTransformed = mTransformation.getTransformation(text, this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final int textLength = text.length();</div><div class=\"line\"></div><div class=\"line\">    if (text instanceof Spannable &amp;&amp; !mAllowTransformationLengthChange) &#123;</div><div class=\"line\">        Spannable sp = (Spannable) text;</div><div class=\"line\"></div><div class=\"line\">        // Remove any ChangeWatchers that might have come from other TextViews.</div><div class=\"line\">        final ChangeWatcher[] watchers = sp.getSpans(0, sp.length(), ChangeWatcher.class);</div><div class=\"line\">        final int count = watchers.length;</div><div class=\"line\">        for (int i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">            sp.removeSpan(watchers[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (mChangeWatcher == null) mChangeWatcher = new ChangeWatcher();</div><div class=\"line\"></div><div class=\"line\">        sp.setSpan(mChangeWatcher, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE |</div><div class=\"line\">                   (CHANGE_WATCHER_PRIORITY &lt;&lt; Spanned.SPAN_PRIORITY_SHIFT));</div><div class=\"line\"></div><div class=\"line\">        if (mEditor != null) mEditor.addSpanWatchers(sp);</div><div class=\"line\"></div><div class=\"line\">        if (mTransformation != null) &#123;</div><div class=\"line\">            sp.setSpan(mTransformation, 0, textLength, Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (mMovement != null) &#123;</div><div class=\"line\">            mMovement.initialize(this, (Spannable) text);</div><div class=\"line\"></div><div class=\"line\">            /*</div><div class=\"line\">             * Initializing the movement method will have set the</div><div class=\"line\">             * selection, so reset mSelectionMoved to keep that from</div><div class=\"line\">             * interfering with the normal on-focus selection-setting.</div><div class=\"line\">             */</div><div class=\"line\">            if (mEditor != null) mEditor.mSelectionMoved = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mLayout != null) &#123;</div><div class=\"line\">        checkForRelayout();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sendOnTextChanged(text, 0, oldlen, textLength);</div><div class=\"line\">    onTextChanged(text, 0, oldlen, textLength);</div><div class=\"line\"></div><div class=\"line\">    notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT);</div><div class=\"line\"></div><div class=\"line\">    if (needEditableForNotification) &#123;</div><div class=\"line\">        sendAfterTextChanged((Editable) text);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // SelectionModifierCursorController depends on textCanBeSelected, which depends on text</div><div class=\"line\">    if (mEditor != null) mEditor.prepareCursorControllers();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>找到checkForRelayout方法查看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void checkForRelayout() &#123;</div><div class=\"line\">    // If we have a fixed width, we can just swap in a new text layout</div><div class=\"line\">    // if the text height stays the same or if the view height is fixed.</div><div class=\"line\"></div><div class=\"line\">    if ((mLayoutParams.width != LayoutParams.WRAP_CONTENT ||</div><div class=\"line\">            (mMaxWidthMode == mMinWidthMode &amp;&amp; mMaxWidth == mMinWidth)) &amp;&amp;</div><div class=\"line\">            (mHint == null || mHintLayout != null) &amp;&amp;</div><div class=\"line\">            (mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight() &gt; 0)) &#123;</div><div class=\"line\">        // Static width, so try making a new text layout.</div><div class=\"line\"></div><div class=\"line\">        int oldht = mLayout.getHeight();</div><div class=\"line\">        int want = mLayout.getWidth();</div><div class=\"line\">        int hintWant = mHintLayout == null ? 0 : mHintLayout.getWidth();</div><div class=\"line\"></div><div class=\"line\">        /*</div><div class=\"line\">         * No need to bring the text into view, since the size is not</div><div class=\"line\">         * changing (unless we do the requestLayout(), in which case it</div><div class=\"line\">         * will happen at measure).</div><div class=\"line\">         */</div><div class=\"line\">        makeNewLayout(want, hintWant, UNKNOWN_BORING, UNKNOWN_BORING,</div><div class=\"line\">                      mRight - mLeft - getCompoundPaddingLeft() - getCompoundPaddingRight(),</div><div class=\"line\">                      false);</div><div class=\"line\"></div><div class=\"line\">        if (mEllipsize != TextUtils.TruncateAt.MARQUEE) &#123;</div><div class=\"line\">            // In a fixed-height view, so use our new text layout.</div><div class=\"line\">            if (mLayoutParams.height != LayoutParams.WRAP_CONTENT &amp;&amp;</div><div class=\"line\">                mLayoutParams.height != LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">                invalidate();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            // Dynamic height, but height has stayed the same,</div><div class=\"line\">            // so use our new text layout.</div><div class=\"line\">            if (mLayout.getHeight() == oldht &amp;&amp;</div><div class=\"line\">                (mHintLayout == null || mHintLayout.getHeight() == oldht)) &#123;</div><div class=\"line\">                invalidate();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // We lose: the height has changed and we have a dynamic height.</div><div class=\"line\">        // Request a new view layout using our new text layout.</div><div class=\"line\">        requestLayout();</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // Dynamic width, so we have no choice but to request a new</div><div class=\"line\">        // view layout with a new text layout.</div><div class=\"line\">        nullLayouts();</div><div class=\"line\">        requestLayout();</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发现不管是if还是else，都要执行invalidate()，那就进去看看，一路进展比较顺利，好像离真理更进一步了。经过连续的三连调跳转到了invalidateInternal方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void invalidate() &#123;</div><div class=\"line\">       invalidate(true);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * This is where the invalidate() work actually happens. A full invalidate()</div><div class=\"line\">    * causes the drawing cache to be invalidated, but this function can be</div><div class=\"line\">    * called with invalidateCache set to false to skip that invalidation step</div><div class=\"line\">    * for cases that do not need it (for example, a component that remains at</div><div class=\"line\">    * the same dimensions with the same content).</div><div class=\"line\">    *</div><div class=\"line\">    * @param invalidateCache Whether the drawing cache for this view should be</div><div class=\"line\">    *            invalidated as well. This is usually true for a full</div><div class=\"line\">    *            invalidate, but may be set to false if the View&apos;s contents or</div><div class=\"line\">    *            dimensions have not changed.</div><div class=\"line\">    */</div><div class=\"line\">   void invalidate(boolean invalidateCache) &#123;</div><div class=\"line\">       invalidateInternal(0, 0, mRight - mLeft, mBottom - mTop, invalidateCache, true);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">  void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,</div><div class=\"line\">           boolean fullInvalidate) &#123;</div><div class=\"line\">       if (mGhostView != null) &#123;</div><div class=\"line\">           mGhostView.invalidate(true);</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       if (skipInvalidate()) &#123;</div><div class=\"line\">           return;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       if ((mPrivateFlags &amp; (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)</div><div class=\"line\">               || (invalidateCache &amp;&amp; (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)</div><div class=\"line\">               || (mPrivateFlags &amp; PFLAG_INVALIDATED) != PFLAG_INVALIDATED</div><div class=\"line\">               || (fullInvalidate &amp;&amp; isOpaque() != mLastIsOpaque)) &#123;</div><div class=\"line\">           if (fullInvalidate) &#123;</div><div class=\"line\">               mLastIsOpaque = isOpaque();</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWN;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           mPrivateFlags |= PFLAG_DIRTY;</div><div class=\"line\"></div><div class=\"line\">           if (invalidateCache) &#123;</div><div class=\"line\">               mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Propagate the damage rectangle to the parent view.</div><div class=\"line\">           final AttachInfo ai = mAttachInfo;</div><div class=\"line\">           final ViewParent p = mParent;</div><div class=\"line\">           if (p != null &amp;&amp; ai != null &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">               final Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">               damage.set(l, t, r, b);</div><div class=\"line\">               p.invalidateChild(this, damage);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Damage the entire projection receiver, if necessary.</div><div class=\"line\">           if (mBackground != null &amp;&amp; mBackground.isProjected()) &#123;</div><div class=\"line\">               final View receiver = getProjectionReceiver();</div><div class=\"line\">               if (receiver != null) &#123;</div><div class=\"line\">                   receiver.damageInParent();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // Damage the entire IsolatedZVolume receiving this view&apos;s shadow.</div><div class=\"line\">           if (isHardwareAccelerated() &amp;&amp; getZ() != 0) &#123;</div><div class=\"line\">               damageShadowReceiver();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重点看invalidateChild()这个方法，方法里面有do while循环，每次循环出当前view的parent，最后一次循环返回的parent时ViewRootImpl类实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void invalidateChild(View child, final Rect dirty) &#123;</div><div class=\"line\">       ViewParent parent = this;</div><div class=\"line\"></div><div class=\"line\">       final AttachInfo attachInfo = mAttachInfo;</div><div class=\"line\">       if (attachInfo != null) &#123;</div><div class=\"line\">           // If the child is drawing an animation, we want to copy this flag onto</div><div class=\"line\">           // ourselves and the parent to make sure the invalidate request goes</div><div class=\"line\">           // through</div><div class=\"line\">           final boolean drawAnimation = (child.mPrivateFlags &amp; PFLAG_DRAW_ANIMATION)</div><div class=\"line\">                   == PFLAG_DRAW_ANIMATION;</div><div class=\"line\"></div><div class=\"line\">           // Check whether the child that requests the invalidate is fully opaque</div><div class=\"line\">           // Views being animated or transformed are not considered opaque because we may</div><div class=\"line\">           // be invalidating their old position and need the parent to paint behind them.</div><div class=\"line\">           Matrix childMatrix = child.getMatrix();</div><div class=\"line\">           final boolean isOpaque = child.isOpaque() &amp;&amp; !drawAnimation &amp;&amp;</div><div class=\"line\">                   child.getAnimation() == null &amp;&amp; childMatrix.isIdentity();</div><div class=\"line\">           // Mark the child as dirty, using the appropriate flag</div><div class=\"line\">           // Make sure we do not set both flags at the same time</div><div class=\"line\">           int opaqueFlag = isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;</div><div class=\"line\"></div><div class=\"line\">           if (child.mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">               mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">               mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           final int[] location = attachInfo.mInvalidateChildLocation;</div><div class=\"line\">           location[CHILD_LEFT_INDEX] = child.mLeft;</div><div class=\"line\">           location[CHILD_TOP_INDEX] = child.mTop;</div><div class=\"line\">           if (!childMatrix.isIdentity() ||</div><div class=\"line\">                   (mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) &#123;</div><div class=\"line\">               RectF boundingRect = attachInfo.mTmpTransformRect;</div><div class=\"line\">               boundingRect.set(dirty);</div><div class=\"line\">               Matrix transformMatrix;</div><div class=\"line\">               if ((mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != 0) &#123;</div><div class=\"line\">                   Transformation t = attachInfo.mTmpTransformation;</div><div class=\"line\">                   boolean transformed = getChildStaticTransformation(child, t);</div><div class=\"line\">                   if (transformed) &#123;</div><div class=\"line\">                       transformMatrix = attachInfo.mTmpMatrix;</div><div class=\"line\">                       transformMatrix.set(t.getMatrix());</div><div class=\"line\">                       if (!childMatrix.isIdentity()) &#123;</div><div class=\"line\">                           transformMatrix.preConcat(childMatrix);</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125; else &#123;</div><div class=\"line\">                       transformMatrix = childMatrix;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; else &#123;</div><div class=\"line\">                   transformMatrix = childMatrix;</div><div class=\"line\">               &#125;</div><div class=\"line\">               transformMatrix.mapRect(boundingRect);</div><div class=\"line\">               dirty.set((int) (boundingRect.left - 0.5f),</div><div class=\"line\">                       (int) (boundingRect.top - 0.5f),</div><div class=\"line\">                       (int) (boundingRect.right + 0.5f),</div><div class=\"line\">                       (int) (boundingRect.bottom + 0.5f));</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           do &#123;</div><div class=\"line\">               View view = null;</div><div class=\"line\">               if (parent instanceof View) &#123;</div><div class=\"line\">                   view = (View) parent;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               if (drawAnimation) &#123;</div><div class=\"line\">                   if (view != null) &#123;</div><div class=\"line\">                       view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</div><div class=\"line\">                   &#125; else if (parent instanceof ViewRootImpl) &#123;</div><div class=\"line\">                       ((ViewRootImpl) parent).mIsAnimating = true;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               // If the parent is dirty opaque or not dirty, mark it dirty with the opaque</div><div class=\"line\">               // flag coming from the child that initiated the invalidate</div><div class=\"line\">               if (view != null) &#123;</div><div class=\"line\">                   if ((view.mViewFlags &amp; FADING_EDGE_MASK) != 0 &amp;&amp;</div><div class=\"line\">                           view.getSolidColor() == 0) &#123;</div><div class=\"line\">                       opaqueFlag = PFLAG_DIRTY;</div><div class=\"line\">                   &#125;</div><div class=\"line\">                   if ((view.mPrivateFlags &amp; PFLAG_DIRTY_MASK) != PFLAG_DIRTY) &#123;</div><div class=\"line\">                       view.mPrivateFlags = (view.mPrivateFlags &amp; ~PFLAG_DIRTY_MASK) | opaqueFlag;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               parent = parent.invalidateChildInParent(location, dirty);</div><div class=\"line\">               if (view != null) &#123;</div><div class=\"line\">                   // Account for transform on current parent</div><div class=\"line\">                   Matrix m = view.getMatrix();</div><div class=\"line\">                   if (!m.isIdentity()) &#123;</div><div class=\"line\">                       RectF boundingRect = attachInfo.mTmpTransformRect;</div><div class=\"line\">                       boundingRect.set(dirty);</div><div class=\"line\">                       m.mapRect(boundingRect);</div><div class=\"line\">                       dirty.set((int) (boundingRect.left - 0.5f),</div><div class=\"line\">                               (int) (boundingRect.top - 0.5f),</div><div class=\"line\">                               (int) (boundingRect.right + 0.5f),</div><div class=\"line\">                               (int) (boundingRect.bottom + 0.5f));</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; while (parent != null);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>现在查看ViewRootImpl类的invalidateChildInParent()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public ViewParent invalidateChildInParent(int[] location, Rect dirty) &#123;</div><div class=\"line\">    checkThread();</div><div class=\"line\">    if (DEBUG_DRAW) Log.v(TAG, &quot;Invalidate child: &quot; + dirty);</div><div class=\"line\"></div><div class=\"line\">    if (dirty == null) &#123;</div><div class=\"line\">        invalidate();</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125; else if (dirty.isEmpty() &amp;&amp; !mIsAnimating) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    if (mCurScrollY != 0 || mTranslator != null) &#123;</div><div class=\"line\">        mTempRect.set(dirty);</div><div class=\"line\">        dirty = mTempRect;</div><div class=\"line\">        if (mCurScrollY != 0) &#123;</div><div class=\"line\">            dirty.offset(0, -mCurScrollY);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (mTranslator != null) &#123;</div><div class=\"line\">            mTranslator.translateRectInAppWindowToScreen(dirty);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (mAttachInfo.mScalingRequired) &#123;</div><div class=\"line\">            dirty.inset(-1, -1);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final Rect localDirty = mDirty;</div><div class=\"line\">    if (!localDirty.isEmpty() &amp;&amp; !localDirty.contains(dirty)) &#123;</div><div class=\"line\">        mAttachInfo.mSetIgnoreDirtyState = true;</div><div class=\"line\">        mAttachInfo.mIgnoreDirtyState = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // Add the new dirty rect to the current one</div><div class=\"line\">    localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);</div><div class=\"line\">    // Intersect with the bounds of the window to skip</div><div class=\"line\">    // updates that lie outside of the visible region</div><div class=\"line\">    final float appScale = mAttachInfo.mApplicationScale;</div><div class=\"line\">    final boolean intersected = localDirty.intersect(0, 0,</div><div class=\"line\">            (int) (mWidth * appScale + 0.5f), (int) (mHeight * appScale + 0.5f));</div><div class=\"line\">    if (!intersected) &#123;</div><div class=\"line\">        localDirty.setEmpty();</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (!mWillDrawSoon &amp;&amp; (intersected || mIsAnimating)) &#123;</div><div class=\"line\">        scheduleTraversals();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>方法块的第一行好像就是我们要找的验证线程的地方checkThread()，而该方法内容也很简单，看到抛出的异常就很熟悉了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">void checkThread() &#123;</div><div class=\"line\">    if (mThread != Thread.currentThread()) &#123;</div><div class=\"line\">        throw new CalledFromWrongThreadException(</div><div class=\"line\">                &quot;Only the original thread that created a view hierarchy can touch its views.&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二步，验证线程地方已经找到了，假设得到了证实，那么为什么该有的异常没有出现呢？现在再次假设是不是因为某些原因导致checkThread()没有执行呢？</p>\n<p>有人可能会问会不会是mThread == Thread.currentThread()？其实这是不可能的 ，先看下mThread赋值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ViewRootImpl(Context context, Display display) &#123;</div><div class=\"line\">    mContext = context;</div><div class=\"line\">    mWindowSession = WindowManagerGlobal.getWindowSession();</div><div class=\"line\">    mDisplay = display;</div><div class=\"line\">    mBasePackageName = context.getBasePackageName();</div><div class=\"line\"></div><div class=\"line\">    mDisplayAdjustments = display.getDisplayAdjustments();</div><div class=\"line\"></div><div class=\"line\">    mThread = Thread.currentThread();</div></pre></td></tr></table></figure>\n<p>ViewRootImpl类实例化是在Activity启动时的主线程创建的，所以mThread是主线程实例，而checkThread()中的Thread.currentThread()，最初是由textView.setText()调用的一系列方法栈，并且setText是在子线程调用。</p>\n<p>继续刚才的假设，不过现在要逆推回去，checkThread()方法没有执行，可以认为ViewRootImpl的invalidateChildInParent()方法没有执行，它又是在ViewGroup中invalidateChild()方法里的do while中调用，要使do while不被调用，继续往上看，如果attachInfo为null，进不去if语句块也就不会执行checkThread()了，这是第一个可能的原因。记录下，继续逆推。</p>\n<p>View中的invalidateInternal()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Propagate the damage rectangle to the parent view.</div><div class=\"line\">      final AttachInfo ai = mAttachInfo;</div><div class=\"line\">      final ViewParent p = mParent;</div><div class=\"line\">      if (p != null &amp;&amp; ai != null &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">          final Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">          damage.set(l, t, r, b);</div><div class=\"line\">          p.invalidateChild(this, damage);</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>根据判断条件，如果p即mParent或者ai即mAttachInfo 任一为null，都不会执行invalidateChild，这是第二个可能原因，这里的ai和第一个原因的attachInfo是一样的，所以第一个原因可能忽略，精力关注在第二个原因上。</p>\n<blockquote>\n<p>现在的关注点是实例p和ai是什么时候创建的，有没有为null的现象？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">final AttachInfo ai = mAttachInfo;</div></pre></td></tr></table></figure>\n<p>而mAttachInfo是在View的dispatchAttachedToWindow()方法中赋值的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void dispatchAttachedToWindow(AttachInfo info, int visibility) &#123;</div><div class=\"line\">        //System.out.println(&quot;Attached! &quot; + this);</div><div class=\"line\">        mAttachInfo = info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>View的dispatchAttachedToWindow()方法是在ViewRootImpl中的performTraversals()方法调用，这个方法是遍历View Tree</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void performTraversals() &#123;</div><div class=\"line\">       // cache mView since it is used so much below...</div><div class=\"line\">       final View host = mView;</div><div class=\"line\">       ·······</div><div class=\"line\">       host.dispatchAttachedToWindow(mAttachInfo, 0);</div></pre></td></tr></table></figure>\n<p>可见View中的mAttachInfo来自ViewrootImpl的mAttachInfo，而ViewrootImpl的mAttachInfo是在其构造方法中被赋值的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public ViewRootImpl(Context context, Display display) &#123;</div><div class=\"line\">    mContext = context;</div><div class=\"line\">    mWindowSession = WindowManagerGlobal.getWindowSession();</div><div class=\"line\">    mDisplay = display;</div><div class=\"line\">    mBasePackageName = context.getBasePackageName();</div><div class=\"line\"></div><div class=\"line\">    mDisplayAdjustments = display.getDisplayAdjustments();</div><div class=\"line\"></div><div class=\"line\">    mThread = Thread.currentThread();</div><div class=\"line\">    mLocation = new WindowLeaked(null);</div><div class=\"line\">    mLocation.fillInStackTrace();</div><div class=\"line\">    mWidth = -1;</div><div class=\"line\">    mHeight = -1;</div><div class=\"line\">    mDirty = new Rect();</div><div class=\"line\">    mTempRect = new Rect();</div><div class=\"line\">    mVisRect = new Rect();</div><div class=\"line\">    mWinFrame = new Rect();</div><div class=\"line\">    mWindow = new W(this);</div><div class=\"line\">    mTargetSdkVersion = context.getApplicationInfo().targetSdkVersion;</div><div class=\"line\">    mViewVisibility = View.GONE;</div><div class=\"line\">    mTransparentRegion = new Region();</div><div class=\"line\">    mPreviousTransparentRegion = new Region();</div><div class=\"line\">    mFirst = true; // true for the first time the view is added</div><div class=\"line\">    mAdded = false;</div><div class=\"line\">    mAttachInfo = new View.AttachInfo(mWindowSession, mWindow, display, this, mHandler, this);</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之前说了ViewRootImpl实例是在Activity启动时创建的，现在看看具体是启动的什么时候:在向window添加view的时候即：WindowManagerGlobal的addView方法中创建ViewrootImpl实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void addView(View view, ViewGroup.LayoutParams params,</div><div class=\"line\">           Display display, Window parentWindow) &#123;</div><div class=\"line\">       if (view == null) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;view must not be null&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (display == null) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;display must not be null&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (!(params instanceof WindowManager.LayoutParams)) &#123;</div><div class=\"line\">           throw new IllegalArgumentException(&quot;Params must be WindowManager.LayoutParams&quot;);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams)params;</div><div class=\"line\">       if (parentWindow != null) &#123;</div><div class=\"line\">           parentWindow.adjustLayoutParamsForSubWindow(wparams);</div><div class=\"line\">       &#125; else &#123;</div><div class=\"line\">           // If there&apos;s no parent and we&apos;re running on L or above (or in the</div><div class=\"line\">           // system context), assume we want hardware acceleration.</div><div class=\"line\">           final Context context = view.getContext();</div><div class=\"line\">           if (context != null</div><div class=\"line\">                   &amp;&amp; context.getApplicationInfo().targetSdkVersion &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">               wparams.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ViewRootImpl root;</div><div class=\"line\">       View panelParentView = null;</div><div class=\"line\"></div><div class=\"line\">       synchronized (mLock) &#123;</div><div class=\"line\">           // Start watching for system property changes.</div><div class=\"line\">           if (mSystemPropertyUpdater == null) &#123;</div><div class=\"line\">               mSystemPropertyUpdater = new Runnable() &#123;</div><div class=\"line\">                   @Override public void run() &#123;</div><div class=\"line\">                       synchronized (mLock) &#123;</div><div class=\"line\">                           for (int i = mRoots.size() - 1; i &gt;= 0; --i) &#123;</div><div class=\"line\">                               mRoots.get(i).loadSystemProperties();</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;;</div><div class=\"line\">               SystemProperties.addChangeCallback(mSystemPropertyUpdater);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           int index = findViewLocked(view, false);</div><div class=\"line\">           if (index &gt;= 0) &#123;</div><div class=\"line\">               if (mDyingViews.contains(view)) &#123;</div><div class=\"line\">                   // Don&apos;t wait for MSG_DIE to make it&apos;s way through root&apos;s queue.</div><div class=\"line\">                   mRoots.get(index).doDie();</div><div class=\"line\">               &#125; else &#123;</div><div class=\"line\">                   throw new IllegalStateException(&quot;View &quot; + view</div><div class=\"line\">                           + &quot; has already been added to the window manager.&quot;);</div><div class=\"line\">               &#125;</div><div class=\"line\">               // The previous removeView() had not completed executing. Now it has.</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // If this is a panel window, then find the window it is being</div><div class=\"line\">           // attached to for future reference.</div><div class=\"line\">           if (wparams.type &gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;&amp;</div><div class=\"line\">                   wparams.type &lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) &#123;</div><div class=\"line\">               final int count = mViews.size();</div><div class=\"line\">               for (int i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">                   if (mRoots.get(i).mWindow.asBinder() == wparams.token) &#123;</div><div class=\"line\">                       panelParentView = mViews.get(i);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           root = new ViewRootImpl(view.getContext(), display);</div><div class=\"line\"></div><div class=\"line\">           view.setLayoutParams(wparams);</div><div class=\"line\"></div><div class=\"line\">           mViews.add(view);</div><div class=\"line\">           mRoots.add(root);</div><div class=\"line\">           mParams.add(wparams);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       // do this last because it fires off messages to start doing things</div><div class=\"line\">       try &#123;</div><div class=\"line\">           root.setView(view, wparams, panelParentView);</div><div class=\"line\">       &#125; catch (RuntimeException e) &#123;</div><div class=\"line\">           // BadTokenException or InvalidDisplayException, clean up.</div><div class=\"line\">           synchronized (mLock) &#123;</div><div class=\"line\">               final int index = findViewLocked(view, false);</div><div class=\"line\">               if (index &gt;= 0) &#123;</div><div class=\"line\">                   removeViewLocked(index, true);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           throw e;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>而调用addView()方法是在ActivityThread类的handleResumeActivity()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">final void handleResumeActivity(IBinder token,</div><div class=\"line\">        boolean clearHide, boolean isForward, boolean reallyResume) &#123;</div><div class=\"line\">    // If we are getting ready to gc after going to the background, well</div><div class=\"line\">    // we are back active so skip it.</div><div class=\"line\">    unscheduleGcIdler();</div><div class=\"line\">    mSomeActivitiesChanged = true;</div><div class=\"line\"></div><div class=\"line\">    // TODO Push resumeArgs into the activity for consideration</div><div class=\"line\">    ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\"></div><div class=\"line\">    if (r != null) &#123;</div><div class=\"line\">        final Activity a = r.activity;</div><div class=\"line\"></div><div class=\"line\">        if (localLOGV) Slog.v(</div><div class=\"line\">            TAG, &quot;Resume &quot; + r + &quot; started activity: &quot; +</div><div class=\"line\">            a.mStartedActivity + &quot;, hideForNow: &quot; + r.hideForNow</div><div class=\"line\">            + &quot;, finished: &quot; + a.mFinished);</div><div class=\"line\"></div><div class=\"line\">        final int forwardBit = isForward ?</div><div class=\"line\">                WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;</div><div class=\"line\"></div><div class=\"line\">        // If the window hasn&apos;t yet been added to the window manager,</div><div class=\"line\">        // and this guy didn&apos;t finish itself or start another activity,</div><div class=\"line\">        // then go ahead and add the window.</div><div class=\"line\">        boolean willBeVisible = !a.mStartedActivity;</div><div class=\"line\">        if (!willBeVisible) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                willBeVisible = ActivityManagerNative.getDefault().willActivityBeVisible(</div><div class=\"line\">                        a.getActivityToken());</div><div class=\"line\">            &#125; catch (RemoteException e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class=\"line\">            r.window = r.activity.getWindow();</div><div class=\"line\">            View decor = r.window.getDecorView();</div><div class=\"line\">            decor.setVisibility(View.INVISIBLE);</div><div class=\"line\">            ViewManager wm = a.getWindowManager();</div><div class=\"line\">            WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">            a.mDecor = decor;</div><div class=\"line\">            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class=\"line\">            l.softInputMode |= forwardBit;</div><div class=\"line\">            if (a.mVisibleFromClient) &#123;</div><div class=\"line\">                a.mWindowAdded = true;</div><div class=\"line\">                wm.addView(decor, l);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        // If the window has already been added, but during resume</div><div class=\"line\">        // we started another activity, then don&apos;t yet make the</div><div class=\"line\">        // window visible.</div><div class=\"line\">        &#125; else if (!willBeVisible) &#123;</div><div class=\"line\">            if (localLOGV) Slog.v(</div><div class=\"line\">                TAG, &quot;Launch &quot; + r + &quot; mStartedActivity set&quot;);</div><div class=\"line\">            r.hideForNow = true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // Get rid of anything left hanging around.</div><div class=\"line\">        cleanUpPendingRemoveWindows(r);</div><div class=\"line\"></div><div class=\"line\">        // The window is now visible if it has been added, we are not</div><div class=\"line\">        // simply finishing, and we are not starting another activity.</div><div class=\"line\">        if (!r.activity.mFinished &amp;&amp; willBeVisible</div><div class=\"line\">                &amp;&amp; r.activity.mDecor != null &amp;&amp; !r.hideForNow) &#123;</div><div class=\"line\">            if (r.newConfig != null) &#123;</div><div class=\"line\">                if (DEBUG_CONFIGURATION) Slog.v(TAG, &quot;Resuming activity &quot;</div><div class=\"line\">                        + r.activityInfo.name + &quot; with newConfig &quot; + r.newConfig);</div><div class=\"line\">                performConfigurationChanged(r.activity, r.newConfig);</div><div class=\"line\">                freeTextLayoutCachesIfNeeded(r.activity.mCurrentConfig.diff(r.newConfig));</div><div class=\"line\">                r.newConfig = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (localLOGV) Slog.v(TAG, &quot;Resuming &quot; + r + &quot; with isForward=&quot;</div><div class=\"line\">                    + isForward);</div><div class=\"line\">            WindowManager.LayoutParams l = r.window.getAttributes();</div><div class=\"line\">            if ((l.softInputMode</div><div class=\"line\">                    &amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION)</div><div class=\"line\">                    != forwardBit) &#123;</div><div class=\"line\">                l.softInputMode = (l.softInputMode</div><div class=\"line\">                        &amp; (~WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION))</div><div class=\"line\">                        | forwardBit;</div><div class=\"line\">                if (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                    ViewManager wm = a.getWindowManager();</div><div class=\"line\">                    View decor = r.window.getDecorView();</div><div class=\"line\">                    wm.updateViewLayout(decor, l);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            r.activity.mVisibleFromServer = true;</div><div class=\"line\">            mNumVisibleActivities++;</div><div class=\"line\">            if (r.activity.mVisibleFromClient) &#123;</div><div class=\"line\">                r.activity.makeVisible();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (!r.onlyLocalRequest) &#123;</div><div class=\"line\">            r.nextIdle = mNewActivities;</div><div class=\"line\">            mNewActivities = r;</div><div class=\"line\">            if (localLOGV) Slog.v(</div><div class=\"line\">                TAG, &quot;Scheduling idle handler for &quot; + r);</div><div class=\"line\">            Looper.myQueue().addIdleHandler(new Idler());</div><div class=\"line\">        &#125;</div><div class=\"line\">        r.onlyLocalRequest = false;</div><div class=\"line\"></div><div class=\"line\">        // Tell the activity manager we have resumed.</div><div class=\"line\">        if (reallyResume) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                ActivityManagerNative.getDefault().activityResumed(token);</div><div class=\"line\">            &#125; catch (RemoteException ex) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // If an exception was thrown when trying to resume, then</div><div class=\"line\">        // just end this activity.</div><div class=\"line\">        try &#123;</div><div class=\"line\">            ActivityManagerNative.getDefault()</div><div class=\"line\">                .finishActivity(token, Activity.RESULT_CANCELED, null, false);</div><div class=\"line\">        &#125; catch (RemoteException ex) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看到上面的方法有些人心里可能有底儿了，handleResumeActivity()方法是不是让Activity回调onResume？如果是的话一切就都明了了，因为ViewrootImpl是在onReume期间创建，而AttachInfo是在ViewRootImpl实例化时创建，我们的工作线程是在onCreate时刷新UI的，那时候还没有实例化AttachInfo，导致mAttachInfo为null，最终if条件判断失败没有进入。然而这一切都是在YY，实践才是检验真理的唯一标准，动起来：</p>\n<p>看到这一行代码<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActivityClientRecord r = performResumeActivity(token, clearHide);</div><div class=\"line\">```微微一笑，点进去看看，</div></pre></td></tr></table></figure></p>\n<pre><code>public final ActivityClientRecord performResumeActivity(IBinder token,\n        boolean clearHide) {\n    ActivityClientRecord r = mActivities.get(token);\n    if (localLOGV) Slog.v(TAG, &quot;Performing resume of &quot; + r\n            + &quot; finished=&quot; + r.activity.mFinished);\n    if (r != null &amp;&amp; !r.activity.mFinished) {\n        if (clearHide) {\n            r.hideForNow = false;\n            r.activity.mStartedActivity = false;\n        }\n        try {\n            r.activity.mFragments.noteStateNotSaved();\n            if (r.pendingIntents != null) {\n                deliverNewIntents(r, r.pendingIntents);\n                r.pendingIntents = null;\n            }\n            if (r.pendingResults != null) {\n                deliverResults(r, r.pendingResults);\n                r.pendingResults = null;\n            }\n            r.activity.performResume();\n\n            EventLog.writeEvent(LOG_ON_RESUME_CALLED,\n                    UserHandle.myUserId(), r.activity.getComponentName().getClassName());\n\n            r.paused = false;\n            r.stopped = false;\n            r.state = null;\n            r.persistentState = null;\n        } catch (Exception e) {\n            if (!mInstrumentation.onException(r.activity, e)) {\n                throw new RuntimeException(\n                    &quot;Unable to resume activity &quot;\n                    + r.intent.getComponent().toShortString()\n                    + &quot;: &quot; + e.toString(), e);\n            }\n        }\n    }\n    return r;\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">代码很短，很容易提取有用信息：``` r.activity.performResume();```在进去看看：</div></pre></td></tr></table></figure>\n<pre><code>final void performResume() {\n    performRestart();\n\n    mFragments.execPendingActions();\n\n    mLastNonConfigurationInstances = null;\n\n    mCalled = false;\n    // mResumed is set by the instrumentation\n    mInstrumentation.callActivityOnResume(this);\n    if (!mCalled) {\n        throw new SuperNotCalledException(\n            &quot;Activity &quot; + mComponent.toShortString() +\n            &quot; did not call through to super.onResume()&quot;);\n    }\n\n    // Now really resume, and install the current status bar and menu.\n    mCalled = false;\n\n    mFragments.dispatchResume();\n    mFragments.execPendingActions();\n\n    onPostResume();\n    if (!mCalled) {\n        throw new SuperNotCalledException(\n            &quot;Activity &quot; + mComponent.toShortString() +\n            &quot; did not call through to super.onPostResume()&quot;);\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">看到```mInstrumentation```这个属性就能感觉到越来越接近SDK API层了，看看它的```callActivityOnResume()```方法做了什么：</div></pre></td></tr></table></figure>\n<pre><code>public void callActivityOnResume(Activity activity) {\n    activity.mResumed = true;\n    activity.onResume();\n\n    if (mActivityMonitors != null) {\n        synchronized (mSync) {\n            final int N = mActivityMonitors.size();\n            for (int i=0; i&lt;N; i++) {\n                final ActivityMonitor am = mActivityMonitors.get(i);\n                am.match(activity, activity, activity.getIntent());\n            }\n        }\n    }\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">一行```activity.onResume();```已经水落石出。</div><div class=\"line\">回到handleResumeActivity代码中，我精简下：</div></pre></td></tr></table></figure>\n<p> final void handleResumeActivity(IBinder token,<br>            boolean clearHide, boolean isForward, boolean reallyResume) {<br>   //这里是最终回调Activity的onResume()方法<br>        ActivityClientRecord r = performResumeActivity(token, clearHide);<br>//省略若干<br>        if (r != null) {<br>            final Activity a = r.activity;<br>            final int forwardBit = isForward ?<br>            WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION : 0;<br>            boolean willBeVisible = !a.mStartedActivity;</p>\n<pre><code>if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) {\n    r.window = r.activity.getWindow();\n    View decor = r.window.getDecorView();\n    decor.setVisibility(View.INVISIBLE);\n    ViewManager wm = a.getWindowManager();\n    WindowManager.LayoutParams l = r.window.getAttributes();\n    a.mDecor = decor;\n    l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\n    l.softInputMode |= forwardBit;\n    if (a.mVisibleFromClient) {\n        a.mWindowAdded = true;\n</code></pre><p>//这里是调用WindowManagerGlobal的addView()方法最终实例化ViewRootImpl，进而实例化AttachInfo<br>                    wm.addView(decor, l);<br>                }</p>\n<pre><code>        } else if (!willBeVisible) {\n            if (localLOGV) Slog.v(\n                TAG, &quot;Launch &quot; + r + &quot; mStartedActivity set&quot;);\n            r.hideForNow = true;\n        }\n    }\n}\n</code></pre><p>```</p>\n<p>另外关于阅读源码问题，win下当然使用SourceInsight不二选，如果是在mac下可以参考我的<a href=\"http://www.jianshu.com/p/c295d2729ecf\">osx下如何使用SublimeText阅读Android系统源码</a>.。</p>\n"},{"title":"hexo本地图片发布后不能显示的问题","date":"2017-04-25T07:16:33.000Z","_content":"\n# 说在前面的话\n\n工作好几年，终于花了点时间搞了个自己的网站，基于Hexo+Github+个性域名，玩的不亦乐乎。但是这两天发现个问题比较蛋疼。就是Hexo基于MarkDown文本的。如果在写文章时想加入图片，如果你的图片来自其他网站，那么当你发布后是没有问题的，因为其url就是那个图片网址。但是如果你的图片来自你的本地、这样在你预览时是没有问题的，但是细心看下就会发现，markdown中的本地图片是url地址是本地地址。这样如果你发布文章后，别人肯定是看不到你的图片的。这样体验很不好。最开始的想法就是先在简书发布，发布后图片url都是来自简书网站url，而非本地，这样是没问题的，但是这样自己的网站显示个图片还要依赖简书平台，可能代码写多了，总感觉耦合性太强啊~~所以就在找怎么把两个平台独立开来，而自己网站又能发布图片的方法。\n\n经过查找发现hexo-asset-image插件可以比较好的支持本地图片发布。\n\n# 开启资源文件支持\n\n在hexo目录下的_config.yml配置文件中找到这个配置：\n\n```\npost_asset_folder: false\n```\n\n把这里的false改为true。开启hexo的媒体文件支持。\n\n# 安装插件\n\n在命令行中，跳转到hexo目录下，执行：\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n会自动安装插件，插件会安装到node_moudules目录下，![屏幕快照 2017-04-25 下午3.33.13](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png)\n\n同时还会自动在hexo目录下package.json中添加一行：\n\n```\n\"hexo-asset-image\": \"git+https://github.com/CodeFalling/hexo-asset-image.git\",\n```\n\n> 说这些就是想告诉你，不用的时候如何卸载：删掉那个文件夹和那一行就行了。\n\n以上执行完毕后，在命令行执行：hexo new \"文件\"时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。\n\n\n\n注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：\n\n![屏幕快照 2017-04-25 下午3.34.46](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png)\n\n修改为相对路径：\n\n![屏幕快照 2017-04-25 下午3.45.37](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png)\n\n\n\n# 结尾\n\n上面说了hexo new \"名称\" ，这样每次同时生成文件和文件夹，当然也可以不使用命令行，直接在_post目录下手动创建md文件和文件夹亦可，手动创建的好处时如果你的文章不需要图片，那么你可以不创建对应的文件夹。","source":"_posts/hexo本地图片发布后不能显示的问题.md","raw":"---\ntitle: hexo本地图片发布后不能显示的问题\ndate: 2017-04-25 15:16:33\ntags: 网络\ncategories: 网络\n---\n\n# 说在前面的话\n\n工作好几年，终于花了点时间搞了个自己的网站，基于Hexo+Github+个性域名，玩的不亦乐乎。但是这两天发现个问题比较蛋疼。就是Hexo基于MarkDown文本的。如果在写文章时想加入图片，如果你的图片来自其他网站，那么当你发布后是没有问题的，因为其url就是那个图片网址。但是如果你的图片来自你的本地、这样在你预览时是没有问题的，但是细心看下就会发现，markdown中的本地图片是url地址是本地地址。这样如果你发布文章后，别人肯定是看不到你的图片的。这样体验很不好。最开始的想法就是先在简书发布，发布后图片url都是来自简书网站url，而非本地，这样是没问题的，但是这样自己的网站显示个图片还要依赖简书平台，可能代码写多了，总感觉耦合性太强啊~~所以就在找怎么把两个平台独立开来，而自己网站又能发布图片的方法。\n\n经过查找发现hexo-asset-image插件可以比较好的支持本地图片发布。\n\n# 开启资源文件支持\n\n在hexo目录下的_config.yml配置文件中找到这个配置：\n\n```\npost_asset_folder: false\n```\n\n把这里的false改为true。开启hexo的媒体文件支持。\n\n# 安装插件\n\n在命令行中，跳转到hexo目录下，执行：\n\n```\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n```\n\n会自动安装插件，插件会安装到node_moudules目录下，![屏幕快照 2017-04-25 下午3.33.13](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png)\n\n同时还会自动在hexo目录下package.json中添加一行：\n\n```\n\"hexo-asset-image\": \"git+https://github.com/CodeFalling/hexo-asset-image.git\",\n```\n\n> 说这些就是想告诉你，不用的时候如何卸载：删掉那个文件夹和那一行就行了。\n\n以上执行完毕后，在命令行执行：hexo new \"文件\"时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。\n\n\n\n注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：\n\n![屏幕快照 2017-04-25 下午3.34.46](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png)\n\n修改为相对路径：\n\n![屏幕快照 2017-04-25 下午3.45.37](hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png)\n\n\n\n# 结尾\n\n上面说了hexo new \"名称\" ，这样每次同时生成文件和文件夹，当然也可以不使用命令行，直接在_post目录下手动创建md文件和文件夹亦可，手动创建的好处时如果你的文章不需要图片，那么你可以不创建对应的文件夹。","slug":"hexo本地图片发布后不能显示的问题","published":1,"updated":"2017-04-25T08:18:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nd002n449c6fh5dsm8","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>工作好几年，终于花了点时间搞了个自己的网站，基于Hexo+Github+个性域名，玩的不亦乐乎。但是这两天发现个问题比较蛋疼。就是Hexo基于MarkDown文本的。如果在写文章时想加入图片，如果你的图片来自其他网站，那么当你发布后是没有问题的，因为其url就是那个图片网址。但是如果你的图片来自你的本地、这样在你预览时是没有问题的，但是细心看下就会发现，markdown中的本地图片是url地址是本地地址。这样如果你发布文章后，别人肯定是看不到你的图片的。这样体验很不好。最开始的想法就是先在简书发布，发布后图片url都是来自简书网站url，而非本地，这样是没问题的，但是这样自己的网站显示个图片还要依赖简书平台，可能代码写多了，总感觉耦合性太强啊~~所以就在找怎么把两个平台独立开来，而自己网站又能发布图片的方法。</p>\n<p>经过查找发现hexo-asset-image插件可以比较好的支持本地图片发布。</p>\n<h1 id=\"开启资源文件支持\"><a href=\"#开启资源文件支持\" class=\"headerlink\" title=\"开启资源文件支持\"></a>开启资源文件支持</h1><p>在hexo目录下的_config.yml配置文件中找到这个配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">post_asset_folder: false</div></pre></td></tr></table></figure>\n<p>把这里的false改为true。开启hexo的媒体文件支持。</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>在命令行中，跳转到hexo目录下，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>会自动安装插件，插件会安装到node_moudules目录下，<img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png\" alt=\"屏幕快照 2017-04-25 下午3.33.13\"></p>\n<p>同时还会自动在hexo目录下package.json中添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;hexo-asset-image&quot;: &quot;git+https://github.com/CodeFalling/hexo-asset-image.git&quot;,</div></pre></td></tr></table></figure>\n<blockquote>\n<p>说这些就是想告诉你，不用的时候如何卸载：删掉那个文件夹和那一行就行了。</p>\n</blockquote>\n<p>以上执行完毕后，在命令行执行：hexo new “文件”时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。</p>\n<p>注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：</p>\n<p><img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png\" alt=\"屏幕快照 2017-04-25 下午3.34.46\"></p>\n<p>修改为相对路径：</p>\n<p><img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png\" alt=\"屏幕快照 2017-04-25 下午3.45.37\"></p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>上面说了hexo new “名称” ，这样每次同时生成文件和文件夹，当然也可以不使用命令行，直接在_post目录下手动创建md文件和文件夹亦可，手动创建的好处时如果你的文章不需要图片，那么你可以不创建对应的文件夹。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>工作好几年，终于花了点时间搞了个自己的网站，基于Hexo+Github+个性域名，玩的不亦乐乎。但是这两天发现个问题比较蛋疼。就是Hexo基于MarkDown文本的。如果在写文章时想加入图片，如果你的图片来自其他网站，那么当你发布后是没有问题的，因为其url就是那个图片网址。但是如果你的图片来自你的本地、这样在你预览时是没有问题的，但是细心看下就会发现，markdown中的本地图片是url地址是本地地址。这样如果你发布文章后，别人肯定是看不到你的图片的。这样体验很不好。最开始的想法就是先在简书发布，发布后图片url都是来自简书网站url，而非本地，这样是没问题的，但是这样自己的网站显示个图片还要依赖简书平台，可能代码写多了，总感觉耦合性太强啊~~所以就在找怎么把两个平台独立开来，而自己网站又能发布图片的方法。</p>\n<p>经过查找发现hexo-asset-image插件可以比较好的支持本地图片发布。</p>\n<h1 id=\"开启资源文件支持\"><a href=\"#开启资源文件支持\" class=\"headerlink\" title=\"开启资源文件支持\"></a>开启资源文件支持</h1><p>在hexo目录下的_config.yml配置文件中找到这个配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">post_asset_folder: false</div></pre></td></tr></table></figure>\n<p>把这里的false改为true。开启hexo的媒体文件支持。</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>在命令行中，跳转到hexo目录下，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure>\n<p>会自动安装插件，插件会安装到node_moudules目录下，<img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png\" alt=\"屏幕快照 2017-04-25 下午3.33.13\"></p>\n<p>同时还会自动在hexo目录下package.json中添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;hexo-asset-image&quot;: &quot;git+https://github.com/CodeFalling/hexo-asset-image.git&quot;,</div></pre></td></tr></table></figure>\n<blockquote>\n<p>说这些就是想告诉你，不用的时候如何卸载：删掉那个文件夹和那一行就行了。</p>\n</blockquote>\n<p>以上执行完毕后，在命令行执行：hexo new “文件”时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。</p>\n<p>注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：</p>\n<p><img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png\" alt=\"屏幕快照 2017-04-25 下午3.34.46\"></p>\n<p>修改为相对路径：</p>\n<p><img src=\"/2017/04/25/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png\" alt=\"屏幕快照 2017-04-25 下午3.45.37\"></p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>上面说了hexo new “名称” ，这样每次同时生成文件和文件夹，当然也可以不使用命令行，直接在_post目录下手动创建md文件和文件夹亦可，手动创建的好处时如果你的文章不需要图片，那么你可以不创建对应的文件夹。</p>\n"},{"title":"为什么每一个IT人员应该有一把人体工学电脑椅","date":"2017-05-15T09:32:36.000Z","_content":"\n# 说在前面的话\n\n工欲善其事，必先利其器。可能也有强迫症的原因，上班时总是会想尽办法提高工作效率，同时给自己创造一个愉悦的工作状态。对于能提高效率的硬件因素自然不能放过。什么罗技鼠标、机械键盘宿舍公司各一套。为了方便显示器调整，又买了乐哥支架，这样能随时调整角度，避免一个姿势容易疲劳。但是最近又出现了一个问题：一个姿势坐半个小时就浑身不自在，脖子僵硬大脑供血不足，严重时候还有恶心呕吐现象。其实不用说也猜到了—颈椎病，如果置之不理以后腰椎可能也会出现病症。毕竟这是很多IT从业人员的通病，如何缓解病况才不致于影响工作效率呢？个人感觉一把人体工学电脑椅是必须的。\n\n\n\n# 什么是人体工学电脑椅\n\n看下[百度百科](http://baike.baidu.com/link?url=DtpSA5XKbKnq0i8zuufuO3XadcstS54-xa_Yy1tgbhl2P962gqvxcBdlTMD9X38dAhw9THJrNJ4LvH3v_LrY34E1ENL3-2sLwtmJapNyawT3y9q8Q6rki5jdqYXnD9XahJADbgkPqYscZxNB0ImSqnqI62tEybnCUKPugI6sPRi) 对人体工学电脑椅的定义：人体工学电脑椅也称人体工学椅、人体工学办公椅，它是以“人体工程学”理论为基础，通过对人们在使用电脑椅的过程中的各个数据进行统计汇总，并根据最终统计的数据而设计研发的电脑椅。\n\n我们日常坐的椅子都是批量生产，都有固定的规格，并不能适应所有人，所以人体工学椅子和普通椅子一个明显区别就是：可调节！可调节的手托、可调节的坐垫高度、可调节的坐垫前后深度、可调节的枕托、可调节的背靠、可调节的腰托等。\n\n# 一把质量差的电脑椅\n\n质量差的电脑椅能有咋的，顶多坏了摔一跤？还是看图最直观：\n\n![1918606_151944_1](为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif)\n\n\n\n上图的爆炸是气压棒爆炸引起的。\n\n电脑椅升降功能大都是靠气压棒来实现的。那么什么是气压棒呢？\n\n看下[百度百科](http://baike.baidu.com/item/%E6%B0%94%E5%8E%8B%E6%A3%92) 对气压棒的定义，其实说白了气压棒就是靠对棒内气体压缩和释放来达到升降电脑椅的。正品气压棒里面是高纯度氮气填充，并不会爆炸，而一些无良厂商为了节省成本，往往会以价格更为低廉的氧气作为填充物。氧气易燃，遇明火极易产生爆炸，酿成不可挽回的事故。\n\n# 一个气压棒引起的事故\n\n- 1.2007年4月20日晚，浙江省舟山市定海区，一位娄女士坐的椅子发生爆炸，座椅被炸穿，娄女士穿的裤子被炸了个大洞，硬塑料、木屑、海绵、布料、密封圈等大量碎片崩进娄女士体内达十厘米。\n\n- 2.2007年11月26日晚，烟台开发区68岁的吴老先生所坐的气压升降椅发生爆炸，臀部、腿部、直肠肛管和小肠受伤严重。\n\n- 3.2008年3月26日晚，江西赣州市，一位林先生家中的电脑椅突然发生爆炸，林先生背上、手上等处受伤，一根大约15厘米长的小铁棍炸飞到天花板上。\n\n- 4.2009年1月14日，山东胶州14岁少年小刚(化名)独自在家上网，在调节气压椅升降时，突然发生爆炸，顶杆从臀部顶进小刚体内，伤及多条血管，后因失血过多，抢救无效死亡。\n\n- 5.2010.5.12晚上9点半左右，厦门湖里殿前一户出租屋传出巨响。一名女子被突然发生爆裂的升降椅击伤。升降旋转椅突然爆炸，产生的冲击力将椅子里的螺丝小垫片等零件像子弹一样从臀部射入人体内。升降椅的气压杆插入伤者的肛门。女子当场晕倒在地。所幸经过5个多小时的手术，射入体内的椅子零件全被取出，刘小姐无生命危险。\n\n- 6.2010年5月，福建一女子因气压升降椅爆炸伤势严重当场昏迷，臀部被炸伤，直肠被撕裂了一个口子，阴道也穿了一个孔。后检查椅子的购物单据，没有任何厂名、厂址、电话之类信息。\n\n- 7.24岁的小林坐在升降旋转椅上吹头发，椅子爆炸，螺丝钉从她肛门边上穿进去，从子宫直肠陷凹处穿出。经过手术，医生从她的体内和臀部取出大量的螺丝钉和塑料碎片。医生说，还算幸运，穿过体内的螺丝钉没有伤及重要的脏器，手术后小林已脱离生命危险。\n\n  > 请务必一定要提醒你的家人和朋友注意：\n  >\n  > 1、务必购买正规厂家生产的升降椅，切勿贪图便宜，购买劣质货。\n  >\n  > 2、椅子在使用时，不要反复升降，不要滑来滑去，更不要猛地一下子坐上去。这易造成气压杆受力不均，长时间产生不均衡磨损，易爆炸。据模拟测算，爆炸会产生24个左右大气压，其威力至少能击穿6块密度板，顷刻能洞穿血肉之躯!\n  >\n  > 3、如果不是专业人士，不要拆开气缸，也不要让椅子靠近太热的东西，比如烤火炉或烤箱。\n  >\n  > 4、使用一段时间后，应该及时让专业人员检查，一旦发现裂痕、松动迹象，应及时维修更换。\n\n# 如何挑选人体工学电脑椅\n\n## 价格\n\n从价格上来说，和其他商品一样，往往都是一分钱一分货，一块钱二分货。\n\n国际品牌有欧美的Herman Miller、日本的岗村，这些高端系列普遍价格过万或者近万元，当然也有三五千的，但是可选性比较少。\n\n国内品牌有ergonor、ergomax以及黑白调、西昊等。国产价位3000以上就算是高端了，譬如金豪+e、l和ergomax旗舰版。\n\n个人感觉如果要买人体工学电脑椅，还是要舍得投资的，毕竟这投资的是自己的健康。建议起步买2k-3k的。毕竟这个价位在国内属于高端，国外品牌也能买到。这个价位的各方面功能齐全，可以都体验下，为以后的挑选打下基础。\n\n## 网布\n\n坐垫和椅背的材质有皮质、网布和海绵坐垫，我更喜欢全网布的，夏天透气性更好，但是也有个问题：如果网布质量不好，可能坐一段时间后网布就失去弹性，变得松垮。\n\n高端电脑椅网布大都进口，进口网布主要是美国matrex，韩国wintex次之，其他基本就是国产的。\n\n**进口网和国产网的差别：**\n\n价格：进口的美国Matrex网最贵，韩国Wintex网次之，国产网价格最便宜网，而且进口网涉及空运报关原因，货期长。\n\n耐用性：在厂家的垂直堕下机械测试中，进口Matrex网和Wintex网可以通过10万次强力冲击，国产网在按不同牌子在6-8万次之间会出现爆裂!\n\n材质：美国Matrex网和Wintex网材质柔软，弹力强，国产网比较硬，弹力及恢复力差。\n\n\n\nMatrex表面反光呈黏手手感，Wintex网表面反光呈光滑手感，国产网按不同牌子部分表面光滑，部分表面粗糙。\n\n据Matrex网和Wintex网国内代理商的说法，国内厂商用进口网布的并不多，内销产品基本都不会使用进口网，进口网一般都是外国客户指定要求才用的，原因在于进口网不仅更贵，而且在订购数量方面有要求，由于涉及空运报关因素，邮寄周期也比较长，这样就限制了小厂家的采购，掌柜曾经在网上看过一些网店几百产品也宣称使用Matrex网，那是不可能的，进口网，基本上只出现在2K以上的产品。\n\n\n\n**Matrex和wintex网布都是有吊牌的，如果商家真的采用这两种品牌，一定会拿出来当噱头显摆一番的，而不是轻描淡写的一句采用进口网布草草了事。网上那些说进口网布，但又不敢指明具体品牌的，就当时国产就行了或者不要买，毕竟涉嫌欺诈。**\n\n\n\n## 气压棒\n\n气压棒是有分级的，目前是共有四级：普遍使用的时三级，少数所谓高端使用四级。\n\n常用气压棒品牌：国内知名的有：安徽莱特，安德福，常州巨威，安吉斯诺尔，等还有一些进口的：韩国KGS，韩国三弘，德国SUS棒，台湾MID棒等等。\n\n**买回来后看气压棒有没有钢印，查看钢印信息是否和商家描述一致，如果有问题即时质疑。**\n\n\n\n\n\n## 底座\n\n一般来说都有底座防爆措施，但是价格越高底座用料越实，甚至是全铝合金底盘。我的2k 的gavee整个椅子70多斤重，厚重的材质更容易给人以安全感。\n\n\n\n**我对铝合金椅身有特殊好感，或许害怕塑料椅身不结实，也或许铝合金抛光后看起来更高端也更敦实。**\n\n\n\n这是我的电脑椅样式：\n\n![58f074a8N70fcfb6a](为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg)\n\n","source":"_posts/为什么每一个IT人员应该有一把人体工学电脑椅.md","raw":"---\ntitle: 为什么每一个IT人员应该有一把人体工学电脑椅\ndate: 2017-05-15 17:32:36\ntags: 职场杂谈\ncategories: 职场杂谈\n---\n\n# 说在前面的话\n\n工欲善其事，必先利其器。可能也有强迫症的原因，上班时总是会想尽办法提高工作效率，同时给自己创造一个愉悦的工作状态。对于能提高效率的硬件因素自然不能放过。什么罗技鼠标、机械键盘宿舍公司各一套。为了方便显示器调整，又买了乐哥支架，这样能随时调整角度，避免一个姿势容易疲劳。但是最近又出现了一个问题：一个姿势坐半个小时就浑身不自在，脖子僵硬大脑供血不足，严重时候还有恶心呕吐现象。其实不用说也猜到了—颈椎病，如果置之不理以后腰椎可能也会出现病症。毕竟这是很多IT从业人员的通病，如何缓解病况才不致于影响工作效率呢？个人感觉一把人体工学电脑椅是必须的。\n\n\n\n# 什么是人体工学电脑椅\n\n看下[百度百科](http://baike.baidu.com/link?url=DtpSA5XKbKnq0i8zuufuO3XadcstS54-xa_Yy1tgbhl2P962gqvxcBdlTMD9X38dAhw9THJrNJ4LvH3v_LrY34E1ENL3-2sLwtmJapNyawT3y9q8Q6rki5jdqYXnD9XahJADbgkPqYscZxNB0ImSqnqI62tEybnCUKPugI6sPRi) 对人体工学电脑椅的定义：人体工学电脑椅也称人体工学椅、人体工学办公椅，它是以“人体工程学”理论为基础，通过对人们在使用电脑椅的过程中的各个数据进行统计汇总，并根据最终统计的数据而设计研发的电脑椅。\n\n我们日常坐的椅子都是批量生产，都有固定的规格，并不能适应所有人，所以人体工学椅子和普通椅子一个明显区别就是：可调节！可调节的手托、可调节的坐垫高度、可调节的坐垫前后深度、可调节的枕托、可调节的背靠、可调节的腰托等。\n\n# 一把质量差的电脑椅\n\n质量差的电脑椅能有咋的，顶多坏了摔一跤？还是看图最直观：\n\n![1918606_151944_1](为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif)\n\n\n\n上图的爆炸是气压棒爆炸引起的。\n\n电脑椅升降功能大都是靠气压棒来实现的。那么什么是气压棒呢？\n\n看下[百度百科](http://baike.baidu.com/item/%E6%B0%94%E5%8E%8B%E6%A3%92) 对气压棒的定义，其实说白了气压棒就是靠对棒内气体压缩和释放来达到升降电脑椅的。正品气压棒里面是高纯度氮气填充，并不会爆炸，而一些无良厂商为了节省成本，往往会以价格更为低廉的氧气作为填充物。氧气易燃，遇明火极易产生爆炸，酿成不可挽回的事故。\n\n# 一个气压棒引起的事故\n\n- 1.2007年4月20日晚，浙江省舟山市定海区，一位娄女士坐的椅子发生爆炸，座椅被炸穿，娄女士穿的裤子被炸了个大洞，硬塑料、木屑、海绵、布料、密封圈等大量碎片崩进娄女士体内达十厘米。\n\n- 2.2007年11月26日晚，烟台开发区68岁的吴老先生所坐的气压升降椅发生爆炸，臀部、腿部、直肠肛管和小肠受伤严重。\n\n- 3.2008年3月26日晚，江西赣州市，一位林先生家中的电脑椅突然发生爆炸，林先生背上、手上等处受伤，一根大约15厘米长的小铁棍炸飞到天花板上。\n\n- 4.2009年1月14日，山东胶州14岁少年小刚(化名)独自在家上网，在调节气压椅升降时，突然发生爆炸，顶杆从臀部顶进小刚体内，伤及多条血管，后因失血过多，抢救无效死亡。\n\n- 5.2010.5.12晚上9点半左右，厦门湖里殿前一户出租屋传出巨响。一名女子被突然发生爆裂的升降椅击伤。升降旋转椅突然爆炸，产生的冲击力将椅子里的螺丝小垫片等零件像子弹一样从臀部射入人体内。升降椅的气压杆插入伤者的肛门。女子当场晕倒在地。所幸经过5个多小时的手术，射入体内的椅子零件全被取出，刘小姐无生命危险。\n\n- 6.2010年5月，福建一女子因气压升降椅爆炸伤势严重当场昏迷，臀部被炸伤，直肠被撕裂了一个口子，阴道也穿了一个孔。后检查椅子的购物单据，没有任何厂名、厂址、电话之类信息。\n\n- 7.24岁的小林坐在升降旋转椅上吹头发，椅子爆炸，螺丝钉从她肛门边上穿进去，从子宫直肠陷凹处穿出。经过手术，医生从她的体内和臀部取出大量的螺丝钉和塑料碎片。医生说，还算幸运，穿过体内的螺丝钉没有伤及重要的脏器，手术后小林已脱离生命危险。\n\n  > 请务必一定要提醒你的家人和朋友注意：\n  >\n  > 1、务必购买正规厂家生产的升降椅，切勿贪图便宜，购买劣质货。\n  >\n  > 2、椅子在使用时，不要反复升降，不要滑来滑去，更不要猛地一下子坐上去。这易造成气压杆受力不均，长时间产生不均衡磨损，易爆炸。据模拟测算，爆炸会产生24个左右大气压，其威力至少能击穿6块密度板，顷刻能洞穿血肉之躯!\n  >\n  > 3、如果不是专业人士，不要拆开气缸，也不要让椅子靠近太热的东西，比如烤火炉或烤箱。\n  >\n  > 4、使用一段时间后，应该及时让专业人员检查，一旦发现裂痕、松动迹象，应及时维修更换。\n\n# 如何挑选人体工学电脑椅\n\n## 价格\n\n从价格上来说，和其他商品一样，往往都是一分钱一分货，一块钱二分货。\n\n国际品牌有欧美的Herman Miller、日本的岗村，这些高端系列普遍价格过万或者近万元，当然也有三五千的，但是可选性比较少。\n\n国内品牌有ergonor、ergomax以及黑白调、西昊等。国产价位3000以上就算是高端了，譬如金豪+e、l和ergomax旗舰版。\n\n个人感觉如果要买人体工学电脑椅，还是要舍得投资的，毕竟这投资的是自己的健康。建议起步买2k-3k的。毕竟这个价位在国内属于高端，国外品牌也能买到。这个价位的各方面功能齐全，可以都体验下，为以后的挑选打下基础。\n\n## 网布\n\n坐垫和椅背的材质有皮质、网布和海绵坐垫，我更喜欢全网布的，夏天透气性更好，但是也有个问题：如果网布质量不好，可能坐一段时间后网布就失去弹性，变得松垮。\n\n高端电脑椅网布大都进口，进口网布主要是美国matrex，韩国wintex次之，其他基本就是国产的。\n\n**进口网和国产网的差别：**\n\n价格：进口的美国Matrex网最贵，韩国Wintex网次之，国产网价格最便宜网，而且进口网涉及空运报关原因，货期长。\n\n耐用性：在厂家的垂直堕下机械测试中，进口Matrex网和Wintex网可以通过10万次强力冲击，国产网在按不同牌子在6-8万次之间会出现爆裂!\n\n材质：美国Matrex网和Wintex网材质柔软，弹力强，国产网比较硬，弹力及恢复力差。\n\n\n\nMatrex表面反光呈黏手手感，Wintex网表面反光呈光滑手感，国产网按不同牌子部分表面光滑，部分表面粗糙。\n\n据Matrex网和Wintex网国内代理商的说法，国内厂商用进口网布的并不多，内销产品基本都不会使用进口网，进口网一般都是外国客户指定要求才用的，原因在于进口网不仅更贵，而且在订购数量方面有要求，由于涉及空运报关因素，邮寄周期也比较长，这样就限制了小厂家的采购，掌柜曾经在网上看过一些网店几百产品也宣称使用Matrex网，那是不可能的，进口网，基本上只出现在2K以上的产品。\n\n\n\n**Matrex和wintex网布都是有吊牌的，如果商家真的采用这两种品牌，一定会拿出来当噱头显摆一番的，而不是轻描淡写的一句采用进口网布草草了事。网上那些说进口网布，但又不敢指明具体品牌的，就当时国产就行了或者不要买，毕竟涉嫌欺诈。**\n\n\n\n## 气压棒\n\n气压棒是有分级的，目前是共有四级：普遍使用的时三级，少数所谓高端使用四级。\n\n常用气压棒品牌：国内知名的有：安徽莱特，安德福，常州巨威，安吉斯诺尔，等还有一些进口的：韩国KGS，韩国三弘，德国SUS棒，台湾MID棒等等。\n\n**买回来后看气压棒有没有钢印，查看钢印信息是否和商家描述一致，如果有问题即时质疑。**\n\n\n\n\n\n## 底座\n\n一般来说都有底座防爆措施，但是价格越高底座用料越实，甚至是全铝合金底盘。我的2k 的gavee整个椅子70多斤重，厚重的材质更容易给人以安全感。\n\n\n\n**我对铝合金椅身有特殊好感，或许害怕塑料椅身不结实，也或许铝合金抛光后看起来更高端也更敦实。**\n\n\n\n这是我的电脑椅样式：\n\n![58f074a8N70fcfb6a](为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg)\n\n","slug":"为什么每一个IT人员应该有一把人体工学电脑椅","published":1,"updated":"2017-05-15T11:42:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nj002q449cj26jq16r","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>工欲善其事，必先利其器。可能也有强迫症的原因，上班时总是会想尽办法提高工作效率，同时给自己创造一个愉悦的工作状态。对于能提高效率的硬件因素自然不能放过。什么罗技鼠标、机械键盘宿舍公司各一套。为了方便显示器调整，又买了乐哥支架，这样能随时调整角度，避免一个姿势容易疲劳。但是最近又出现了一个问题：一个姿势坐半个小时就浑身不自在，脖子僵硬大脑供血不足，严重时候还有恶心呕吐现象。其实不用说也猜到了—颈椎病，如果置之不理以后腰椎可能也会出现病症。毕竟这是很多IT从业人员的通病，如何缓解病况才不致于影响工作效率呢？个人感觉一把人体工学电脑椅是必须的。</p>\n<h1 id=\"什么是人体工学电脑椅\"><a href=\"#什么是人体工学电脑椅\" class=\"headerlink\" title=\"什么是人体工学电脑椅\"></a>什么是人体工学电脑椅</h1><p>看下<a href=\"http://baike.baidu.com/link?url=DtpSA5XKbKnq0i8zuufuO3XadcstS54-xa_Yy1tgbhl2P962gqvxcBdlTMD9X38dAhw9THJrNJ4LvH3v_LrY34E1ENL3-2sLwtmJapNyawT3y9q8Q6rki5jdqYXnD9XahJADbgkPqYscZxNB0ImSqnqI62tEybnCUKPugI6sPRi\" target=\"_blank\" rel=\"external\">百度百科</a> 对人体工学电脑椅的定义：人体工学电脑椅也称人体工学椅、人体工学办公椅，它是以“人体工程学”理论为基础，通过对人们在使用电脑椅的过程中的各个数据进行统计汇总，并根据最终统计的数据而设计研发的电脑椅。</p>\n<p>我们日常坐的椅子都是批量生产，都有固定的规格，并不能适应所有人，所以人体工学椅子和普通椅子一个明显区别就是：可调节！可调节的手托、可调节的坐垫高度、可调节的坐垫前后深度、可调节的枕托、可调节的背靠、可调节的腰托等。</p>\n<h1 id=\"一把质量差的电脑椅\"><a href=\"#一把质量差的电脑椅\" class=\"headerlink\" title=\"一把质量差的电脑椅\"></a>一把质量差的电脑椅</h1><p>质量差的电脑椅能有咋的，顶多坏了摔一跤？还是看图最直观：</p>\n<p><img src=\"/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif\" alt=\"1918606_151944_1\"></p>\n<p>上图的爆炸是气压棒爆炸引起的。</p>\n<p>电脑椅升降功能大都是靠气压棒来实现的。那么什么是气压棒呢？</p>\n<p>看下<a href=\"http://baike.baidu.com/item/%E6%B0%94%E5%8E%8B%E6%A3%92\" target=\"_blank\" rel=\"external\">百度百科</a> 对气压棒的定义，其实说白了气压棒就是靠对棒内气体压缩和释放来达到升降电脑椅的。正品气压棒里面是高纯度氮气填充，并不会爆炸，而一些无良厂商为了节省成本，往往会以价格更为低廉的氧气作为填充物。氧气易燃，遇明火极易产生爆炸，酿成不可挽回的事故。</p>\n<h1 id=\"一个气压棒引起的事故\"><a href=\"#一个气压棒引起的事故\" class=\"headerlink\" title=\"一个气压棒引起的事故\"></a>一个气压棒引起的事故</h1><ul>\n<li><p>1.2007年4月20日晚，浙江省舟山市定海区，一位娄女士坐的椅子发生爆炸，座椅被炸穿，娄女士穿的裤子被炸了个大洞，硬塑料、木屑、海绵、布料、密封圈等大量碎片崩进娄女士体内达十厘米。</p>\n</li>\n<li><p>2.2007年11月26日晚，烟台开发区68岁的吴老先生所坐的气压升降椅发生爆炸，臀部、腿部、直肠肛管和小肠受伤严重。</p>\n</li>\n<li><p>3.2008年3月26日晚，江西赣州市，一位林先生家中的电脑椅突然发生爆炸，林先生背上、手上等处受伤，一根大约15厘米长的小铁棍炸飞到天花板上。</p>\n</li>\n<li><p>4.2009年1月14日，山东胶州14岁少年小刚(化名)独自在家上网，在调节气压椅升降时，突然发生爆炸，顶杆从臀部顶进小刚体内，伤及多条血管，后因失血过多，抢救无效死亡。</p>\n</li>\n<li><p>5.2010.5.12晚上9点半左右，厦门湖里殿前一户出租屋传出巨响。一名女子被突然发生爆裂的升降椅击伤。升降旋转椅突然爆炸，产生的冲击力将椅子里的螺丝小垫片等零件像子弹一样从臀部射入人体内。升降椅的气压杆插入伤者的肛门。女子当场晕倒在地。所幸经过5个多小时的手术，射入体内的椅子零件全被取出，刘小姐无生命危险。</p>\n</li>\n<li><p>6.2010年5月，福建一女子因气压升降椅爆炸伤势严重当场昏迷，臀部被炸伤，直肠被撕裂了一个口子，阴道也穿了一个孔。后检查椅子的购物单据，没有任何厂名、厂址、电话之类信息。</p>\n</li>\n<li><p>7.24岁的小林坐在升降旋转椅上吹头发，椅子爆炸，螺丝钉从她肛门边上穿进去，从子宫直肠陷凹处穿出。经过手术，医生从她的体内和臀部取出大量的螺丝钉和塑料碎片。医生说，还算幸运，穿过体内的螺丝钉没有伤及重要的脏器，手术后小林已脱离生命危险。</p>\n<blockquote>\n<p>请务必一定要提醒你的家人和朋友注意：</p>\n<p>1、务必购买正规厂家生产的升降椅，切勿贪图便宜，购买劣质货。</p>\n<p>2、椅子在使用时，不要反复升降，不要滑来滑去，更不要猛地一下子坐上去。这易造成气压杆受力不均，长时间产生不均衡磨损，易爆炸。据模拟测算，爆炸会产生24个左右大气压，其威力至少能击穿6块密度板，顷刻能洞穿血肉之躯!</p>\n<p>3、如果不是专业人士，不要拆开气缸，也不要让椅子靠近太热的东西，比如烤火炉或烤箱。</p>\n<p>4、使用一段时间后，应该及时让专业人员检查，一旦发现裂痕、松动迹象，应及时维修更换。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"如何挑选人体工学电脑椅\"><a href=\"#如何挑选人体工学电脑椅\" class=\"headerlink\" title=\"如何挑选人体工学电脑椅\"></a>如何挑选人体工学电脑椅</h1><h2 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h2><p>从价格上来说，和其他商品一样，往往都是一分钱一分货，一块钱二分货。</p>\n<p>国际品牌有欧美的Herman Miller、日本的岗村，这些高端系列普遍价格过万或者近万元，当然也有三五千的，但是可选性比较少。</p>\n<p>国内品牌有ergonor、ergomax以及黑白调、西昊等。国产价位3000以上就算是高端了，譬如金豪+e、l和ergomax旗舰版。</p>\n<p>个人感觉如果要买人体工学电脑椅，还是要舍得投资的，毕竟这投资的是自己的健康。建议起步买2k-3k的。毕竟这个价位在国内属于高端，国外品牌也能买到。这个价位的各方面功能齐全，可以都体验下，为以后的挑选打下基础。</p>\n<h2 id=\"网布\"><a href=\"#网布\" class=\"headerlink\" title=\"网布\"></a>网布</h2><p>坐垫和椅背的材质有皮质、网布和海绵坐垫，我更喜欢全网布的，夏天透气性更好，但是也有个问题：如果网布质量不好，可能坐一段时间后网布就失去弹性，变得松垮。</p>\n<p>高端电脑椅网布大都进口，进口网布主要是美国matrex，韩国wintex次之，其他基本就是国产的。</p>\n<p><strong>进口网和国产网的差别：</strong></p>\n<p>价格：进口的美国Matrex网最贵，韩国Wintex网次之，国产网价格最便宜网，而且进口网涉及空运报关原因，货期长。</p>\n<p>耐用性：在厂家的垂直堕下机械测试中，进口Matrex网和Wintex网可以通过10万次强力冲击，国产网在按不同牌子在6-8万次之间会出现爆裂!</p>\n<p>材质：美国Matrex网和Wintex网材质柔软，弹力强，国产网比较硬，弹力及恢复力差。</p>\n<p>Matrex表面反光呈黏手手感，Wintex网表面反光呈光滑手感，国产网按不同牌子部分表面光滑，部分表面粗糙。</p>\n<p>据Matrex网和Wintex网国内代理商的说法，国内厂商用进口网布的并不多，内销产品基本都不会使用进口网，进口网一般都是外国客户指定要求才用的，原因在于进口网不仅更贵，而且在订购数量方面有要求，由于涉及空运报关因素，邮寄周期也比较长，这样就限制了小厂家的采购，掌柜曾经在网上看过一些网店几百产品也宣称使用Matrex网，那是不可能的，进口网，基本上只出现在2K以上的产品。</p>\n<p><strong>Matrex和wintex网布都是有吊牌的，如果商家真的采用这两种品牌，一定会拿出来当噱头显摆一番的，而不是轻描淡写的一句采用进口网布草草了事。网上那些说进口网布，但又不敢指明具体品牌的，就当时国产就行了或者不要买，毕竟涉嫌欺诈。</strong></p>\n<h2 id=\"气压棒\"><a href=\"#气压棒\" class=\"headerlink\" title=\"气压棒\"></a>气压棒</h2><p>气压棒是有分级的，目前是共有四级：普遍使用的时三级，少数所谓高端使用四级。</p>\n<p>常用气压棒品牌：国内知名的有：安徽莱特，安德福，常州巨威，安吉斯诺尔，等还有一些进口的：韩国KGS，韩国三弘，德国SUS棒，台湾MID棒等等。</p>\n<p><strong>买回来后看气压棒有没有钢印，查看钢印信息是否和商家描述一致，如果有问题即时质疑。</strong></p>\n<h2 id=\"底座\"><a href=\"#底座\" class=\"headerlink\" title=\"底座\"></a>底座</h2><p>一般来说都有底座防爆措施，但是价格越高底座用料越实，甚至是全铝合金底盘。我的2k 的gavee整个椅子70多斤重，厚重的材质更容易给人以安全感。</p>\n<p><strong>我对铝合金椅身有特殊好感，或许害怕塑料椅身不结实，也或许铝合金抛光后看起来更高端也更敦实。</strong></p>\n<p>这是我的电脑椅样式：</p>\n<p><img src=\"/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg\" alt=\"58f074a8N70fcfb6a\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>工欲善其事，必先利其器。可能也有强迫症的原因，上班时总是会想尽办法提高工作效率，同时给自己创造一个愉悦的工作状态。对于能提高效率的硬件因素自然不能放过。什么罗技鼠标、机械键盘宿舍公司各一套。为了方便显示器调整，又买了乐哥支架，这样能随时调整角度，避免一个姿势容易疲劳。但是最近又出现了一个问题：一个姿势坐半个小时就浑身不自在，脖子僵硬大脑供血不足，严重时候还有恶心呕吐现象。其实不用说也猜到了—颈椎病，如果置之不理以后腰椎可能也会出现病症。毕竟这是很多IT从业人员的通病，如何缓解病况才不致于影响工作效率呢？个人感觉一把人体工学电脑椅是必须的。</p>\n<h1 id=\"什么是人体工学电脑椅\"><a href=\"#什么是人体工学电脑椅\" class=\"headerlink\" title=\"什么是人体工学电脑椅\"></a>什么是人体工学电脑椅</h1><p>看下<a href=\"http://baike.baidu.com/link?url=DtpSA5XKbKnq0i8zuufuO3XadcstS54-xa_Yy1tgbhl2P962gqvxcBdlTMD9X38dAhw9THJrNJ4LvH3v_LrY34E1ENL3-2sLwtmJapNyawT3y9q8Q6rki5jdqYXnD9XahJADbgkPqYscZxNB0ImSqnqI62tEybnCUKPugI6sPRi\">百度百科</a> 对人体工学电脑椅的定义：人体工学电脑椅也称人体工学椅、人体工学办公椅，它是以“人体工程学”理论为基础，通过对人们在使用电脑椅的过程中的各个数据进行统计汇总，并根据最终统计的数据而设计研发的电脑椅。</p>\n<p>我们日常坐的椅子都是批量生产，都有固定的规格，并不能适应所有人，所以人体工学椅子和普通椅子一个明显区别就是：可调节！可调节的手托、可调节的坐垫高度、可调节的坐垫前后深度、可调节的枕托、可调节的背靠、可调节的腰托等。</p>\n<h1 id=\"一把质量差的电脑椅\"><a href=\"#一把质量差的电脑椅\" class=\"headerlink\" title=\"一把质量差的电脑椅\"></a>一把质量差的电脑椅</h1><p>质量差的电脑椅能有咋的，顶多坏了摔一跤？还是看图最直观：</p>\n<p><img src=\"/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif\" alt=\"1918606_151944_1\"></p>\n<p>上图的爆炸是气压棒爆炸引起的。</p>\n<p>电脑椅升降功能大都是靠气压棒来实现的。那么什么是气压棒呢？</p>\n<p>看下<a href=\"http://baike.baidu.com/item/%E6%B0%94%E5%8E%8B%E6%A3%92\">百度百科</a> 对气压棒的定义，其实说白了气压棒就是靠对棒内气体压缩和释放来达到升降电脑椅的。正品气压棒里面是高纯度氮气填充，并不会爆炸，而一些无良厂商为了节省成本，往往会以价格更为低廉的氧气作为填充物。氧气易燃，遇明火极易产生爆炸，酿成不可挽回的事故。</p>\n<h1 id=\"一个气压棒引起的事故\"><a href=\"#一个气压棒引起的事故\" class=\"headerlink\" title=\"一个气压棒引起的事故\"></a>一个气压棒引起的事故</h1><ul>\n<li><p>1.2007年4月20日晚，浙江省舟山市定海区，一位娄女士坐的椅子发生爆炸，座椅被炸穿，娄女士穿的裤子被炸了个大洞，硬塑料、木屑、海绵、布料、密封圈等大量碎片崩进娄女士体内达十厘米。</p>\n</li>\n<li><p>2.2007年11月26日晚，烟台开发区68岁的吴老先生所坐的气压升降椅发生爆炸，臀部、腿部、直肠肛管和小肠受伤严重。</p>\n</li>\n<li><p>3.2008年3月26日晚，江西赣州市，一位林先生家中的电脑椅突然发生爆炸，林先生背上、手上等处受伤，一根大约15厘米长的小铁棍炸飞到天花板上。</p>\n</li>\n<li><p>4.2009年1月14日，山东胶州14岁少年小刚(化名)独自在家上网，在调节气压椅升降时，突然发生爆炸，顶杆从臀部顶进小刚体内，伤及多条血管，后因失血过多，抢救无效死亡。</p>\n</li>\n<li><p>5.2010.5.12晚上9点半左右，厦门湖里殿前一户出租屋传出巨响。一名女子被突然发生爆裂的升降椅击伤。升降旋转椅突然爆炸，产生的冲击力将椅子里的螺丝小垫片等零件像子弹一样从臀部射入人体内。升降椅的气压杆插入伤者的肛门。女子当场晕倒在地。所幸经过5个多小时的手术，射入体内的椅子零件全被取出，刘小姐无生命危险。</p>\n</li>\n<li><p>6.2010年5月，福建一女子因气压升降椅爆炸伤势严重当场昏迷，臀部被炸伤，直肠被撕裂了一个口子，阴道也穿了一个孔。后检查椅子的购物单据，没有任何厂名、厂址、电话之类信息。</p>\n</li>\n<li><p>7.24岁的小林坐在升降旋转椅上吹头发，椅子爆炸，螺丝钉从她肛门边上穿进去，从子宫直肠陷凹处穿出。经过手术，医生从她的体内和臀部取出大量的螺丝钉和塑料碎片。医生说，还算幸运，穿过体内的螺丝钉没有伤及重要的脏器，手术后小林已脱离生命危险。</p>\n<blockquote>\n<p>请务必一定要提醒你的家人和朋友注意：</p>\n<p>1、务必购买正规厂家生产的升降椅，切勿贪图便宜，购买劣质货。</p>\n<p>2、椅子在使用时，不要反复升降，不要滑来滑去，更不要猛地一下子坐上去。这易造成气压杆受力不均，长时间产生不均衡磨损，易爆炸。据模拟测算，爆炸会产生24个左右大气压，其威力至少能击穿6块密度板，顷刻能洞穿血肉之躯!</p>\n<p>3、如果不是专业人士，不要拆开气缸，也不要让椅子靠近太热的东西，比如烤火炉或烤箱。</p>\n<p>4、使用一段时间后，应该及时让专业人员检查，一旦发现裂痕、松动迹象，应及时维修更换。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"如何挑选人体工学电脑椅\"><a href=\"#如何挑选人体工学电脑椅\" class=\"headerlink\" title=\"如何挑选人体工学电脑椅\"></a>如何挑选人体工学电脑椅</h1><h2 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h2><p>从价格上来说，和其他商品一样，往往都是一分钱一分货，一块钱二分货。</p>\n<p>国际品牌有欧美的Herman Miller、日本的岗村，这些高端系列普遍价格过万或者近万元，当然也有三五千的，但是可选性比较少。</p>\n<p>国内品牌有ergonor、ergomax以及黑白调、西昊等。国产价位3000以上就算是高端了，譬如金豪+e、l和ergomax旗舰版。</p>\n<p>个人感觉如果要买人体工学电脑椅，还是要舍得投资的，毕竟这投资的是自己的健康。建议起步买2k-3k的。毕竟这个价位在国内属于高端，国外品牌也能买到。这个价位的各方面功能齐全，可以都体验下，为以后的挑选打下基础。</p>\n<h2 id=\"网布\"><a href=\"#网布\" class=\"headerlink\" title=\"网布\"></a>网布</h2><p>坐垫和椅背的材质有皮质、网布和海绵坐垫，我更喜欢全网布的，夏天透气性更好，但是也有个问题：如果网布质量不好，可能坐一段时间后网布就失去弹性，变得松垮。</p>\n<p>高端电脑椅网布大都进口，进口网布主要是美国matrex，韩国wintex次之，其他基本就是国产的。</p>\n<p><strong>进口网和国产网的差别：</strong></p>\n<p>价格：进口的美国Matrex网最贵，韩国Wintex网次之，国产网价格最便宜网，而且进口网涉及空运报关原因，货期长。</p>\n<p>耐用性：在厂家的垂直堕下机械测试中，进口Matrex网和Wintex网可以通过10万次强力冲击，国产网在按不同牌子在6-8万次之间会出现爆裂!</p>\n<p>材质：美国Matrex网和Wintex网材质柔软，弹力强，国产网比较硬，弹力及恢复力差。</p>\n<p>Matrex表面反光呈黏手手感，Wintex网表面反光呈光滑手感，国产网按不同牌子部分表面光滑，部分表面粗糙。</p>\n<p>据Matrex网和Wintex网国内代理商的说法，国内厂商用进口网布的并不多，内销产品基本都不会使用进口网，进口网一般都是外国客户指定要求才用的，原因在于进口网不仅更贵，而且在订购数量方面有要求，由于涉及空运报关因素，邮寄周期也比较长，这样就限制了小厂家的采购，掌柜曾经在网上看过一些网店几百产品也宣称使用Matrex网，那是不可能的，进口网，基本上只出现在2K以上的产品。</p>\n<p><strong>Matrex和wintex网布都是有吊牌的，如果商家真的采用这两种品牌，一定会拿出来当噱头显摆一番的，而不是轻描淡写的一句采用进口网布草草了事。网上那些说进口网布，但又不敢指明具体品牌的，就当时国产就行了或者不要买，毕竟涉嫌欺诈。</strong></p>\n<h2 id=\"气压棒\"><a href=\"#气压棒\" class=\"headerlink\" title=\"气压棒\"></a>气压棒</h2><p>气压棒是有分级的，目前是共有四级：普遍使用的时三级，少数所谓高端使用四级。</p>\n<p>常用气压棒品牌：国内知名的有：安徽莱特，安德福，常州巨威，安吉斯诺尔，等还有一些进口的：韩国KGS，韩国三弘，德国SUS棒，台湾MID棒等等。</p>\n<p><strong>买回来后看气压棒有没有钢印，查看钢印信息是否和商家描述一致，如果有问题即时质疑。</strong></p>\n<h2 id=\"底座\"><a href=\"#底座\" class=\"headerlink\" title=\"底座\"></a>底座</h2><p>一般来说都有底座防爆措施，但是价格越高底座用料越实，甚至是全铝合金底盘。我的2k 的gavee整个椅子70多斤重，厚重的材质更容易给人以安全感。</p>\n<p><strong>我对铝合金椅身有特殊好感，或许害怕塑料椅身不结实，也或许铝合金抛光后看起来更高端也更敦实。</strong></p>\n<p>这是我的电脑椅样式：</p>\n<p><img src=\"/2017/05/15/为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg\" alt=\"58f074a8N70fcfb6a\"></p>\n"},{"title":"使用Sublime text编译python3时中文打印异常问题","date":"2017-04-22T10:55:54.000Z","_content":"\n按照网上的一些方法改了几个地方都是没有效果，就又都给还原回来了。后来发现只要修改先前配置的环境即可\n```\n{\n\t\"cmd\": [\"/Library/Frameworks/Python.framework/Versions/3.5/bin/python3\",\"-u\",\"$file\"],\n\t\"env\": {\"LANG\": \"en_US.UTF-8\"}\n}\n```\n加上一句env的配置就可以了。\n什么？不知道去哪里找配置文件了？\n\n![屏幕快照 2017-01-07 上午11.35.31.png](http://upload-images.jianshu.io/upload_images/1796052-06e6c7cff8200bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开Preferences -> Browse Packages -> 会自动打开一个新的窗口-打开user编辑之前的文件保存即可。\n![屏幕快照 2017-01-07 上午11.36.46.png](http://upload-images.jianshu.io/upload_images/1796052-a48410d9dd488b78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![屏幕快照 2017-01-07 上午11.37.09.png](http://upload-images.jianshu.io/upload_images/1796052-50806a0e72ca3dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nmark一下","source":"_posts/使用Sublime text编译python3时中文打印异常问题.md","raw":"---\ntitle: 使用Sublime text编译python3时中文打印异常问题\ndate: 2017-04-22 18:55:54\ntags: Python\ncategories: Python\n---\n\n按照网上的一些方法改了几个地方都是没有效果，就又都给还原回来了。后来发现只要修改先前配置的环境即可\n```\n{\n\t\"cmd\": [\"/Library/Frameworks/Python.framework/Versions/3.5/bin/python3\",\"-u\",\"$file\"],\n\t\"env\": {\"LANG\": \"en_US.UTF-8\"}\n}\n```\n加上一句env的配置就可以了。\n什么？不知道去哪里找配置文件了？\n\n![屏幕快照 2017-01-07 上午11.35.31.png](http://upload-images.jianshu.io/upload_images/1796052-06e6c7cff8200bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开Preferences -> Browse Packages -> 会自动打开一个新的窗口-打开user编辑之前的文件保存即可。\n![屏幕快照 2017-01-07 上午11.36.46.png](http://upload-images.jianshu.io/upload_images/1796052-a48410d9dd488b78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![屏幕快照 2017-01-07 上午11.37.09.png](http://upload-images.jianshu.io/upload_images/1796052-50806a0e72ca3dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nmark一下","slug":"使用Sublime text编译python3时中文打印异常问题","published":1,"updated":"2017-04-22T10:57:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nn002v449c0iijyjss","content":"<p>按照网上的一些方法改了几个地方都是没有效果，就又都给还原回来了。后来发现只要修改先前配置的环境即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;cmd&quot;: [&quot;/Library/Frameworks/Python.framework/Versions/3.5/bin/python3&quot;,&quot;-u&quot;,&quot;$file&quot;],</div><div class=\"line\">\t&quot;env&quot;: &#123;&quot;LANG&quot;: &quot;en_US.UTF-8&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加上一句env的配置就可以了。<br>什么？不知道去哪里找配置文件了？</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-06e6c7cff8200bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.35.31.png\"></p>\n<p>打开Preferences -&gt; Browse Packages -&gt; 会自动打开一个新的窗口-打开user编辑之前的文件保存即可。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a48410d9dd488b78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.36.46.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-50806a0e72ca3dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.37.09.png\"></p>\n<p>mark一下</p>\n","site":{"data":{}},"excerpt":"","more":"<p>按照网上的一些方法改了几个地方都是没有效果，就又都给还原回来了。后来发现只要修改先前配置的环境即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t&quot;cmd&quot;: [&quot;/Library/Frameworks/Python.framework/Versions/3.5/bin/python3&quot;,&quot;-u&quot;,&quot;$file&quot;],</div><div class=\"line\">\t&quot;env&quot;: &#123;&quot;LANG&quot;: &quot;en_US.UTF-8&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加上一句env的配置就可以了。<br>什么？不知道去哪里找配置文件了？</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-06e6c7cff8200bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.35.31.png\"></p>\n<p>打开Preferences -&gt; Browse Packages -&gt; 会自动打开一个新的窗口-打开user编辑之前的文件保存即可。<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a48410d9dd488b78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.36.46.png\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-50806a0e72ca3dc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-01-07 上午11.37.09.png\"></p>\n<p>mark一下</p>\n"},{"title":"关于家庭网络宽带、路由及上网设备那些事","date":"2017-04-21T14:40:50.000Z","_content":"\n看不见摸不着，但又对我们很重要的东西，你们觉得是什么？很多人一定会说是空气，但是肯定还有一部分心里会认为是WIFI~。\n  以前经常感慨每次回家最先欢迎我的不是别人，正是WIFI(~信号强没办法，一进小区就连接上了)。的确随着宽带的普及，我们的生活也愈来愈离不开网络，不管看电影玩游戏还是查资料。那你到底对它连接多少呢？\n\n1.你知道网络运营商所说的20M、50M和100M到底是什么意思吗?\n2.你知道运营商提供的50M和迅雷下载的速度2MB/s有什么区别联系吗？\n3.你知道为什么升级了宽带，然而下载速度为什么没有提升吗？\n如果都不清楚，那这篇文章就是为你准备的，请继续。\n\n我们先来看下日常家庭网络图：\n![P70214-123417.jpg](http://upload-images.jianshu.io/upload_images/1796052-375a9d5345b944e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n一般都是运营商把网线拉到家中，然后插到路由器上，然后通过无线路由功能为多台设备提供上网功能。\n如果是光纤用户会，则应该是网线接入光猫，再把光猫接入到路由器。\n看懂了这张图，下面的要讲的内容就很容易理解了。\n### 运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\n其实不管是运营商还是路由器厂家标称的xxM其实是Mbps的简称，而Mbps是Million bits per second的缩写，意思就是声称的20M是20兆位/秒。迅雷的下载速度5MB/s又是什么意思？这里的MB是指兆字节/秒\n要找出带宽和下载的关系要知道一个公式```1字节=8比特位  即1Byte=8bit。```所以声称的20M带宽实际下载速度为20/8=2.5MB/s，当然这是理论上的最大下载速度，线路的传输是有损耗的，所以一般下载速度会小于该理论值。\n### 为什么升级了宽带，网速还是没有什么明显提升？\n上面知道了带宽和下载速度的关系，那么路由器带宽和其支持的最大传输速度关系也就明白了吧。\n哪些号称150M的路由器最大支持传输速率为150/8 =18.75MB/s ，加上路由器厂商的偷工减料，所以一般速率又严重小于18.75这个值(如果你的路由器能达到这个值，那一定是遇到良心厂家了)。假设光纤用户使用100兆时最大下载速度本可以达到12.5MB/s的，然而由于路由器偷工减料仅能达到18.75的一半即9MB/s时，这时你的家庭网络最大速度就只能被路由器所限制。\n### 升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~\n先来个问题：马路上能一次同时过5个人，家门口小路一次只能同时走3个人，但是我家大门一次只能同时1人过。那人员流动速率瓶颈在哪就很明显了吧，同样的，宽带、路由器都是网络的媒介，真正使用网络的是我们的手机电脑和平板。假设你的宽带和路由器的最大传输速率都达到了12.5MB/s，但是你的笔记本电脑的网卡还是54Mbps的老网卡o(╯□╰)o，结果可想而知了。\n### 笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\n县城的马路和北京的马路差不多宽，为什么北京每天堵车而县城基本不会？因为车少哇。同样的，目前大多数路由器的无线提供的都是2.4G无线，而电磁炉、无线键鼠等也有很多使用2.4G无线。在这个频段的设备多了也就难免发生堵塞。为了缓解堵塞，无线双频路由器也就诞生了，所谓双频就是2.4G和5G。5G频段使用设备少所以数据传输也就更稳定。5G高效的还有一个原因是无干扰信道数量比2.4G的更多。对于游戏玩家和高清影视爱好者，一台双频路由是必须的。但是还有一点要注意：使用5G频段需要路由器和网卡都支持802.11ac才可以。\n\n上面说了这么多都是讲出你的网络中制约网速的瓶颈，至于具体的解决方法不用说了大家也心里有数了吧。","source":"_posts/关于家庭网络宽带、路由及上网设备那些事.md","raw":"---\ntitle: 关于家庭网络宽带、路由及上网设备那些事\ndate: 2017-04-21 22:40:50\ntags: 网络\ncategories: 网络\n---\n\n看不见摸不着，但又对我们很重要的东西，你们觉得是什么？很多人一定会说是空气，但是肯定还有一部分心里会认为是WIFI~。\n  以前经常感慨每次回家最先欢迎我的不是别人，正是WIFI(~信号强没办法，一进小区就连接上了)。的确随着宽带的普及，我们的生活也愈来愈离不开网络，不管看电影玩游戏还是查资料。那你到底对它连接多少呢？\n\n1.你知道网络运营商所说的20M、50M和100M到底是什么意思吗?\n2.你知道运营商提供的50M和迅雷下载的速度2MB/s有什么区别联系吗？\n3.你知道为什么升级了宽带，然而下载速度为什么没有提升吗？\n如果都不清楚，那这篇文章就是为你准备的，请继续。\n\n我们先来看下日常家庭网络图：\n![P70214-123417.jpg](http://upload-images.jianshu.io/upload_images/1796052-375a9d5345b944e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n一般都是运营商把网线拉到家中，然后插到路由器上，然后通过无线路由功能为多台设备提供上网功能。\n如果是光纤用户会，则应该是网线接入光猫，再把光猫接入到路由器。\n看懂了这张图，下面的要讲的内容就很容易理解了。\n### 运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\n其实不管是运营商还是路由器厂家标称的xxM其实是Mbps的简称，而Mbps是Million bits per second的缩写，意思就是声称的20M是20兆位/秒。迅雷的下载速度5MB/s又是什么意思？这里的MB是指兆字节/秒\n要找出带宽和下载的关系要知道一个公式```1字节=8比特位  即1Byte=8bit。```所以声称的20M带宽实际下载速度为20/8=2.5MB/s，当然这是理论上的最大下载速度，线路的传输是有损耗的，所以一般下载速度会小于该理论值。\n### 为什么升级了宽带，网速还是没有什么明显提升？\n上面知道了带宽和下载速度的关系，那么路由器带宽和其支持的最大传输速度关系也就明白了吧。\n哪些号称150M的路由器最大支持传输速率为150/8 =18.75MB/s ，加上路由器厂商的偷工减料，所以一般速率又严重小于18.75这个值(如果你的路由器能达到这个值，那一定是遇到良心厂家了)。假设光纤用户使用100兆时最大下载速度本可以达到12.5MB/s的，然而由于路由器偷工减料仅能达到18.75的一半即9MB/s时，这时你的家庭网络最大速度就只能被路由器所限制。\n### 升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~\n先来个问题：马路上能一次同时过5个人，家门口小路一次只能同时走3个人，但是我家大门一次只能同时1人过。那人员流动速率瓶颈在哪就很明显了吧，同样的，宽带、路由器都是网络的媒介，真正使用网络的是我们的手机电脑和平板。假设你的宽带和路由器的最大传输速率都达到了12.5MB/s，但是你的笔记本电脑的网卡还是54Mbps的老网卡o(╯□╰)o，结果可想而知了。\n### 笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\n县城的马路和北京的马路差不多宽，为什么北京每天堵车而县城基本不会？因为车少哇。同样的，目前大多数路由器的无线提供的都是2.4G无线，而电磁炉、无线键鼠等也有很多使用2.4G无线。在这个频段的设备多了也就难免发生堵塞。为了缓解堵塞，无线双频路由器也就诞生了，所谓双频就是2.4G和5G。5G频段使用设备少所以数据传输也就更稳定。5G高效的还有一个原因是无干扰信道数量比2.4G的更多。对于游戏玩家和高清影视爱好者，一台双频路由是必须的。但是还有一点要注意：使用5G频段需要路由器和网卡都支持802.11ac才可以。\n\n上面说了这么多都是讲出你的网络中制约网速的瓶颈，至于具体的解决方法不用说了大家也心里有数了吧。","slug":"关于家庭网络宽带、路由及上网设备那些事","published":1,"updated":"2017-04-22T10:39:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nr002y449c1fylxhkv","content":"<p>看不见摸不着，但又对我们很重要的东西，你们觉得是什么？很多人一定会说是空气，但是肯定还有一部分心里会认为是WIFI~。<br>  以前经常感慨每次回家最先欢迎我的不是别人，正是WIFI(~信号强没办法，一进小区就连接上了)。的确随着宽带的普及，我们的生活也愈来愈离不开网络，不管看电影玩游戏还是查资料。那你到底对它连接多少呢？</p>\n<p>1.你知道网络运营商所说的20M、50M和100M到底是什么意思吗?<br>2.你知道运营商提供的50M和迅雷下载的速度2MB/s有什么区别联系吗？<br>3.你知道为什么升级了宽带，然而下载速度为什么没有提升吗？<br>如果都不清楚，那这篇文章就是为你准备的，请继续。</p>\n<p>我们先来看下日常家庭网络图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-375a9d5345b944e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"P70214-123417.jpg\"></p>\n<p>一般都是运营商把网线拉到家中，然后插到路由器上，然后通过无线路由功能为多台设备提供上网功能。<br>如果是光纤用户会，则应该是网线接入光猫，再把光猫接入到路由器。<br>看懂了这张图，下面的要讲的内容就很容易理解了。</p>\n<h3 id=\"运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\"><a href=\"#运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\" class=\"headerlink\" title=\"运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\"></a>运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？</h3><p>其实不管是运营商还是路由器厂家标称的xxM其实是Mbps的简称，而Mbps是Million bits per second的缩写，意思就是声称的20M是20兆位/秒。迅雷的下载速度5MB/s又是什么意思？这里的MB是指兆字节/秒<br>要找出带宽和下载的关系要知道一个公式<code>1字节=8比特位  即1Byte=8bit。</code>所以声称的20M带宽实际下载速度为20/8=2.5MB/s，当然这是理论上的最大下载速度，线路的传输是有损耗的，所以一般下载速度会小于该理论值。</p>\n<h3 id=\"为什么升级了宽带，网速还是没有什么明显提升？\"><a href=\"#为什么升级了宽带，网速还是没有什么明显提升？\" class=\"headerlink\" title=\"为什么升级了宽带，网速还是没有什么明显提升？\"></a>为什么升级了宽带，网速还是没有什么明显提升？</h3><p>上面知道了带宽和下载速度的关系，那么路由器带宽和其支持的最大传输速度关系也就明白了吧。<br>哪些号称150M的路由器最大支持传输速率为150/8 =18.75MB/s ，加上路由器厂商的偷工减料，所以一般速率又严重小于18.75这个值(如果你的路由器能达到这个值，那一定是遇到良心厂家了)。假设光纤用户使用100兆时最大下载速度本可以达到12.5MB/s的，然而由于路由器偷工减料仅能达到18.75的一半即9MB/s时，这时你的家庭网络最大速度就只能被路由器所限制。</p>\n<h3 id=\"升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧\"><a href=\"#升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧\" class=\"headerlink\" title=\"升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~\"></a>升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~</h3><p>先来个问题：马路上能一次同时过5个人，家门口小路一次只能同时走3个人，但是我家大门一次只能同时1人过。那人员流动速率瓶颈在哪就很明显了吧，同样的，宽带、路由器都是网络的媒介，真正使用网络的是我们的手机电脑和平板。假设你的宽带和路由器的最大传输速率都达到了12.5MB/s，但是你的笔记本电脑的网卡还是54Mbps的老网卡o(╯□╰)o，结果可想而知了。</p>\n<h3 id=\"笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\"><a href=\"#笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\" class=\"headerlink\" title=\"笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\"></a>笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？</h3><p>县城的马路和北京的马路差不多宽，为什么北京每天堵车而县城基本不会？因为车少哇。同样的，目前大多数路由器的无线提供的都是2.4G无线，而电磁炉、无线键鼠等也有很多使用2.4G无线。在这个频段的设备多了也就难免发生堵塞。为了缓解堵塞，无线双频路由器也就诞生了，所谓双频就是2.4G和5G。5G频段使用设备少所以数据传输也就更稳定。5G高效的还有一个原因是无干扰信道数量比2.4G的更多。对于游戏玩家和高清影视爱好者，一台双频路由是必须的。但是还有一点要注意：使用5G频段需要路由器和网卡都支持802.11ac才可以。</p>\n<p>上面说了这么多都是讲出你的网络中制约网速的瓶颈，至于具体的解决方法不用说了大家也心里有数了吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看不见摸不着，但又对我们很重要的东西，你们觉得是什么？很多人一定会说是空气，但是肯定还有一部分心里会认为是WIFI~。<br>  以前经常感慨每次回家最先欢迎我的不是别人，正是WIFI(~信号强没办法，一进小区就连接上了)。的确随着宽带的普及，我们的生活也愈来愈离不开网络，不管看电影玩游戏还是查资料。那你到底对它连接多少呢？</p>\n<p>1.你知道网络运营商所说的20M、50M和100M到底是什么意思吗?<br>2.你知道运营商提供的50M和迅雷下载的速度2MB/s有什么区别联系吗？<br>3.你知道为什么升级了宽带，然而下载速度为什么没有提升吗？<br>如果都不清楚，那这篇文章就是为你准备的，请继续。</p>\n<p>我们先来看下日常家庭网络图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-375a9d5345b944e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"P70214-123417.jpg\"></p>\n<p>一般都是运营商把网线拉到家中，然后插到路由器上，然后通过无线路由功能为多台设备提供上网功能。<br>如果是光纤用户会，则应该是网线接入光猫，再把光猫接入到路由器。<br>看懂了这张图，下面的要讲的内容就很容易理解了。</p>\n<h3 id=\"运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\"><a href=\"#运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\" class=\"headerlink\" title=\"运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？\"></a>运营商提供的20M带宽下载时并没有那么高，到底是怎么回事？这和迅雷下载速度有什么关系？</h3><p>其实不管是运营商还是路由器厂家标称的xxM其实是Mbps的简称，而Mbps是Million bits per second的缩写，意思就是声称的20M是20兆位/秒。迅雷的下载速度5MB/s又是什么意思？这里的MB是指兆字节/秒<br>要找出带宽和下载的关系要知道一个公式<code>1字节=8比特位  即1Byte=8bit。</code>所以声称的20M带宽实际下载速度为20/8=2.5MB/s，当然这是理论上的最大下载速度，线路的传输是有损耗的，所以一般下载速度会小于该理论值。</p>\n<h3 id=\"为什么升级了宽带，网速还是没有什么明显提升？\"><a href=\"#为什么升级了宽带，网速还是没有什么明显提升？\" class=\"headerlink\" title=\"为什么升级了宽带，网速还是没有什么明显提升？\"></a>为什么升级了宽带，网速还是没有什么明显提升？</h3><p>上面知道了带宽和下载速度的关系，那么路由器带宽和其支持的最大传输速度关系也就明白了吧。<br>哪些号称150M的路由器最大支持传输速率为150/8 =18.75MB/s ，加上路由器厂商的偷工减料，所以一般速率又严重小于18.75这个值(如果你的路由器能达到这个值，那一定是遇到良心厂家了)。假设光纤用户使用100兆时最大下载速度本可以达到12.5MB/s的，然而由于路由器偷工减料仅能达到18.75的一半即9MB/s时，这时你的家庭网络最大速度就只能被路由器所限制。</p>\n<h3 id=\"升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧\"><a href=\"#升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧\" class=\"headerlink\" title=\"升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~\"></a>升级了宽带，新买了路由器这下网速该嗖嗖的了吧？只能说也许吧~</h3><p>先来个问题：马路上能一次同时过5个人，家门口小路一次只能同时走3个人，但是我家大门一次只能同时1人过。那人员流动速率瓶颈在哪就很明显了吧，同样的，宽带、路由器都是网络的媒介，真正使用网络的是我们的手机电脑和平板。假设你的宽带和路由器的最大传输速率都达到了12.5MB/s，但是你的笔记本电脑的网卡还是54Mbps的老网卡o(╯□╰)o，结果可想而知了。</p>\n<h3 id=\"笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\"><a href=\"#笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\" class=\"headerlink\" title=\"笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？\"></a>笔记本无线网卡已经是450M的了，为什么玩游戏延迟还是很高？</h3><p>县城的马路和北京的马路差不多宽，为什么北京每天堵车而县城基本不会？因为车少哇。同样的，目前大多数路由器的无线提供的都是2.4G无线，而电磁炉、无线键鼠等也有很多使用2.4G无线。在这个频段的设备多了也就难免发生堵塞。为了缓解堵塞，无线双频路由器也就诞生了，所谓双频就是2.4G和5G。5G频段使用设备少所以数据传输也就更稳定。5G高效的还有一个原因是无干扰信道数量比2.4G的更多。对于游戏玩家和高清影视爱好者，一台双频路由是必须的。但是还有一点要注意：使用5G频段需要路由器和网卡都支持802.11ac才可以。</p>\n<p>上面说了这么多都是讲出你的网络中制约网速的瓶颈，至于具体的解决方法不用说了大家也心里有数了吧。</p>\n"},{"title":"关于家庭网络宽带、路由及上网设备那些事---后续篇","date":"2017-04-21T14:50:50.000Z","_content":"上一篇主要写了几点制约网速的可能原因，没有看过上一篇的请移步[关于家庭网络宽带、路由及上网设备那些事](http://www.jianshu.com/p/f1018427d0eb)。这一篇就分别介绍下宽带、路由和用网设备的一些知识。\n### 家庭宽带的那些事\n\n网络出了问题都会打客服咨询，但是你知道你家的网络服务商是几级的吗？\n\n####1.宽带运营商分级\n\n目前宽带运营商一般分为三级即可，三级··立马就邪恶了。\n一级服运营商是国家、省市、城域骨干网的建设者。主要有联通、电信、移动和广电，以前小的时候就有种说法叫南电信北联通。\n\n电信在一级运营商里算是老前辈了。之所以就叫北联通是因为北方以前上网是通过电话线来拨号的，座机的电话那时候归属网通，后来联通收购了网通。移动以前只有无限上网的业务，宽带业务应该是合并了铁通后才有的，广电应该近些年发展起来的，据说广电是租用电信和自建都有的。\n二级运营商是租用了一级运营商的网络设备来发展的。如果一级运营商是厂家的话，二级运营商就相当于批发商了。主要有歌华宽带、长城宽带等。二级运营商的优势就是性价比较高和比较优质的售后。\n三级运营商是写字楼和办公楼这类，背靠房地产开发商和物业提供商发展的。比如有些写字楼只提供某一种宽带，网络 差但又不允许公司拉其他服务商的宽带，着实可恨。\n\n看到这里相信大家对自家的网络提供商有了个大概了解，如果感兴趣请继续：\n\n\n\n\n### 路由器的那些事\n先上一张图放松下，你们觉得这张图说明了什么问题？\n![148318216333359786_620_1000.JPEG](http://upload-images.jianshu.io/upload_images/1796052-6efbb8ea799a2ea4.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n跟风！！中国人跟风习气太严重，一旦发现别人尝到了点甜头，马上就会有一大波人挤破头的往里钻。\n#### 1.互联网路由器兴起\n也是由于跟风，前两年物联网炒的热闹，家中万物互联，有人分析路由器是物联设备走向网络的首个大门，所以就纷纷研发所谓智能路由器。某米、某为、某极和某数字加入战斗，互联网行业经常是老大和老二掐架，老三莫名的死了。这次乱战虽然没有谁阵亡，但是其实用户还是受益的。最起码手机app管理路由器算是普及了不少，查看联网设备和拉黑蹭网设备也方便不少。\n#### 2.智能路由器\n个人觉得现在所谓的智能路由器其实就是互联网路由器后续发展的产物，而且其实在当不起“智能”二字，可能也是如此，所以目前对于智能路由器的定义也就是拥有独立的系统，可以扩展应用插件来实现不同的功能。\n目前区别路由器是否智能，比较直观的应该是看官方对该型号路由器是否有一个app来支持其手机端操作。\n#### 3. 双频路由器\n上一篇中简单介绍了双频路由器的优点，这里在详细说下：\n以前的无线路由器中只有一个频段就是2.4G，双频路由器中多了一个5G频段。两个频段是由802.11 工作组划分，每个频段又划分为若干信道\n2.4 GHz (802.11b/g/n)信道图如下：\n\n![be261390397543.png](http://upload-images.jianshu.io/upload_images/1796052-fb028f78b96bfa77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有人可能会说中国有13个信道可用，可以的啦。其实每个信道的频宽有22MHz，所以这13个信道有很多重叠的区域，不信你看\n\n![880px-2.4_GHz_Wi-Fi_channels_(802.11b,g_WLAN).svg.png](http://upload-images.jianshu.io/upload_images/1796052-e74729391935e100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样一看刨去重叠的的那些，只有1、6和11三个信道可以互不影响。\n下面我们再看看5G:\n![2e2eb9389b504fc21a213501e3dde71190ef6dbc.jpg](http://upload-images.jianshu.io/upload_images/1796052-d39dbb91334a0469.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n发现中国地5G有5个信道可以使用，看起来也没有比2.4G的好到哪里，为什么传输速率会快呢?\n看下图5G信道间距有20MHz相比2.4G的5MHz大很多，如果使用一个信道时，不会受到其他信道的干扰，如果想提升速率，可以把多个信道合并为40MHz或者80MHz。相比之下速度就提升很多了。\n\n![223707rvzdtllllcvkcv7w.png](http://upload-images.jianshu.io/upload_images/1796052-0b2998b024656dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*所以综合得出结论：\n2.4G 信道虽然多，但是互不影响的只有三个，加上使用设备多，干扰大，所以传输速率2.4G低于5G\n但是由于 5G频率高，波长短，所以穿透性2.4G大于5G。\n举个例子理解下穿透性强弱：假如靠近路由器时都是100%信号，但是穿过一堵墙时，2.4G可能还有80%信号，而5G可能仅剩50%信号，就是说两个频段都能穿墙，但是5G穿墙过程自身损失的更严重，所以常说穿透性弱。*\n\n#### 4.\b什么样的路由器才是好路由器？\n\n在我看来好的路由器首要因素就是是否稳定。上面说了穿墙后的信号会减弱。日常路由器放客厅，但是我们又不可能随时守在客厅，可能在卧室、可能在厕所、也可能在院子，远距离加穿墙后，信号可能只有一格了，很多路由器这时候网络是很差的，经常QQ和微信就可能提示网络无法连接，但是现在明明还有一格信号啊。这就是我所说的稳定。一个性能稳定的路由器就算信号只有微弱的一格，仍然能保持网络的流畅，这是我认为的好路由器。就这一点恰恰是很多市面路由都不具备的。\n其他就是参考路由器的性能指标了，如cpu、内存、flash等越大越好，但能耗能也愈大，发热也严重。一般来说家庭百兆宽带最好配上千兆路由，这里的千兆是wlan和lan口也要是千兆的。\n\n### 用网设备那些事\n#### 1.用有线网\n这里只想说一点如果你刚配的主机加上百兆光纤感觉还是网速不达标，那么你可能遇到假网线了。\n其实网线也是分类的，网线分为五类线、超五类线、六类线、七类线，可以通过网线外皮的Cat.5, Cat.5e,Cat.6等来判断,其中cat.6中间有十字的骨架把网线分开\n![70c2802e87d8e3a8224e0e928e0951b7_r.jpg](http://upload-images.jianshu.io/upload_images/1796052-21fa54d3e840c9a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果家里是百兆光纤一般用超五类或者六类，当然六类最好，因为抗干扰更强。\n\n#### 2.无线设备\n暂时没啥想说的了，想起了再更。见谅~","source":"_posts/关于家庭网络宽带、路由及上网设备那些事---后续篇.md","raw":"---\ntitle: 关于家庭网络宽带、路由及上网设备那些事---后续篇\ndate: 2017-04-21 22:50:50\ntags: 网络\ncategories: 网络\n---\n上一篇主要写了几点制约网速的可能原因，没有看过上一篇的请移步[关于家庭网络宽带、路由及上网设备那些事](http://www.jianshu.com/p/f1018427d0eb)。这一篇就分别介绍下宽带、路由和用网设备的一些知识。\n### 家庭宽带的那些事\n\n网络出了问题都会打客服咨询，但是你知道你家的网络服务商是几级的吗？\n\n####1.宽带运营商分级\n\n目前宽带运营商一般分为三级即可，三级··立马就邪恶了。\n一级服运营商是国家、省市、城域骨干网的建设者。主要有联通、电信、移动和广电，以前小的时候就有种说法叫南电信北联通。\n\n电信在一级运营商里算是老前辈了。之所以就叫北联通是因为北方以前上网是通过电话线来拨号的，座机的电话那时候归属网通，后来联通收购了网通。移动以前只有无限上网的业务，宽带业务应该是合并了铁通后才有的，广电应该近些年发展起来的，据说广电是租用电信和自建都有的。\n二级运营商是租用了一级运营商的网络设备来发展的。如果一级运营商是厂家的话，二级运营商就相当于批发商了。主要有歌华宽带、长城宽带等。二级运营商的优势就是性价比较高和比较优质的售后。\n三级运营商是写字楼和办公楼这类，背靠房地产开发商和物业提供商发展的。比如有些写字楼只提供某一种宽带，网络 差但又不允许公司拉其他服务商的宽带，着实可恨。\n\n看到这里相信大家对自家的网络提供商有了个大概了解，如果感兴趣请继续：\n\n\n\n\n### 路由器的那些事\n先上一张图放松下，你们觉得这张图说明了什么问题？\n![148318216333359786_620_1000.JPEG](http://upload-images.jianshu.io/upload_images/1796052-6efbb8ea799a2ea4.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n跟风！！中国人跟风习气太严重，一旦发现别人尝到了点甜头，马上就会有一大波人挤破头的往里钻。\n#### 1.互联网路由器兴起\n也是由于跟风，前两年物联网炒的热闹，家中万物互联，有人分析路由器是物联设备走向网络的首个大门，所以就纷纷研发所谓智能路由器。某米、某为、某极和某数字加入战斗，互联网行业经常是老大和老二掐架，老三莫名的死了。这次乱战虽然没有谁阵亡，但是其实用户还是受益的。最起码手机app管理路由器算是普及了不少，查看联网设备和拉黑蹭网设备也方便不少。\n#### 2.智能路由器\n个人觉得现在所谓的智能路由器其实就是互联网路由器后续发展的产物，而且其实在当不起“智能”二字，可能也是如此，所以目前对于智能路由器的定义也就是拥有独立的系统，可以扩展应用插件来实现不同的功能。\n目前区别路由器是否智能，比较直观的应该是看官方对该型号路由器是否有一个app来支持其手机端操作。\n#### 3. 双频路由器\n上一篇中简单介绍了双频路由器的优点，这里在详细说下：\n以前的无线路由器中只有一个频段就是2.4G，双频路由器中多了一个5G频段。两个频段是由802.11 工作组划分，每个频段又划分为若干信道\n2.4 GHz (802.11b/g/n)信道图如下：\n\n![be261390397543.png](http://upload-images.jianshu.io/upload_images/1796052-fb028f78b96bfa77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有人可能会说中国有13个信道可用，可以的啦。其实每个信道的频宽有22MHz，所以这13个信道有很多重叠的区域，不信你看\n\n![880px-2.4_GHz_Wi-Fi_channels_(802.11b,g_WLAN).svg.png](http://upload-images.jianshu.io/upload_images/1796052-e74729391935e100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样一看刨去重叠的的那些，只有1、6和11三个信道可以互不影响。\n下面我们再看看5G:\n![2e2eb9389b504fc21a213501e3dde71190ef6dbc.jpg](http://upload-images.jianshu.io/upload_images/1796052-d39dbb91334a0469.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n发现中国地5G有5个信道可以使用，看起来也没有比2.4G的好到哪里，为什么传输速率会快呢?\n看下图5G信道间距有20MHz相比2.4G的5MHz大很多，如果使用一个信道时，不会受到其他信道的干扰，如果想提升速率，可以把多个信道合并为40MHz或者80MHz。相比之下速度就提升很多了。\n\n![223707rvzdtllllcvkcv7w.png](http://upload-images.jianshu.io/upload_images/1796052-0b2998b024656dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*所以综合得出结论：\n2.4G 信道虽然多，但是互不影响的只有三个，加上使用设备多，干扰大，所以传输速率2.4G低于5G\n但是由于 5G频率高，波长短，所以穿透性2.4G大于5G。\n举个例子理解下穿透性强弱：假如靠近路由器时都是100%信号，但是穿过一堵墙时，2.4G可能还有80%信号，而5G可能仅剩50%信号，就是说两个频段都能穿墙，但是5G穿墙过程自身损失的更严重，所以常说穿透性弱。*\n\n#### 4.\b什么样的路由器才是好路由器？\n\n在我看来好的路由器首要因素就是是否稳定。上面说了穿墙后的信号会减弱。日常路由器放客厅，但是我们又不可能随时守在客厅，可能在卧室、可能在厕所、也可能在院子，远距离加穿墙后，信号可能只有一格了，很多路由器这时候网络是很差的，经常QQ和微信就可能提示网络无法连接，但是现在明明还有一格信号啊。这就是我所说的稳定。一个性能稳定的路由器就算信号只有微弱的一格，仍然能保持网络的流畅，这是我认为的好路由器。就这一点恰恰是很多市面路由都不具备的。\n其他就是参考路由器的性能指标了，如cpu、内存、flash等越大越好，但能耗能也愈大，发热也严重。一般来说家庭百兆宽带最好配上千兆路由，这里的千兆是wlan和lan口也要是千兆的。\n\n### 用网设备那些事\n#### 1.用有线网\n这里只想说一点如果你刚配的主机加上百兆光纤感觉还是网速不达标，那么你可能遇到假网线了。\n其实网线也是分类的，网线分为五类线、超五类线、六类线、七类线，可以通过网线外皮的Cat.5, Cat.5e,Cat.6等来判断,其中cat.6中间有十字的骨架把网线分开\n![70c2802e87d8e3a8224e0e928e0951b7_r.jpg](http://upload-images.jianshu.io/upload_images/1796052-21fa54d3e840c9a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果家里是百兆光纤一般用超五类或者六类，当然六类最好，因为抗干扰更强。\n\n#### 2.无线设备\n暂时没啥想说的了，想起了再更。见谅~","slug":"关于家庭网络宽带、路由及上网设备那些事---后续篇","published":1,"updated":"2017-04-22T10:42:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nv0033449cbdgoc9h0","content":"<p>上一篇主要写了几点制约网速的可能原因，没有看过上一篇的请移步<a href=\"http://www.jianshu.com/p/f1018427d0eb\" target=\"_blank\" rel=\"external\">关于家庭网络宽带、路由及上网设备那些事</a>。这一篇就分别介绍下宽带、路由和用网设备的一些知识。</p>\n<h3 id=\"家庭宽带的那些事\"><a href=\"#家庭宽带的那些事\" class=\"headerlink\" title=\"家庭宽带的那些事\"></a>家庭宽带的那些事</h3><p>网络出了问题都会打客服咨询，但是你知道你家的网络服务商是几级的吗？</p>\n<p>####1.宽带运营商分级</p>\n<p>目前宽带运营商一般分为三级即可，三级··立马就邪恶了。<br>一级服运营商是国家、省市、城域骨干网的建设者。主要有联通、电信、移动和广电，以前小的时候就有种说法叫南电信北联通。</p>\n<p>电信在一级运营商里算是老前辈了。之所以就叫北联通是因为北方以前上网是通过电话线来拨号的，座机的电话那时候归属网通，后来联通收购了网通。移动以前只有无限上网的业务，宽带业务应该是合并了铁通后才有的，广电应该近些年发展起来的，据说广电是租用电信和自建都有的。<br>二级运营商是租用了一级运营商的网络设备来发展的。如果一级运营商是厂家的话，二级运营商就相当于批发商了。主要有歌华宽带、长城宽带等。二级运营商的优势就是性价比较高和比较优质的售后。<br>三级运营商是写字楼和办公楼这类，背靠房地产开发商和物业提供商发展的。比如有些写字楼只提供某一种宽带，网络 差但又不允许公司拉其他服务商的宽带，着实可恨。</p>\n<p>看到这里相信大家对自家的网络提供商有了个大概了解，如果感兴趣请继续：</p>\n<h3 id=\"路由器的那些事\"><a href=\"#路由器的那些事\" class=\"headerlink\" title=\"路由器的那些事\"></a>路由器的那些事</h3><p>先上一张图放松下，你们觉得这张图说明了什么问题？<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6efbb8ea799a2ea4.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"148318216333359786_620_1000.JPEG\"><br>跟风！！中国人跟风习气太严重，一旦发现别人尝到了点甜头，马上就会有一大波人挤破头的往里钻。</p>\n<h4 id=\"1-互联网路由器兴起\"><a href=\"#1-互联网路由器兴起\" class=\"headerlink\" title=\"1.互联网路由器兴起\"></a>1.互联网路由器兴起</h4><p>也是由于跟风，前两年物联网炒的热闹，家中万物互联，有人分析路由器是物联设备走向网络的首个大门，所以就纷纷研发所谓智能路由器。某米、某为、某极和某数字加入战斗，互联网行业经常是老大和老二掐架，老三莫名的死了。这次乱战虽然没有谁阵亡，但是其实用户还是受益的。最起码手机app管理路由器算是普及了不少，查看联网设备和拉黑蹭网设备也方便不少。</p>\n<h4 id=\"2-智能路由器\"><a href=\"#2-智能路由器\" class=\"headerlink\" title=\"2.智能路由器\"></a>2.智能路由器</h4><p>个人觉得现在所谓的智能路由器其实就是互联网路由器后续发展的产物，而且其实在当不起“智能”二字，可能也是如此，所以目前对于智能路由器的定义也就是拥有独立的系统，可以扩展应用插件来实现不同的功能。<br>目前区别路由器是否智能，比较直观的应该是看官方对该型号路由器是否有一个app来支持其手机端操作。</p>\n<h4 id=\"3-双频路由器\"><a href=\"#3-双频路由器\" class=\"headerlink\" title=\"3. 双频路由器\"></a>3. 双频路由器</h4><p>上一篇中简单介绍了双频路由器的优点，这里在详细说下：<br>以前的无线路由器中只有一个频段就是2.4G，双频路由器中多了一个5G频段。两个频段是由802.11 工作组划分，每个频段又划分为若干信道<br>2.4 GHz (802.11b/g/n)信道图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fb028f78b96bfa77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"be261390397543.png\"></p>\n<p>有人可能会说中国有13个信道可用，可以的啦。其实每个信道的频宽有22MHz，所以这13个信道有很多重叠的区域，不信你看</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-e74729391935e100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"880px-2.4_GHz_Wi-Fi_channels_(802.11b,g_WLAN).svg.png\"></p>\n<p>这样一看刨去重叠的的那些，只有1、6和11三个信道可以互不影响。<br>下面我们再看看5G:<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-d39dbb91334a0469.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2e2eb9389b504fc21a213501e3dde71190ef6dbc.jpg\"></p>\n<p>发现中国地5G有5个信道可以使用，看起来也没有比2.4G的好到哪里，为什么传输速率会快呢?<br>看下图5G信道间距有20MHz相比2.4G的5MHz大很多，如果使用一个信道时，不会受到其他信道的干扰，如果想提升速率，可以把多个信道合并为40MHz或者80MHz。相比之下速度就提升很多了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-0b2998b024656dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"223707rvzdtllllcvkcv7w.png\"></p>\n<p><em>所以综合得出结论：<br>2.4G 信道虽然多，但是互不影响的只有三个，加上使用设备多，干扰大，所以传输速率2.4G低于5G<br>但是由于 5G频率高，波长短，所以穿透性2.4G大于5G。<br>举个例子理解下穿透性强弱：假如靠近路由器时都是100%信号，但是穿过一堵墙时，2.4G可能还有80%信号，而5G可能仅剩50%信号，就是说两个频段都能穿墙，但是5G穿墙过程自身损失的更严重，所以常说穿透性弱。</em></p>\n<h4 id=\"4-什么样的路由器才是好路由器？\"><a href=\"#4-什么样的路由器才是好路由器？\" class=\"headerlink\" title=\"4.\b什么样的路由器才是好路由器？\"></a>4.\b什么样的路由器才是好路由器？</h4><p>在我看来好的路由器首要因素就是是否稳定。上面说了穿墙后的信号会减弱。日常路由器放客厅，但是我们又不可能随时守在客厅，可能在卧室、可能在厕所、也可能在院子，远距离加穿墙后，信号可能只有一格了，很多路由器这时候网络是很差的，经常QQ和微信就可能提示网络无法连接，但是现在明明还有一格信号啊。这就是我所说的稳定。一个性能稳定的路由器就算信号只有微弱的一格，仍然能保持网络的流畅，这是我认为的好路由器。就这一点恰恰是很多市面路由都不具备的。<br>其他就是参考路由器的性能指标了，如cpu、内存、flash等越大越好，但能耗能也愈大，发热也严重。一般来说家庭百兆宽带最好配上千兆路由，这里的千兆是wlan和lan口也要是千兆的。</p>\n<h3 id=\"用网设备那些事\"><a href=\"#用网设备那些事\" class=\"headerlink\" title=\"用网设备那些事\"></a>用网设备那些事</h3><h4 id=\"1-用有线网\"><a href=\"#1-用有线网\" class=\"headerlink\" title=\"1.用有线网\"></a>1.用有线网</h4><p>这里只想说一点如果你刚配的主机加上百兆光纤感觉还是网速不达标，那么你可能遇到假网线了。<br>其实网线也是分类的，网线分为五类线、超五类线、六类线、七类线，可以通过网线外皮的Cat.5, Cat.5e,Cat.6等来判断,其中cat.6中间有十字的骨架把网线分开<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-21fa54d3e840c9a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"70c2802e87d8e3a8224e0e928e0951b7_r.jpg\"></p>\n<p>如果家里是百兆光纤一般用超五类或者六类，当然六类最好，因为抗干扰更强。</p>\n<h4 id=\"2-无线设备\"><a href=\"#2-无线设备\" class=\"headerlink\" title=\"2.无线设备\"></a>2.无线设备</h4><p>暂时没啥想说的了，想起了再更。见谅~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇主要写了几点制约网速的可能原因，没有看过上一篇的请移步<a href=\"http://www.jianshu.com/p/f1018427d0eb\">关于家庭网络宽带、路由及上网设备那些事</a>。这一篇就分别介绍下宽带、路由和用网设备的一些知识。</p>\n<h3 id=\"家庭宽带的那些事\"><a href=\"#家庭宽带的那些事\" class=\"headerlink\" title=\"家庭宽带的那些事\"></a>家庭宽带的那些事</h3><p>网络出了问题都会打客服咨询，但是你知道你家的网络服务商是几级的吗？</p>\n<p>####1.宽带运营商分级</p>\n<p>目前宽带运营商一般分为三级即可，三级··立马就邪恶了。<br>一级服运营商是国家、省市、城域骨干网的建设者。主要有联通、电信、移动和广电，以前小的时候就有种说法叫南电信北联通。</p>\n<p>电信在一级运营商里算是老前辈了。之所以就叫北联通是因为北方以前上网是通过电话线来拨号的，座机的电话那时候归属网通，后来联通收购了网通。移动以前只有无限上网的业务，宽带业务应该是合并了铁通后才有的，广电应该近些年发展起来的，据说广电是租用电信和自建都有的。<br>二级运营商是租用了一级运营商的网络设备来发展的。如果一级运营商是厂家的话，二级运营商就相当于批发商了。主要有歌华宽带、长城宽带等。二级运营商的优势就是性价比较高和比较优质的售后。<br>三级运营商是写字楼和办公楼这类，背靠房地产开发商和物业提供商发展的。比如有些写字楼只提供某一种宽带，网络 差但又不允许公司拉其他服务商的宽带，着实可恨。</p>\n<p>看到这里相信大家对自家的网络提供商有了个大概了解，如果感兴趣请继续：</p>\n<h3 id=\"路由器的那些事\"><a href=\"#路由器的那些事\" class=\"headerlink\" title=\"路由器的那些事\"></a>路由器的那些事</h3><p>先上一张图放松下，你们觉得这张图说明了什么问题？<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6efbb8ea799a2ea4.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"148318216333359786_620_1000.JPEG\"><br>跟风！！中国人跟风习气太严重，一旦发现别人尝到了点甜头，马上就会有一大波人挤破头的往里钻。</p>\n<h4 id=\"1-互联网路由器兴起\"><a href=\"#1-互联网路由器兴起\" class=\"headerlink\" title=\"1.互联网路由器兴起\"></a>1.互联网路由器兴起</h4><p>也是由于跟风，前两年物联网炒的热闹，家中万物互联，有人分析路由器是物联设备走向网络的首个大门，所以就纷纷研发所谓智能路由器。某米、某为、某极和某数字加入战斗，互联网行业经常是老大和老二掐架，老三莫名的死了。这次乱战虽然没有谁阵亡，但是其实用户还是受益的。最起码手机app管理路由器算是普及了不少，查看联网设备和拉黑蹭网设备也方便不少。</p>\n<h4 id=\"2-智能路由器\"><a href=\"#2-智能路由器\" class=\"headerlink\" title=\"2.智能路由器\"></a>2.智能路由器</h4><p>个人觉得现在所谓的智能路由器其实就是互联网路由器后续发展的产物，而且其实在当不起“智能”二字，可能也是如此，所以目前对于智能路由器的定义也就是拥有独立的系统，可以扩展应用插件来实现不同的功能。<br>目前区别路由器是否智能，比较直观的应该是看官方对该型号路由器是否有一个app来支持其手机端操作。</p>\n<h4 id=\"3-双频路由器\"><a href=\"#3-双频路由器\" class=\"headerlink\" title=\"3. 双频路由器\"></a>3. 双频路由器</h4><p>上一篇中简单介绍了双频路由器的优点，这里在详细说下：<br>以前的无线路由器中只有一个频段就是2.4G，双频路由器中多了一个5G频段。两个频段是由802.11 工作组划分，每个频段又划分为若干信道<br>2.4 GHz (802.11b/g/n)信道图如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fb028f78b96bfa77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"be261390397543.png\"></p>\n<p>有人可能会说中国有13个信道可用，可以的啦。其实每个信道的频宽有22MHz，所以这13个信道有很多重叠的区域，不信你看</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-e74729391935e100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"880px-2.4_GHz_Wi-Fi_channels_(802.11b,g_WLAN).svg.png\"></p>\n<p>这样一看刨去重叠的的那些，只有1、6和11三个信道可以互不影响。<br>下面我们再看看5G:<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-d39dbb91334a0469.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2e2eb9389b504fc21a213501e3dde71190ef6dbc.jpg\"></p>\n<p>发现中国地5G有5个信道可以使用，看起来也没有比2.4G的好到哪里，为什么传输速率会快呢?<br>看下图5G信道间距有20MHz相比2.4G的5MHz大很多，如果使用一个信道时，不会受到其他信道的干扰，如果想提升速率，可以把多个信道合并为40MHz或者80MHz。相比之下速度就提升很多了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-0b2998b024656dfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"223707rvzdtllllcvkcv7w.png\"></p>\n<p><em>所以综合得出结论：<br>2.4G 信道虽然多，但是互不影响的只有三个，加上使用设备多，干扰大，所以传输速率2.4G低于5G<br>但是由于 5G频率高，波长短，所以穿透性2.4G大于5G。<br>举个例子理解下穿透性强弱：假如靠近路由器时都是100%信号，但是穿过一堵墙时，2.4G可能还有80%信号，而5G可能仅剩50%信号，就是说两个频段都能穿墙，但是5G穿墙过程自身损失的更严重，所以常说穿透性弱。</em></p>\n<h4 id=\"4-什么样的路由器才是好路由器？\"><a href=\"#4-什么样的路由器才是好路由器？\" class=\"headerlink\" title=\"4.\b什么样的路由器才是好路由器？\"></a>4.\b什么样的路由器才是好路由器？</h4><p>在我看来好的路由器首要因素就是是否稳定。上面说了穿墙后的信号会减弱。日常路由器放客厅，但是我们又不可能随时守在客厅，可能在卧室、可能在厕所、也可能在院子，远距离加穿墙后，信号可能只有一格了，很多路由器这时候网络是很差的，经常QQ和微信就可能提示网络无法连接，但是现在明明还有一格信号啊。这就是我所说的稳定。一个性能稳定的路由器就算信号只有微弱的一格，仍然能保持网络的流畅，这是我认为的好路由器。就这一点恰恰是很多市面路由都不具备的。<br>其他就是参考路由器的性能指标了，如cpu、内存、flash等越大越好，但能耗能也愈大，发热也严重。一般来说家庭百兆宽带最好配上千兆路由，这里的千兆是wlan和lan口也要是千兆的。</p>\n<h3 id=\"用网设备那些事\"><a href=\"#用网设备那些事\" class=\"headerlink\" title=\"用网设备那些事\"></a>用网设备那些事</h3><h4 id=\"1-用有线网\"><a href=\"#1-用有线网\" class=\"headerlink\" title=\"1.用有线网\"></a>1.用有线网</h4><p>这里只想说一点如果你刚配的主机加上百兆光纤感觉还是网速不达标，那么你可能遇到假网线了。<br>其实网线也是分类的，网线分为五类线、超五类线、六类线、七类线，可以通过网线外皮的Cat.5, Cat.5e,Cat.6等来判断,其中cat.6中间有十字的骨架把网线分开<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-21fa54d3e840c9a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"70c2802e87d8e3a8224e0e928e0951b7_r.jpg\"></p>\n<p>如果家里是百兆光纤一般用超五类或者六类，当然六类最好，因为抗干扰更强。</p>\n<h4 id=\"2-无线设备\"><a href=\"#2-无线设备\" class=\"headerlink\" title=\"2.无线设备\"></a>2.无线设备</h4><p>暂时没啥想说的了，想起了再更。见谅~</p>\n"},{"title":"hexo网站换电脑后怎么办","date":"2017-05-02T08:31:28.000Z","_content":"\n# 说在前面的话\n\n这两天遇到个问题，在自己的电脑上面搭建的搭建环境发布了几个文章，后来换了个电脑，这个电脑也有环境和几个老的文章，但是我执行了hexo d -g 后，网站中新的文章都被删除了。所以现在的问题是，换电脑后如何保证hexo环境文件的同步。\n\n# 加入版本控制\n\n作为一名开发，实现同步，首先就想到版本控制，而网站又是hexo+github实现的。所以就打算把hexo环境及文章都纳入Git版本控制。\n\n当前项目的master分支中被发布后的静态页面占用，所以要么单独开一个项目，要么新建一个分支，最终采用新建分支办法。\n\n在hexo目录下执行` git init`初始化\n\n然后` git add .`把当前目录及子文件都添加到暂存区\n\n然后 ` git commit -m \"message\"`提交到本地库\n\n最后执行` git push origin branch`推送到分支中。这样以后发布文章后随时push，在其他电脑中把分支内容pull到本地库即可。 ","source":"_posts/hexo博客换电脑后怎么办.md","raw":"---\ntitle: hexo网站换电脑后怎么办\ndate: 2017-05-02 16:31:28\ntags: 网络\ncategories: 网络\n---\n\n# 说在前面的话\n\n这两天遇到个问题，在自己的电脑上面搭建的搭建环境发布了几个文章，后来换了个电脑，这个电脑也有环境和几个老的文章，但是我执行了hexo d -g 后，网站中新的文章都被删除了。所以现在的问题是，换电脑后如何保证hexo环境文件的同步。\n\n# 加入版本控制\n\n作为一名开发，实现同步，首先就想到版本控制，而网站又是hexo+github实现的。所以就打算把hexo环境及文章都纳入Git版本控制。\n\n当前项目的master分支中被发布后的静态页面占用，所以要么单独开一个项目，要么新建一个分支，最终采用新建分支办法。\n\n在hexo目录下执行` git init`初始化\n\n然后` git add .`把当前目录及子文件都添加到暂存区\n\n然后 ` git commit -m \"message\"`提交到本地库\n\n最后执行` git push origin branch`推送到分支中。这样以后发布文章后随时push，在其他电脑中把分支内容pull到本地库即可。 ","slug":"hexo博客换电脑后怎么办","published":1,"updated":"2017-05-02T11:54:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7nz0036449c9wuuicbr","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>这两天遇到个问题，在自己的电脑上面搭建的搭建环境发布了几个文章，后来换了个电脑，这个电脑也有环境和几个老的文章，但是我执行了hexo d -g 后，网站中新的文章都被删除了。所以现在的问题是，换电脑后如何保证hexo环境文件的同步。</p>\n<h1 id=\"加入版本控制\"><a href=\"#加入版本控制\" class=\"headerlink\" title=\"加入版本控制\"></a>加入版本控制</h1><p>作为一名开发，实现同步，首先就想到版本控制，而网站又是hexo+github实现的。所以就打算把hexo环境及文章都纳入Git版本控制。</p>\n<p>当前项目的master分支中被发布后的静态页面占用，所以要么单独开一个项目，要么新建一个分支，最终采用新建分支办法。</p>\n<p>在hexo目录下执行<code>git init</code>初始化</p>\n<p>然后<code>git add .</code>把当前目录及子文件都添加到暂存区</p>\n<p>然后 <code>git commit -m &quot;message&quot;</code>提交到本地库</p>\n<p>最后执行<code>git push origin branch</code>推送到分支中。这样以后发布文章后随时push，在其他电脑中把分支内容pull到本地库即可。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>这两天遇到个问题，在自己的电脑上面搭建的搭建环境发布了几个文章，后来换了个电脑，这个电脑也有环境和几个老的文章，但是我执行了hexo d -g 后，网站中新的文章都被删除了。所以现在的问题是，换电脑后如何保证hexo环境文件的同步。</p>\n<h1 id=\"加入版本控制\"><a href=\"#加入版本控制\" class=\"headerlink\" title=\"加入版本控制\"></a>加入版本控制</h1><p>作为一名开发，实现同步，首先就想到版本控制，而网站又是hexo+github实现的。所以就打算把hexo环境及文章都纳入Git版本控制。</p>\n<p>当前项目的master分支中被发布后的静态页面占用，所以要么单独开一个项目，要么新建一个分支，最终采用新建分支办法。</p>\n<p>在hexo目录下执行<code>git init</code>初始化</p>\n<p>然后<code>git add .</code>把当前目录及子文件都添加到暂存区</p>\n<p>然后 <code>git commit -m &quot;message&quot;</code>提交到本地库</p>\n<p>最后执行<code>git push origin branch</code>推送到分支中。这样以后发布文章后随时push，在其他电脑中把分支内容pull到本地库即可。 </p>\n"},{"title":"如何知道下载好的aosp版本？","date":"2017-04-21T12:55:54.000Z","_content":"下载源码时执行的是\n\n```\nrepo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest\n\n```\n\n没有写上分支然后就直接同步了，下载完了不知道版本是多少。\n在\n\n```\n找到 build/make/core/version_defaults.mk文件打开\n搜索 PLATFORM_SDK_VERSION\n找到了   PLATFORM_SDK_VERSION := 25\nsdk版本知道了晓得原来是最新的7.1\n```","source":"_posts/如何知道下载好的aosp版本.md","raw":"---\ntitle: 如何知道下载好的aosp版本？\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n下载源码时执行的是\n\n```\nrepo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest\n\n```\n\n没有写上分支然后就直接同步了，下载完了不知道版本是多少。\n在\n\n```\n找到 build/make/core/version_defaults.mk文件打开\n搜索 PLATFORM_SDK_VERSION\n找到了   PLATFORM_SDK_VERSION := 25\nsdk版本知道了晓得原来是最新的7.1\n```","slug":"如何知道下载好的aosp版本","published":1,"updated":"2017-04-22T10:00:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7o3003b449carm979x0","content":"<p>下载源码时执行的是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest</div></pre></td></tr></table></figure>\n<p>没有写上分支然后就直接同步了，下载完了不知道版本是多少。<br>在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">找到 build/make/core/version_defaults.mk文件打开</div><div class=\"line\">搜索 PLATFORM_SDK_VERSION</div><div class=\"line\">找到了   PLATFORM_SDK_VERSION := 25</div><div class=\"line\">sdk版本知道了晓得原来是最新的7.1</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>下载源码时执行的是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest</div></pre></td></tr></table></figure>\n<p>没有写上分支然后就直接同步了，下载完了不知道版本是多少。<br>在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">找到 build/make/core/version_defaults.mk文件打开</div><div class=\"line\">搜索 PLATFORM_SDK_VERSION</div><div class=\"line\">找到了   PLATFORM_SDK_VERSION := 25</div><div class=\"line\">sdk版本知道了晓得原来是最新的7.1</div></pre></td></tr></table></figure>"},{"title":"搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼","date":"2017-04-21T12:55:54.000Z","_content":">一直以来对这几个SDK版本概念都有点模糊不清，对于API的使用又会产生什么样的影响。所以今天花点时间来记录下。\n\n\n\n![屏幕快照 2017-04-19 下午12.09.45.png](http://upload-images.jianshu.io/upload_images/1796052-947f3215a5f6169e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### minSDKVersion\n顾名思义是设置sdk最低版本的。作用就是操作系统会拒绝低于\n该标准的APP的安装。\n\n例如，minSDKVersion设置为16(Jelly Bean 4.1系统)，那么该APP将只能运行在4.1系统以上的设备中，想要在2.3系统上安装是不被允许的。\n\nminSDKVersion比较容易理解，经常让我混淆的时其他两个版本设置会对API产生的影响。\n\n#### targetSDKVersion\ntargetSDKVersion就是设置SDK目标版本，目标版本的设置就是为了告诉Android系统：本APP是设计计划给哪个API级别运行的。\n\n一般情况下目标版本设置为当前Android最新版本即可。既然是一般那也就有特殊情况，什么情况下需要修改目标版本呢？\n\n如果新发布的SDK版本会对UI显示甚至操作系统运行机制产生影响，而你的APP又没有做好应对措施，为了保证你的APP正常运行，那你需要降低目标版本。因为你的目标版本仍然是旧的SDK，所以在新版系统中那些新的变化会在你的APP中被忽略，继而保证其正常运行。\n\n例如，Android6.0系统增加了动态权限机制，如果为了追时髦，盲目把你的targetSDKVersion设置为23(6.0)，那么在需要使用权限的地方将会出现异常。为此，在你做好动态权限申请之前，为保障APP正常运行，你需要将目标版本设置低于23。\n\n#### compileSDKVersion\ncompileSDKVersion是设置编译版本。\n\n一般来说编译目标版本是选择最新的SDK，这样可以及时使用体验到新的API提供的新功能。\n\n值得注意的是，如果minSDKVersion和compileSDKVersion版本差距比较大的话，可能会造成API的不兼容。例如，你的最低版本是2.3 ，但是编译版本是5.0，API中使用了4.0SDK提供的一些新API，这样的后果是在2.3系统中运行到该处代码时会发生异常崩溃。这是因为代码的不兼容造成的。如图：\n\n![屏幕快照 2017-04-19 下午1.05.00.png](http://upload-images.jianshu.io/upload_images/1796052-67bfb13669a8dce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如何解决这种API的不兼容呢？\n一种办法是提升minSDKVersion到新API使用的SDK版本，但是这种方法只是回避兼容性，并没有确实解决问题，而且还要放弃低版本部分市场。\n比较好的做法是在使用新API地方做设备版本的检查。Build.VERSION_SDK_INT常量表示当前Android设备的版本号。可以将该常量同新API版本进行比较，如果版本大于等于新版API版本号，则正常使用新API功能，否则使用旧的调用。兼容设置如下：\n\n![屏幕快照 2017-04-19 下午1.16.40.png](http://upload-images.jianshu.io/upload_images/1796052-a2d7e548c4a118cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>注意：compileSDKVersion是和编译器打交道的，而minSDKVersion和targetSDKVersion是和系统打交道的。\n","source":"_posts/搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼.md","raw":"---\ntitle: 搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼\ndate: 2017-04-21 20:55:54\ntags: Android\ncategories: Android\n---\n>一直以来对这几个SDK版本概念都有点模糊不清，对于API的使用又会产生什么样的影响。所以今天花点时间来记录下。\n\n\n\n![屏幕快照 2017-04-19 下午12.09.45.png](http://upload-images.jianshu.io/upload_images/1796052-947f3215a5f6169e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### minSDKVersion\n顾名思义是设置sdk最低版本的。作用就是操作系统会拒绝低于\n该标准的APP的安装。\n\n例如，minSDKVersion设置为16(Jelly Bean 4.1系统)，那么该APP将只能运行在4.1系统以上的设备中，想要在2.3系统上安装是不被允许的。\n\nminSDKVersion比较容易理解，经常让我混淆的时其他两个版本设置会对API产生的影响。\n\n#### targetSDKVersion\ntargetSDKVersion就是设置SDK目标版本，目标版本的设置就是为了告诉Android系统：本APP是设计计划给哪个API级别运行的。\n\n一般情况下目标版本设置为当前Android最新版本即可。既然是一般那也就有特殊情况，什么情况下需要修改目标版本呢？\n\n如果新发布的SDK版本会对UI显示甚至操作系统运行机制产生影响，而你的APP又没有做好应对措施，为了保证你的APP正常运行，那你需要降低目标版本。因为你的目标版本仍然是旧的SDK，所以在新版系统中那些新的变化会在你的APP中被忽略，继而保证其正常运行。\n\n例如，Android6.0系统增加了动态权限机制，如果为了追时髦，盲目把你的targetSDKVersion设置为23(6.0)，那么在需要使用权限的地方将会出现异常。为此，在你做好动态权限申请之前，为保障APP正常运行，你需要将目标版本设置低于23。\n\n#### compileSDKVersion\ncompileSDKVersion是设置编译版本。\n\n一般来说编译目标版本是选择最新的SDK，这样可以及时使用体验到新的API提供的新功能。\n\n值得注意的是，如果minSDKVersion和compileSDKVersion版本差距比较大的话，可能会造成API的不兼容。例如，你的最低版本是2.3 ，但是编译版本是5.0，API中使用了4.0SDK提供的一些新API，这样的后果是在2.3系统中运行到该处代码时会发生异常崩溃。这是因为代码的不兼容造成的。如图：\n\n![屏幕快照 2017-04-19 下午1.05.00.png](http://upload-images.jianshu.io/upload_images/1796052-67bfb13669a8dce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如何解决这种API的不兼容呢？\n一种办法是提升minSDKVersion到新API使用的SDK版本，但是这种方法只是回避兼容性，并没有确实解决问题，而且还要放弃低版本部分市场。\n比较好的做法是在使用新API地方做设备版本的检查。Build.VERSION_SDK_INT常量表示当前Android设备的版本号。可以将该常量同新API版本进行比较，如果版本大于等于新版API版本号，则正常使用新API功能，否则使用旧的调用。兼容设置如下：\n\n![屏幕快照 2017-04-19 下午1.16.40.png](http://upload-images.jianshu.io/upload_images/1796052-a2d7e548c4a118cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>注意：compileSDKVersion是和编译器打交道的，而minSDKVersion和targetSDKVersion是和系统打交道的。\n","slug":"搞清minSDKVersion、targetSDKVersion和compileSDKVersion都是什么鬼","published":1,"updated":"2017-04-22T09:55:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7o5003e449cradyjqsy","content":"<blockquote>\n<p>一直以来对这几个SDK版本概念都有点模糊不清，对于API的使用又会产生什么样的影响。所以今天花点时间来记录下。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-947f3215a5f6169e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午12.09.45.png\"></p>\n<h4 id=\"minSDKVersion\"><a href=\"#minSDKVersion\" class=\"headerlink\" title=\"minSDKVersion\"></a>minSDKVersion</h4><p>顾名思义是设置sdk最低版本的。作用就是操作系统会拒绝低于<br>该标准的APP的安装。</p>\n<p>例如，minSDKVersion设置为16(Jelly Bean 4.1系统)，那么该APP将只能运行在4.1系统以上的设备中，想要在2.3系统上安装是不被允许的。</p>\n<p>minSDKVersion比较容易理解，经常让我混淆的时其他两个版本设置会对API产生的影响。</p>\n<h4 id=\"targetSDKVersion\"><a href=\"#targetSDKVersion\" class=\"headerlink\" title=\"targetSDKVersion\"></a>targetSDKVersion</h4><p>targetSDKVersion就是设置SDK目标版本，目标版本的设置就是为了告诉Android系统：本APP是设计计划给哪个API级别运行的。</p>\n<p>一般情况下目标版本设置为当前Android最新版本即可。既然是一般那也就有特殊情况，什么情况下需要修改目标版本呢？</p>\n<p>如果新发布的SDK版本会对UI显示甚至操作系统运行机制产生影响，而你的APP又没有做好应对措施，为了保证你的APP正常运行，那你需要降低目标版本。因为你的目标版本仍然是旧的SDK，所以在新版系统中那些新的变化会在你的APP中被忽略，继而保证其正常运行。</p>\n<p>例如，Android6.0系统增加了动态权限机制，如果为了追时髦，盲目把你的targetSDKVersion设置为23(6.0)，那么在需要使用权限的地方将会出现异常。为此，在你做好动态权限申请之前，为保障APP正常运行，你需要将目标版本设置低于23。</p>\n<h4 id=\"compileSDKVersion\"><a href=\"#compileSDKVersion\" class=\"headerlink\" title=\"compileSDKVersion\"></a>compileSDKVersion</h4><p>compileSDKVersion是设置编译版本。</p>\n<p>一般来说编译目标版本是选择最新的SDK，这样可以及时使用体验到新的API提供的新功能。</p>\n<p>值得注意的是，如果minSDKVersion和compileSDKVersion版本差距比较大的话，可能会造成API的不兼容。例如，你的最低版本是2.3 ，但是编译版本是5.0，API中使用了4.0SDK提供的一些新API，这样的后果是在2.3系统中运行到该处代码时会发生异常崩溃。这是因为代码的不兼容造成的。如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-67bfb13669a8dce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午1.05.00.png\"></p>\n<p>如何解决这种API的不兼容呢？<br>一种办法是提升minSDKVersion到新API使用的SDK版本，但是这种方法只是回避兼容性，并没有确实解决问题，而且还要放弃低版本部分市场。<br>比较好的做法是在使用新API地方做设备版本的检查。Build.VERSION_SDK_INT常量表示当前Android设备的版本号。可以将该常量同新API版本进行比较，如果版本大于等于新版API版本号，则正常使用新API功能，否则使用旧的调用。兼容设置如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a2d7e548c4a118cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午1.16.40.png\"></p>\n<blockquote>\n<p>注意：compileSDKVersion是和编译器打交道的，而minSDKVersion和targetSDKVersion是和系统打交道的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一直以来对这几个SDK版本概念都有点模糊不清，对于API的使用又会产生什么样的影响。所以今天花点时间来记录下。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-947f3215a5f6169e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午12.09.45.png\"></p>\n<h4 id=\"minSDKVersion\"><a href=\"#minSDKVersion\" class=\"headerlink\" title=\"minSDKVersion\"></a>minSDKVersion</h4><p>顾名思义是设置sdk最低版本的。作用就是操作系统会拒绝低于<br>该标准的APP的安装。</p>\n<p>例如，minSDKVersion设置为16(Jelly Bean 4.1系统)，那么该APP将只能运行在4.1系统以上的设备中，想要在2.3系统上安装是不被允许的。</p>\n<p>minSDKVersion比较容易理解，经常让我混淆的时其他两个版本设置会对API产生的影响。</p>\n<h4 id=\"targetSDKVersion\"><a href=\"#targetSDKVersion\" class=\"headerlink\" title=\"targetSDKVersion\"></a>targetSDKVersion</h4><p>targetSDKVersion就是设置SDK目标版本，目标版本的设置就是为了告诉Android系统：本APP是设计计划给哪个API级别运行的。</p>\n<p>一般情况下目标版本设置为当前Android最新版本即可。既然是一般那也就有特殊情况，什么情况下需要修改目标版本呢？</p>\n<p>如果新发布的SDK版本会对UI显示甚至操作系统运行机制产生影响，而你的APP又没有做好应对措施，为了保证你的APP正常运行，那你需要降低目标版本。因为你的目标版本仍然是旧的SDK，所以在新版系统中那些新的变化会在你的APP中被忽略，继而保证其正常运行。</p>\n<p>例如，Android6.0系统增加了动态权限机制，如果为了追时髦，盲目把你的targetSDKVersion设置为23(6.0)，那么在需要使用权限的地方将会出现异常。为此，在你做好动态权限申请之前，为保障APP正常运行，你需要将目标版本设置低于23。</p>\n<h4 id=\"compileSDKVersion\"><a href=\"#compileSDKVersion\" class=\"headerlink\" title=\"compileSDKVersion\"></a>compileSDKVersion</h4><p>compileSDKVersion是设置编译版本。</p>\n<p>一般来说编译目标版本是选择最新的SDK，这样可以及时使用体验到新的API提供的新功能。</p>\n<p>值得注意的是，如果minSDKVersion和compileSDKVersion版本差距比较大的话，可能会造成API的不兼容。例如，你的最低版本是2.3 ，但是编译版本是5.0，API中使用了4.0SDK提供的一些新API，这样的后果是在2.3系统中运行到该处代码时会发生异常崩溃。这是因为代码的不兼容造成的。如图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-67bfb13669a8dce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午1.05.00.png\"></p>\n<p>如何解决这种API的不兼容呢？<br>一种办法是提升minSDKVersion到新API使用的SDK版本，但是这种方法只是回避兼容性，并没有确实解决问题，而且还要放弃低版本部分市场。<br>比较好的做法是在使用新API地方做设备版本的检查。Build.VERSION_SDK_INT常量表示当前Android设备的版本号。可以将该常量同新API版本进行比较，如果版本大于等于新版API版本号，则正常使用新API功能，否则使用旧的调用。兼容设置如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-a2d7e548c4a118cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"屏幕快照 2017-04-19 下午1.16.40.png\"></p>\n<blockquote>\n<p>注意：compileSDKVersion是和编译器打交道的，而minSDKVersion和targetSDKVersion是和系统打交道的。</p>\n</blockquote>\n"},{"title":"两个栈实现队列功能","date":"2017-05-18T08:28:16.000Z","_content":"\n# 0x00 前言\n\n用2个栈实现队列，首先要明白栈和队列的区别：栈是FILO，队列是FIFO。明白了这两点就比较容易实现了。\n\n\n\n# 0x01 分析 \n\n栈是一端开口，队列是两端开口，如果要让栈实现队列功能，需要2个栈一个负责进数据，一个负责出数据。为了保证出数据的顺序，在出数据栈不为空时，入数据的栈中数据不能往出数据的栈里存。\n\n\n\n# 0x02 实现\n\n在2个栈数据都为空时注意抛出异常。\n\n```\n\nimport java.util.Stack;\n\n/**\n * 两个栈实现队列功能\n * @author jenson\n */\npublic class StackToQueue {\n\tprivate Stack<Integer> inStack = new Stack<>();\n\tprivate Stack<Integer> outStack = new Stack<>();\n\n\t/**\n\t * 添加元素\n\t * @param value\n\t */\n\tpublic void add(int value) {\n\t\tinStack.push(value);\n\t}\n\n\t/**\n\t * 出队列\n\t * @return\n\t */\n\tpublic int poll() {\n\t\tif (inStack.isEmpty() && outStack.isEmpty()) {\n\t\t\tqueueEmptyException();\n\t\t} else {\n\t\t\tif (outStack.isEmpty()) {\n\t\t\t\treverse();\n\t\t\t}\n\t\t}\n\t\treturn outStack.pop();\n\t}\n\n\t/**\n\t * 查看队列头的元素 </br>\n\t * 注意一点：如果出栈队列为空，则把入栈数据倒入到处栈，然后从出栈取<br>\n\t * 如果两个栈都为空抛异常\n\t * \n\t */\n\tpublic int peek() {\n\t\tif (inStack.isEmpty() && outStack.isEmpty()) {\n\t\t\tqueueEmptyException();\n\t\t} else {\n\t\t\tif (outStack.isEmpty()) {\n\t\t\t\treverse();\n\t\t\t}\n\t\t}\n\t\treturn outStack.peek();\n\n\t}\n\n\t/**\n\t * 入栈数据倒入到出栈\n\t */\n\tprivate void reverse() {\n\t\twhile (!inStack.isEmpty()) {\n\t\t\toutStack.push(inStack.pop());\n\t\t}\n\t}\n\n\tprivate void queueEmptyException() {\n\t\tthrow new RuntimeException(\"队列为空\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackToQueue stackToQueue = new StackToQueue();\n\t\tstackToQueue.add(9);\n\t\tstackToQueue.add(5);\n\t\tstackToQueue.add(2);\n\t\tstackToQueue.add(7);\n\n\t\tSystem.out.println(stackToQueue.peek());\n\t\tSystem.out.println(stackToQueue.poll());\n\t}\n}\n\n```\n\n\n\n","source":"_posts/两个栈实现队列功能.md","raw":"---\ntitle: 两个栈实现队列功能\ndate: 2017-05-18 16:28:16\ntags: 算法\ncategories: 算法\n---\n\n# 0x00 前言\n\n用2个栈实现队列，首先要明白栈和队列的区别：栈是FILO，队列是FIFO。明白了这两点就比较容易实现了。\n\n\n\n# 0x01 分析 \n\n栈是一端开口，队列是两端开口，如果要让栈实现队列功能，需要2个栈一个负责进数据，一个负责出数据。为了保证出数据的顺序，在出数据栈不为空时，入数据的栈中数据不能往出数据的栈里存。\n\n\n\n# 0x02 实现\n\n在2个栈数据都为空时注意抛出异常。\n\n```\n\nimport java.util.Stack;\n\n/**\n * 两个栈实现队列功能\n * @author jenson\n */\npublic class StackToQueue {\n\tprivate Stack<Integer> inStack = new Stack<>();\n\tprivate Stack<Integer> outStack = new Stack<>();\n\n\t/**\n\t * 添加元素\n\t * @param value\n\t */\n\tpublic void add(int value) {\n\t\tinStack.push(value);\n\t}\n\n\t/**\n\t * 出队列\n\t * @return\n\t */\n\tpublic int poll() {\n\t\tif (inStack.isEmpty() && outStack.isEmpty()) {\n\t\t\tqueueEmptyException();\n\t\t} else {\n\t\t\tif (outStack.isEmpty()) {\n\t\t\t\treverse();\n\t\t\t}\n\t\t}\n\t\treturn outStack.pop();\n\t}\n\n\t/**\n\t * 查看队列头的元素 </br>\n\t * 注意一点：如果出栈队列为空，则把入栈数据倒入到处栈，然后从出栈取<br>\n\t * 如果两个栈都为空抛异常\n\t * \n\t */\n\tpublic int peek() {\n\t\tif (inStack.isEmpty() && outStack.isEmpty()) {\n\t\t\tqueueEmptyException();\n\t\t} else {\n\t\t\tif (outStack.isEmpty()) {\n\t\t\t\treverse();\n\t\t\t}\n\t\t}\n\t\treturn outStack.peek();\n\n\t}\n\n\t/**\n\t * 入栈数据倒入到出栈\n\t */\n\tprivate void reverse() {\n\t\twhile (!inStack.isEmpty()) {\n\t\t\toutStack.push(inStack.pop());\n\t\t}\n\t}\n\n\tprivate void queueEmptyException() {\n\t\tthrow new RuntimeException(\"队列为空\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackToQueue stackToQueue = new StackToQueue();\n\t\tstackToQueue.add(9);\n\t\tstackToQueue.add(5);\n\t\tstackToQueue.add(2);\n\t\tstackToQueue.add(7);\n\n\t\tSystem.out.println(stackToQueue.peek());\n\t\tSystem.out.println(stackToQueue.poll());\n\t}\n}\n\n```\n\n\n\n","slug":"两个栈实现队列功能","published":1,"updated":"2017-05-18T10:36:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7o8003j449cb6228938","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>用2个栈实现队列，首先要明白栈和队列的区别：栈是FILO，队列是FIFO。明白了这两点就比较容易实现了。</p>\n<h1 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h1><p>栈是一端开口，队列是两端开口，如果要让栈实现队列功能，需要2个栈一个负责进数据，一个负责出数据。为了保证出数据的顺序，在出数据栈不为空时，入数据的栈中数据不能往出数据的栈里存。</p>\n<h1 id=\"0x02-实现\"><a href=\"#0x02-实现\" class=\"headerlink\" title=\"0x02 实现\"></a>0x02 实现</h1><p>在2个栈数据都为空时注意抛出异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 两个栈实现队列功能</div><div class=\"line\"> * @author jenson</div><div class=\"line\"> */</div><div class=\"line\">public class StackToQueue &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; inStack = new Stack&lt;&gt;();</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; outStack = new Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 添加元素</div><div class=\"line\">\t * @param value</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void add(int value) &#123;</div><div class=\"line\">\t\tinStack.push(value);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 出队列</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic int poll() &#123;</div><div class=\"line\">\t\tif (inStack.isEmpty() &amp;&amp; outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tqueueEmptyException();</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\t\treverse();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn outStack.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查看队列头的元素 &lt;/br&gt;</div><div class=\"line\">\t * 注意一点：如果出栈队列为空，则把入栈数据倒入到处栈，然后从出栈取&lt;br&gt;</div><div class=\"line\">\t * 如果两个栈都为空抛异常</div><div class=\"line\">\t * </div><div class=\"line\">\t */</div><div class=\"line\">\tpublic int peek() &#123;</div><div class=\"line\">\t\tif (inStack.isEmpty() &amp;&amp; outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tqueueEmptyException();</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\t\treverse();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn outStack.peek();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 入栈数据倒入到出栈</div><div class=\"line\">\t */</div><div class=\"line\">\tprivate void reverse() &#123;</div><div class=\"line\">\t\twhile (!inStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\toutStack.push(inStack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprivate void queueEmptyException() &#123;</div><div class=\"line\">\t\tthrow new RuntimeException(&quot;队列为空&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackToQueue stackToQueue = new StackToQueue();</div><div class=\"line\">\t\tstackToQueue.add(9);</div><div class=\"line\">\t\tstackToQueue.add(5);</div><div class=\"line\">\t\tstackToQueue.add(2);</div><div class=\"line\">\t\tstackToQueue.add(7);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(stackToQueue.peek());</div><div class=\"line\">\t\tSystem.out.println(stackToQueue.poll());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>用2个栈实现队列，首先要明白栈和队列的区别：栈是FILO，队列是FIFO。明白了这两点就比较容易实现了。</p>\n<h1 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h1><p>栈是一端开口，队列是两端开口，如果要让栈实现队列功能，需要2个栈一个负责进数据，一个负责出数据。为了保证出数据的顺序，在出数据栈不为空时，入数据的栈中数据不能往出数据的栈里存。</p>\n<h1 id=\"0x02-实现\"><a href=\"#0x02-实现\" class=\"headerlink\" title=\"0x02 实现\"></a>0x02 实现</h1><p>在2个栈数据都为空时注意抛出异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 两个栈实现队列功能</div><div class=\"line\"> * @author jenson</div><div class=\"line\"> */</div><div class=\"line\">public class StackToQueue &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; inStack = new Stack&lt;&gt;();</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; outStack = new Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 添加元素</div><div class=\"line\">\t * @param value</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic void add(int value) &#123;</div><div class=\"line\">\t\tinStack.push(value);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 出队列</div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic int poll() &#123;</div><div class=\"line\">\t\tif (inStack.isEmpty() &amp;&amp; outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tqueueEmptyException();</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\t\treverse();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn outStack.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 查看队列头的元素 &lt;/br&gt;</div><div class=\"line\">\t * 注意一点：如果出栈队列为空，则把入栈数据倒入到处栈，然后从出栈取&lt;br&gt;</div><div class=\"line\">\t * 如果两个栈都为空抛异常</div><div class=\"line\">\t * </div><div class=\"line\">\t */</div><div class=\"line\">\tpublic int peek() &#123;</div><div class=\"line\">\t\tif (inStack.isEmpty() &amp;&amp; outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tqueueEmptyException();</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tif (outStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\t\treverse();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn outStack.peek();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 入栈数据倒入到出栈</div><div class=\"line\">\t */</div><div class=\"line\">\tprivate void reverse() &#123;</div><div class=\"line\">\t\twhile (!inStack.isEmpty()) &#123;</div><div class=\"line\">\t\t\toutStack.push(inStack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprivate void queueEmptyException() &#123;</div><div class=\"line\">\t\tthrow new RuntimeException(&quot;队列为空&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackToQueue stackToQueue = new StackToQueue();</div><div class=\"line\">\t\tstackToQueue.add(9);</div><div class=\"line\">\t\tstackToQueue.add(5);</div><div class=\"line\">\t\tstackToQueue.add(2);</div><div class=\"line\">\t\tstackToQueue.add(7);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(stackToQueue.peek());</div><div class=\"line\">\t\tSystem.out.println(stackToQueue.poll());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"四个人过桥问题","date":"2017-05-11T07:55:37.000Z","_content":"\n有甲乙丙丁4个人要过桥，他们都在桥一端，他们只有17分钟时间过桥。时间在晚上，过桥需要用到手电筒，而且手电筒必须来回都用到且手电筒不能扔来扔去，一次只能有2个人同时过桥。每个人走路速度不同，甲过桥需要1分钟，乙过桥需要2分钟，丙过桥需要5分钟，丁过桥需要10分钟。两个人一起走路，速度决定于走的慢的那个。请你给这四人规划合适的搭配过桥。\n\n\n\n\n\n看到这道题脑子第一想法是：5和10分钟不能分开，如果分开，这俩人就占了15分钟。然而刚让这俩一起过桥，然后就让5分钟的哥们拿着手电筒回来了~~~一脸懵逼试了好几种都没有通过。后来发现我又被自己看问题角度给局限住了，每2个人过桥后，就一直一门心思的让刚过来的2个人中的一个人送手电筒返回，其实送手电筒的这个人只要在同一岸边的就行。说到这里，答案以及开始浮出水面了：\n\n\n\n| 步骤              | A    | B    |\n| --------------- | ---- | ---- |\n| ①甲和乙一起过河，花费2分钟  | 丙丁   | 甲乙   |\n| ②甲带手电筒返回，花费1分钟  | 甲丙丁  | 乙    |\n| ③丙和丁一起过河，花费10分钟 | 甲    | 乙丙丁  |\n| ④乙带手电筒返回，花费2分钟  | 甲乙   | 丙丁   |\n| ⑤甲和乙一起过河，花费2分钟  |      | 甲乙丙丁 |\n\n\n\n上面5个步骤刚好四人全部过桥，花费时间17分钟，当然②中也可以由乙带手电筒返回，不过④要由甲带手电筒。这样也是17分钟，其他时间应该是大于17分钟的。\n\n> 其实这道题和农夫过河一样，都不难，只要看问题时，眼界要能钻进问题角落深入分析，又能抽出眼界，站在一定高度俯视问题全局。\n\n\n\n网上据说这道题在西雅图一个有名软件公司的考官面试时也出过这道题，怎么样你答对了吗？","source":"_posts/四个人过桥问题.md","raw":"---\ntitle: 四个人过桥问题\ndate: 2017-05-11 15:55:37\ntags: 趣题\ncategories: 趣题\n---\n\n有甲乙丙丁4个人要过桥，他们都在桥一端，他们只有17分钟时间过桥。时间在晚上，过桥需要用到手电筒，而且手电筒必须来回都用到且手电筒不能扔来扔去，一次只能有2个人同时过桥。每个人走路速度不同，甲过桥需要1分钟，乙过桥需要2分钟，丙过桥需要5分钟，丁过桥需要10分钟。两个人一起走路，速度决定于走的慢的那个。请你给这四人规划合适的搭配过桥。\n\n\n\n\n\n看到这道题脑子第一想法是：5和10分钟不能分开，如果分开，这俩人就占了15分钟。然而刚让这俩一起过桥，然后就让5分钟的哥们拿着手电筒回来了~~~一脸懵逼试了好几种都没有通过。后来发现我又被自己看问题角度给局限住了，每2个人过桥后，就一直一门心思的让刚过来的2个人中的一个人送手电筒返回，其实送手电筒的这个人只要在同一岸边的就行。说到这里，答案以及开始浮出水面了：\n\n\n\n| 步骤              | A    | B    |\n| --------------- | ---- | ---- |\n| ①甲和乙一起过河，花费2分钟  | 丙丁   | 甲乙   |\n| ②甲带手电筒返回，花费1分钟  | 甲丙丁  | 乙    |\n| ③丙和丁一起过河，花费10分钟 | 甲    | 乙丙丁  |\n| ④乙带手电筒返回，花费2分钟  | 甲乙   | 丙丁   |\n| ⑤甲和乙一起过河，花费2分钟  |      | 甲乙丙丁 |\n\n\n\n上面5个步骤刚好四人全部过桥，花费时间17分钟，当然②中也可以由乙带手电筒返回，不过④要由甲带手电筒。这样也是17分钟，其他时间应该是大于17分钟的。\n\n> 其实这道题和农夫过河一样，都不难，只要看问题时，眼界要能钻进问题角落深入分析，又能抽出眼界，站在一定高度俯视问题全局。\n\n\n\n网上据说这道题在西雅图一个有名软件公司的考官面试时也出过这道题，怎么样你答对了吗？","slug":"四个人过桥问题","published":1,"updated":"2017-05-11T11:50:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7of003m449cawtemhfo","content":"<p>有甲乙丙丁4个人要过桥，他们都在桥一端，他们只有17分钟时间过桥。时间在晚上，过桥需要用到手电筒，而且手电筒必须来回都用到且手电筒不能扔来扔去，一次只能有2个人同时过桥。每个人走路速度不同，甲过桥需要1分钟，乙过桥需要2分钟，丙过桥需要5分钟，丁过桥需要10分钟。两个人一起走路，速度决定于走的慢的那个。请你给这四人规划合适的搭配过桥。</p>\n<p>看到这道题脑子第一想法是：5和10分钟不能分开，如果分开，这俩人就占了15分钟。然而刚让这俩一起过桥，然后就让5分钟的哥们拿着手电筒回来了~~~一脸懵逼试了好几种都没有通过。后来发现我又被自己看问题角度给局限住了，每2个人过桥后，就一直一门心思的让刚过来的2个人中的一个人送手电筒返回，其实送手电筒的这个人只要在同一岸边的就行。说到这里，答案以及开始浮出水面了：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>①甲和乙一起过河，花费2分钟</td>\n<td>丙丁</td>\n<td>甲乙</td>\n</tr>\n<tr>\n<td>②甲带手电筒返回，花费1分钟</td>\n<td>甲丙丁</td>\n<td>乙</td>\n</tr>\n<tr>\n<td>③丙和丁一起过河，花费10分钟</td>\n<td>甲</td>\n<td>乙丙丁</td>\n</tr>\n<tr>\n<td>④乙带手电筒返回，花费2分钟</td>\n<td>甲乙</td>\n<td>丙丁</td>\n</tr>\n<tr>\n<td>⑤甲和乙一起过河，花费2分钟</td>\n<td></td>\n<td>甲乙丙丁</td>\n</tr>\n</tbody>\n</table>\n<p>上面5个步骤刚好四人全部过桥，花费时间17分钟，当然②中也可以由乙带手电筒返回，不过④要由甲带手电筒。这样也是17分钟，其他时间应该是大于17分钟的。</p>\n<blockquote>\n<p>其实这道题和农夫过河一样，都不难，只要看问题时，眼界要能钻进问题角落深入分析，又能抽出眼界，站在一定高度俯视问题全局。</p>\n</blockquote>\n<p>网上据说这道题在西雅图一个有名软件公司的考官面试时也出过这道题，怎么样你答对了吗？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有甲乙丙丁4个人要过桥，他们都在桥一端，他们只有17分钟时间过桥。时间在晚上，过桥需要用到手电筒，而且手电筒必须来回都用到且手电筒不能扔来扔去，一次只能有2个人同时过桥。每个人走路速度不同，甲过桥需要1分钟，乙过桥需要2分钟，丙过桥需要5分钟，丁过桥需要10分钟。两个人一起走路，速度决定于走的慢的那个。请你给这四人规划合适的搭配过桥。</p>\n<p>看到这道题脑子第一想法是：5和10分钟不能分开，如果分开，这俩人就占了15分钟。然而刚让这俩一起过桥，然后就让5分钟的哥们拿着手电筒回来了~~~一脸懵逼试了好几种都没有通过。后来发现我又被自己看问题角度给局限住了，每2个人过桥后，就一直一门心思的让刚过来的2个人中的一个人送手电筒返回，其实送手电筒的这个人只要在同一岸边的就行。说到这里，答案以及开始浮出水面了：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>①甲和乙一起过河，花费2分钟</td>\n<td>丙丁</td>\n<td>甲乙</td>\n</tr>\n<tr>\n<td>②甲带手电筒返回，花费1分钟</td>\n<td>甲丙丁</td>\n<td>乙</td>\n</tr>\n<tr>\n<td>③丙和丁一起过河，花费10分钟</td>\n<td>甲</td>\n<td>乙丙丁</td>\n</tr>\n<tr>\n<td>④乙带手电筒返回，花费2分钟</td>\n<td>甲乙</td>\n<td>丙丁</td>\n</tr>\n<tr>\n<td>⑤甲和乙一起过河，花费2分钟</td>\n<td></td>\n<td>甲乙丙丁</td>\n</tr>\n</tbody>\n</table>\n<p>上面5个步骤刚好四人全部过桥，花费时间17分钟，当然②中也可以由乙带手电筒返回，不过④要由甲带手电筒。这样也是17分钟，其他时间应该是大于17分钟的。</p>\n<blockquote>\n<p>其实这道题和农夫过河一样，都不难，只要看问题时，眼界要能钻进问题角落深入分析，又能抽出眼界，站在一定高度俯视问题全局。</p>\n</blockquote>\n<p>网上据说这道题在西雅图一个有名软件公司的考官面试时也出过这道题，怎么样你答对了吗？</p>\n"},{"title":"农夫带着狼、羊和白菜过河问题","date":"2017-05-10T09:55:25.000Z","_content":"\n一个农夫带着一只狼，一只羊和一棵白菜来到河边要过河，船只狭小，一次农夫只能带一样物品过河，如果农夫不在场，狼会吃羊，羊也会吃白菜。那么农夫如何才能过河或者证明出无解。\n\n\n\n这是一道自古有之的谜题，但是一些公司也有把这作为笔试题...\n\n看到这个题我的第一个想法就是船上系一根绳，把狼和白菜一起放船上，待漂到对岸后再用绳子拉过来，然后农夫抱着羊过河。不过这太投机取巧了啊哈哈。还是来点务实的吧：\n\n\n\n务实的想法就是要农夫一直和船一起。毕竟不能指望顺风船自动漂对岸然后狼羊白菜自动下船吧。\n\n食物链是这样的：狼>羊>白菜\n\n农夫只要离开，食物链就会发生吞食，所以要让食物链隔开。\n\n那么第一步做法就明白了：必须带羊过河~~\n\n我们假设A为现在所在岸边，B为目的岸边\n\n\n\n| 步骤        | A    | B      |\n| --------- | ---- | ------ |\n| ①农夫带着羊过河  | 狼和白菜 | 羊      |\n| ②农夫独自返回A  |      |        |\n| ③农夫带着白菜过河 | 狼    | 羊和白菜   |\n| ④农夫带着羊返回  | 羊和狼  | 白菜     |\n| ⑤农夫带着狼过河  | 羊    | 白菜和狼   |\n| ⑥农夫独自返回A  |      |        |\n| ⑦农夫带着羊过河  |      | 白菜、狼和羊 |\n\n\n\n其实这个解法不是唯一的。\n\n虽然第一步都是要带着羊过河，但是第三步带着白菜和带狼都是可以的。\n\n| 步骤        | A    | B      |\n| --------- | ---- | ------ |\n| ③农夫带着狼过河  | 白菜   | 羊和狼    |\n| ④农夫带着羊返回A | 白菜和羊 | 狼      |\n| ⑤农夫带着白菜过河 | 羊    | 狼和白菜   |\n| ⑥农夫独自返回A  |      |        |\n| ⑦农夫带着羊过河  |      | 狼、白菜和羊 |\n|           |      |        |\n\n\n\n","source":"_posts/农夫带着狼、羊和白菜过河问题.md","raw":"---\ntitle: 农夫带着狼、羊和白菜过河问题\ndate: 2017-05-10 17:55:25\ntags: 趣题\ncategories: 趣题\n---\n\n一个农夫带着一只狼，一只羊和一棵白菜来到河边要过河，船只狭小，一次农夫只能带一样物品过河，如果农夫不在场，狼会吃羊，羊也会吃白菜。那么农夫如何才能过河或者证明出无解。\n\n\n\n这是一道自古有之的谜题，但是一些公司也有把这作为笔试题...\n\n看到这个题我的第一个想法就是船上系一根绳，把狼和白菜一起放船上，待漂到对岸后再用绳子拉过来，然后农夫抱着羊过河。不过这太投机取巧了啊哈哈。还是来点务实的吧：\n\n\n\n务实的想法就是要农夫一直和船一起。毕竟不能指望顺风船自动漂对岸然后狼羊白菜自动下船吧。\n\n食物链是这样的：狼>羊>白菜\n\n农夫只要离开，食物链就会发生吞食，所以要让食物链隔开。\n\n那么第一步做法就明白了：必须带羊过河~~\n\n我们假设A为现在所在岸边，B为目的岸边\n\n\n\n| 步骤        | A    | B      |\n| --------- | ---- | ------ |\n| ①农夫带着羊过河  | 狼和白菜 | 羊      |\n| ②农夫独自返回A  |      |        |\n| ③农夫带着白菜过河 | 狼    | 羊和白菜   |\n| ④农夫带着羊返回  | 羊和狼  | 白菜     |\n| ⑤农夫带着狼过河  | 羊    | 白菜和狼   |\n| ⑥农夫独自返回A  |      |        |\n| ⑦农夫带着羊过河  |      | 白菜、狼和羊 |\n\n\n\n其实这个解法不是唯一的。\n\n虽然第一步都是要带着羊过河，但是第三步带着白菜和带狼都是可以的。\n\n| 步骤        | A    | B      |\n| --------- | ---- | ------ |\n| ③农夫带着狼过河  | 白菜   | 羊和狼    |\n| ④农夫带着羊返回A | 白菜和羊 | 狼      |\n| ⑤农夫带着白菜过河 | 羊    | 狼和白菜   |\n| ⑥农夫独自返回A  |      |        |\n| ⑦农夫带着羊过河  |      | 狼、白菜和羊 |\n|           |      |        |\n\n\n\n","slug":"农夫带着狼、羊和白菜过河问题","published":1,"updated":"2017-05-10T16:19:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7op003r449cqx2ob9dd","content":"<p>一个农夫带着一只狼，一只羊和一棵白菜来到河边要过河，船只狭小，一次农夫只能带一样物品过河，如果农夫不在场，狼会吃羊，羊也会吃白菜。那么农夫如何才能过河或者证明出无解。</p>\n<p>这是一道自古有之的谜题，但是一些公司也有把这作为笔试题…</p>\n<p>看到这个题我的第一个想法就是船上系一根绳，把狼和白菜一起放船上，待漂到对岸后再用绳子拉过来，然后农夫抱着羊过河。不过这太投机取巧了啊哈哈。还是来点务实的吧：</p>\n<p>务实的想法就是要农夫一直和船一起。毕竟不能指望顺风船自动漂对岸然后狼羊白菜自动下船吧。</p>\n<p>食物链是这样的：狼&gt;羊&gt;白菜</p>\n<p>农夫只要离开，食物链就会发生吞食，所以要让食物链隔开。</p>\n<p>那么第一步做法就明白了：必须带羊过河~~</p>\n<p>我们假设A为现在所在岸边，B为目的岸边</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>①农夫带着羊过河</td>\n<td>狼和白菜</td>\n<td>羊</td>\n</tr>\n<tr>\n<td>②农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>③农夫带着白菜过河</td>\n<td>狼</td>\n<td>羊和白菜</td>\n</tr>\n<tr>\n<td>④农夫带着羊返回</td>\n<td>羊和狼</td>\n<td>白菜</td>\n</tr>\n<tr>\n<td>⑤农夫带着狼过河</td>\n<td>羊</td>\n<td>白菜和狼</td>\n</tr>\n<tr>\n<td>⑥农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>⑦农夫带着羊过河</td>\n<td></td>\n<td>白菜、狼和羊</td>\n</tr>\n</tbody>\n</table>\n<p>其实这个解法不是唯一的。</p>\n<p>虽然第一步都是要带着羊过河，但是第三步带着白菜和带狼都是可以的。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>③农夫带着狼过河</td>\n<td>白菜</td>\n<td>羊和狼</td>\n</tr>\n<tr>\n<td>④农夫带着羊返回A</td>\n<td>白菜和羊</td>\n<td>狼</td>\n</tr>\n<tr>\n<td>⑤农夫带着白菜过河</td>\n<td>羊</td>\n<td>狼和白菜</td>\n</tr>\n<tr>\n<td>⑥农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>⑦农夫带着羊过河</td>\n<td></td>\n<td>狼、白菜和羊</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>一个农夫带着一只狼，一只羊和一棵白菜来到河边要过河，船只狭小，一次农夫只能带一样物品过河，如果农夫不在场，狼会吃羊，羊也会吃白菜。那么农夫如何才能过河或者证明出无解。</p>\n<p>这是一道自古有之的谜题，但是一些公司也有把这作为笔试题…</p>\n<p>看到这个题我的第一个想法就是船上系一根绳，把狼和白菜一起放船上，待漂到对岸后再用绳子拉过来，然后农夫抱着羊过河。不过这太投机取巧了啊哈哈。还是来点务实的吧：</p>\n<p>务实的想法就是要农夫一直和船一起。毕竟不能指望顺风船自动漂对岸然后狼羊白菜自动下船吧。</p>\n<p>食物链是这样的：狼&gt;羊&gt;白菜</p>\n<p>农夫只要离开，食物链就会发生吞食，所以要让食物链隔开。</p>\n<p>那么第一步做法就明白了：必须带羊过河~~</p>\n<p>我们假设A为现在所在岸边，B为目的岸边</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>①农夫带着羊过河</td>\n<td>狼和白菜</td>\n<td>羊</td>\n</tr>\n<tr>\n<td>②农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>③农夫带着白菜过河</td>\n<td>狼</td>\n<td>羊和白菜</td>\n</tr>\n<tr>\n<td>④农夫带着羊返回</td>\n<td>羊和狼</td>\n<td>白菜</td>\n</tr>\n<tr>\n<td>⑤农夫带着狼过河</td>\n<td>羊</td>\n<td>白菜和狼</td>\n</tr>\n<tr>\n<td>⑥农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>⑦农夫带着羊过河</td>\n<td></td>\n<td>白菜、狼和羊</td>\n</tr>\n</tbody>\n</table>\n<p>其实这个解法不是唯一的。</p>\n<p>虽然第一步都是要带着羊过河，但是第三步带着白菜和带狼都是可以的。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>A</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>③农夫带着狼过河</td>\n<td>白菜</td>\n<td>羊和狼</td>\n</tr>\n<tr>\n<td>④农夫带着羊返回A</td>\n<td>白菜和羊</td>\n<td>狼</td>\n</tr>\n<tr>\n<td>⑤农夫带着白菜过河</td>\n<td>羊</td>\n<td>狼和白菜</td>\n</tr>\n<tr>\n<td>⑥农夫独自返回A</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>⑦农夫带着羊过河</td>\n<td></td>\n<td>狼、白菜和羊</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"番茄工作法使用说明书","date":"2017-04-21T12:55:54.000Z","_content":"今天花了点时间把番茄工作法这本书看完了，和以前上学时45分钟每节课的感觉差不多，只是这个时间更短，流程也更细化，容易让人集中注意力。\n\n先来几个问题看看中刀的人有多少：\n1.有拖延症，上午的工作要拖到下午，下午的工作要拖到明天或者有反正周六要加班，那就周五多玩玩，刷刷微博这样的思想。\n2.经常我们想看一本书，看了一点后就厌烦抛诸脑后，等过一段时间兴致又来了想继续读，发现前面的内容已经忘了不得已要从头开始，如此往复，一年到头一本书还在原地徘徊，年终总结时才悔恨不已。\n3.上班就开始干活，但是手头的事情刚干了一点，又一摊新的工作挤进来，然后倒手又去忙新的事情，经常下班了感觉忙了一天却没有一件拿得出手的已完成的活来交差。\n如果你有上面的一种或者几种那么番茄工作法适合你。\n## 番茄工作法的历史\n番茄工作法是由弗朗西斯科·西里洛在1992年创建的，但其实在更早的时候西里洛就已经使用了。20世纪80年代西里洛还在大学时，由于学习效率低下作业完不成，就在想怎么让自己踏实的学一会，哪怕十分钟也行。如果有人监督帮忙掐表，会不会很好，后来西里洛找到了厨房定时器，形状酷似番茄，就这样他邂逅了番茄钟。\n\n![未命名.png](http://upload-images.jianshu.io/upload_images/1796052-be51678192608453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 什么是番茄工作法？\n简单的说就是列出要做的事，标记当天要完成的，设置闹钟为25分钟，然后从第一件事情开始做。还要有每日回顾、每日承诺、中断和预估等。\n\n```\n番茄工作法是一套简单的流程，它可以让我们提高时间观念、提升注意力、加强自我决策意识、改善目前不好的工作流程从而提高工作效率，当然这一切好处的前提是正确并长期的执行了番茄法。\n```\n\n## 番茄工作法需要哪些工具？\n一个番茄钟\n铅笔/橡皮\n三张表格(活动清单、今日待办、记录)\n\n![fullsizerender.jpg](http://upload-images.jianshu.io/upload_images/1796052-3a5435880d169f91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 番茄工作法流程详解\n### 将近期要完成的活动/任务加入到活动清单\n把近几天准备工作的内容填写到活动清单中，活动清单内容力求简洁，不要求别人看懂，只需要自己几个月后仍能看懂即可。\n如果某件事明确了必须在某时间之前完成，则可以在活动末尾加上最后期限作为提醒。\n\n\n![fullsizerender(1).jpg](http://upload-images.jianshu.io/upload_images/1796052-bcb5ae9b4fa83b5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 从活动清单中选择今日要完成的几项抄入到今日待办中\n今日待办的任务一定是要从活动清单抄入过来的，如果是自己又单独创建的那活动清单有何意义？填写今日待办时要注意划分优先级(事情的重要程度)，然后给每个待办预估需要多少番茄钟来完成，在待办后面用方格表示出来。\n\n\n![fullsizerender(4).jpg](http://upload-images.jianshu.io/upload_images/1796052-6386cf28a2aa20ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\n从开始的活动清单列举，到今日待办的筛选，有没有觉得原本杂乱无章的事情，现在有了头绪而且当天\b目标已经明确只需要放手去做了。无形中注意力已经转移到所选活动了。\n```\n### 准备好工作后，启动番茄钟时间设定为25分钟。\n注意每个番茄钟都是原子性的，即不能再分割，一旦番茄钟启动，25分钟必须从一而终。\n可能有人会有疑问：如果番茄钟期间渴了怎么办？有人打电话或者有同事来询问怎么办？别急，这些都是中断，参见步骤4。\n### 开始工作，直到番茄钟响铃结束\n工作期间可能会受到中断，在日常工作中，中断是不可完全避免的，需要自己处理好中断。\n中断有两种形式：内部中断和外部中断。\n```内部中断 是自己造成的，是直觉向大脑发出信号，告诉我让我去专注当下活动以外的事情。```\n\n比如工作了一会，突然想打开qq去群里扯皮几句，想起有个电话没有回复，水杯没水了要去续杯等，这些都是来自自身内部的本能，其实是想拖延，这时该怎么办？接受、记录然后继续番茄钟。\n首先看引起中断原因，如果是突然想起没有做的事情，那么可以在今日待办(如果想起的事情不紧急可以直接加入到活动清单中，并在左边加一个“U”表示计划外事件“unplanned”)下方添加一个“计划外紧急”栏目，记录中断原因(下图中的③)，并在今日待办的当前活动后面添加一个 撇号 ' (下图中的①)，表示当下活动产生一个内部中断，记录完成继续番茄钟。\n 至于说要聊天扯皮和续杯，等到番茄钟结束后再去，当然如果只是喝水那你想喝多少喝多少。\n如果作为初学者感觉内部中断太多，可以尝试缩小番茄钟为5、10、15分钟。当然番茄钟的每次更改至少要保持两个星期再次更改。\n```外部中断 是别人造成的，有人向你询问请你帮忙，等你答复，外部中断往往具有互动性。但是我们不能因为保护番茄钟就拒绝帮忙同事，毕竟低头不见抬头见的。```\n可以在番茄钟期间手机、邮件静音，\n同事来面谈，如果比较急可以商量稍后推迟下，用下一个番茄钟来解决中断事件，而不是在当前活动直接中断处理；如果不着急可以添加到计划外事件，同时在当前活动后添加一个减号 -(下图中的②)，表示受到一次外部中断；如果非常着急，那么不得已只有废弃当前的番茄钟，先帮同事解决问题，过后休息一会然后开启新的番茄钟开始专注起来。\n\n每个番茄钟结束都要在今日待办的当下活动方格中画×。如果当下活动已经完成则可以给活动内容划一条横线表示完成状态(下图中的③)。\n\n![fullsizerender(5).jpg](http://upload-images.jianshu.io/upload_images/1796052-4ab23cde90bb31c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 休息\n小休时间一般为3-5分钟，每隔4个番茄钟就大休一次，大休一般15-30分钟。注意休息期间要站起来走动一下，让自己能消除对上一个番茄钟的思考，完全抽身出来放松下。可以泡杯茶或咖啡，去个厕所，窗台发呆等，总之拒绝任何用脑的活动。\n以下说明了休息时箭头所指从最佳到最差休息方式：\n![fullsizerender(3).jpg](http://upload-images.jianshu.io/upload_images/1796052-32cc2cfdbfaad96f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 开始下一个番茄钟，重复3-5步\n\n### 下班前记录\n记录什么内容？记录当天完成的番茄钟数、被打断数、今日待办完成数等，通过记录可以知晓自己承诺完成了多少，相差多少，如果差距很大，就要寻找原因。经过一段时间的记录，数据可视化，看自己的承诺和已完成是否越来越接近。通过记录发现总结不足，在以后的清单中持续改善。\n\n以上只介绍了番茄工作法流程和一些需要注意的点，其他一些边缘内容或者没有get到的点欢迎探讨。","source":"_posts/番茄工作法使用说明书.md","raw":"---\ntitle: 番茄工作法使用说明书\ndate: 2017-04-21 20:55:54\ntags: 职场杂谈\ncategories: 职场杂谈\n---\n今天花了点时间把番茄工作法这本书看完了，和以前上学时45分钟每节课的感觉差不多，只是这个时间更短，流程也更细化，容易让人集中注意力。\n\n先来几个问题看看中刀的人有多少：\n1.有拖延症，上午的工作要拖到下午，下午的工作要拖到明天或者有反正周六要加班，那就周五多玩玩，刷刷微博这样的思想。\n2.经常我们想看一本书，看了一点后就厌烦抛诸脑后，等过一段时间兴致又来了想继续读，发现前面的内容已经忘了不得已要从头开始，如此往复，一年到头一本书还在原地徘徊，年终总结时才悔恨不已。\n3.上班就开始干活，但是手头的事情刚干了一点，又一摊新的工作挤进来，然后倒手又去忙新的事情，经常下班了感觉忙了一天却没有一件拿得出手的已完成的活来交差。\n如果你有上面的一种或者几种那么番茄工作法适合你。\n## 番茄工作法的历史\n番茄工作法是由弗朗西斯科·西里洛在1992年创建的，但其实在更早的时候西里洛就已经使用了。20世纪80年代西里洛还在大学时，由于学习效率低下作业完不成，就在想怎么让自己踏实的学一会，哪怕十分钟也行。如果有人监督帮忙掐表，会不会很好，后来西里洛找到了厨房定时器，形状酷似番茄，就这样他邂逅了番茄钟。\n\n![未命名.png](http://upload-images.jianshu.io/upload_images/1796052-be51678192608453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 什么是番茄工作法？\n简单的说就是列出要做的事，标记当天要完成的，设置闹钟为25分钟，然后从第一件事情开始做。还要有每日回顾、每日承诺、中断和预估等。\n\n```\n番茄工作法是一套简单的流程，它可以让我们提高时间观念、提升注意力、加强自我决策意识、改善目前不好的工作流程从而提高工作效率，当然这一切好处的前提是正确并长期的执行了番茄法。\n```\n\n## 番茄工作法需要哪些工具？\n一个番茄钟\n铅笔/橡皮\n三张表格(活动清单、今日待办、记录)\n\n![fullsizerender.jpg](http://upload-images.jianshu.io/upload_images/1796052-3a5435880d169f91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 番茄工作法流程详解\n### 将近期要完成的活动/任务加入到活动清单\n把近几天准备工作的内容填写到活动清单中，活动清单内容力求简洁，不要求别人看懂，只需要自己几个月后仍能看懂即可。\n如果某件事明确了必须在某时间之前完成，则可以在活动末尾加上最后期限作为提醒。\n\n\n![fullsizerender(1).jpg](http://upload-images.jianshu.io/upload_images/1796052-bcb5ae9b4fa83b5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 从活动清单中选择今日要完成的几项抄入到今日待办中\n今日待办的任务一定是要从活动清单抄入过来的，如果是自己又单独创建的那活动清单有何意义？填写今日待办时要注意划分优先级(事情的重要程度)，然后给每个待办预估需要多少番茄钟来完成，在待办后面用方格表示出来。\n\n\n![fullsizerender(4).jpg](http://upload-images.jianshu.io/upload_images/1796052-6386cf28a2aa20ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\n从开始的活动清单列举，到今日待办的筛选，有没有觉得原本杂乱无章的事情，现在有了头绪而且当天\b目标已经明确只需要放手去做了。无形中注意力已经转移到所选活动了。\n```\n### 准备好工作后，启动番茄钟时间设定为25分钟。\n注意每个番茄钟都是原子性的，即不能再分割，一旦番茄钟启动，25分钟必须从一而终。\n可能有人会有疑问：如果番茄钟期间渴了怎么办？有人打电话或者有同事来询问怎么办？别急，这些都是中断，参见步骤4。\n### 开始工作，直到番茄钟响铃结束\n工作期间可能会受到中断，在日常工作中，中断是不可完全避免的，需要自己处理好中断。\n中断有两种形式：内部中断和外部中断。\n```内部中断 是自己造成的，是直觉向大脑发出信号，告诉我让我去专注当下活动以外的事情。```\n\n比如工作了一会，突然想打开qq去群里扯皮几句，想起有个电话没有回复，水杯没水了要去续杯等，这些都是来自自身内部的本能，其实是想拖延，这时该怎么办？接受、记录然后继续番茄钟。\n首先看引起中断原因，如果是突然想起没有做的事情，那么可以在今日待办(如果想起的事情不紧急可以直接加入到活动清单中，并在左边加一个“U”表示计划外事件“unplanned”)下方添加一个“计划外紧急”栏目，记录中断原因(下图中的③)，并在今日待办的当前活动后面添加一个 撇号 ' (下图中的①)，表示当下活动产生一个内部中断，记录完成继续番茄钟。\n 至于说要聊天扯皮和续杯，等到番茄钟结束后再去，当然如果只是喝水那你想喝多少喝多少。\n如果作为初学者感觉内部中断太多，可以尝试缩小番茄钟为5、10、15分钟。当然番茄钟的每次更改至少要保持两个星期再次更改。\n```外部中断 是别人造成的，有人向你询问请你帮忙，等你答复，外部中断往往具有互动性。但是我们不能因为保护番茄钟就拒绝帮忙同事，毕竟低头不见抬头见的。```\n可以在番茄钟期间手机、邮件静音，\n同事来面谈，如果比较急可以商量稍后推迟下，用下一个番茄钟来解决中断事件，而不是在当前活动直接中断处理；如果不着急可以添加到计划外事件，同时在当前活动后添加一个减号 -(下图中的②)，表示受到一次外部中断；如果非常着急，那么不得已只有废弃当前的番茄钟，先帮同事解决问题，过后休息一会然后开启新的番茄钟开始专注起来。\n\n每个番茄钟结束都要在今日待办的当下活动方格中画×。如果当下活动已经完成则可以给活动内容划一条横线表示完成状态(下图中的③)。\n\n![fullsizerender(5).jpg](http://upload-images.jianshu.io/upload_images/1796052-4ab23cde90bb31c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 休息\n小休时间一般为3-5分钟，每隔4个番茄钟就大休一次，大休一般15-30分钟。注意休息期间要站起来走动一下，让自己能消除对上一个番茄钟的思考，完全抽身出来放松下。可以泡杯茶或咖啡，去个厕所，窗台发呆等，总之拒绝任何用脑的活动。\n以下说明了休息时箭头所指从最佳到最差休息方式：\n![fullsizerender(3).jpg](http://upload-images.jianshu.io/upload_images/1796052-32cc2cfdbfaad96f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 开始下一个番茄钟，重复3-5步\n\n### 下班前记录\n记录什么内容？记录当天完成的番茄钟数、被打断数、今日待办完成数等，通过记录可以知晓自己承诺完成了多少，相差多少，如果差距很大，就要寻找原因。经过一段时间的记录，数据可视化，看自己的承诺和已完成是否越来越接近。通过记录发现总结不足，在以后的清单中持续改善。\n\n以上只介绍了番茄工作法流程和一些需要注意的点，其他一些边缘内容或者没有get到的点欢迎探讨。","slug":"番茄工作法使用说明书","published":1,"updated":"2017-04-22T12:17:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7or003u449csrnzpra7","content":"<p>今天花了点时间把番茄工作法这本书看完了，和以前上学时45分钟每节课的感觉差不多，只是这个时间更短，流程也更细化，容易让人集中注意力。</p>\n<p>先来几个问题看看中刀的人有多少：<br>1.有拖延症，上午的工作要拖到下午，下午的工作要拖到明天或者有反正周六要加班，那就周五多玩玩，刷刷微博这样的思想。<br>2.经常我们想看一本书，看了一点后就厌烦抛诸脑后，等过一段时间兴致又来了想继续读，发现前面的内容已经忘了不得已要从头开始，如此往复，一年到头一本书还在原地徘徊，年终总结时才悔恨不已。<br>3.上班就开始干活，但是手头的事情刚干了一点，又一摊新的工作挤进来，然后倒手又去忙新的事情，经常下班了感觉忙了一天却没有一件拿得出手的已完成的活来交差。<br>如果你有上面的一种或者几种那么番茄工作法适合你。</p>\n<h2 id=\"番茄工作法的历史\"><a href=\"#番茄工作法的历史\" class=\"headerlink\" title=\"番茄工作法的历史\"></a>番茄工作法的历史</h2><p>番茄工作法是由弗朗西斯科·西里洛在1992年创建的，但其实在更早的时候西里洛就已经使用了。20世纪80年代西里洛还在大学时，由于学习效率低下作业完不成，就在想怎么让自己踏实的学一会，哪怕十分钟也行。如果有人监督帮忙掐表，会不会很好，后来西里洛找到了厨房定时器，形状酷似番茄，就这样他邂逅了番茄钟。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-be51678192608453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未命名.png\"></p>\n<h2 id=\"什么是番茄工作法？\"><a href=\"#什么是番茄工作法？\" class=\"headerlink\" title=\"什么是番茄工作法？\"></a>什么是番茄工作法？</h2><p>简单的说就是列出要做的事，标记当天要完成的，设置闹钟为25分钟，然后从第一件事情开始做。还要有每日回顾、每日承诺、中断和预估等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">番茄工作法是一套简单的流程，它可以让我们提高时间观念、提升注意力、加强自我决策意识、改善目前不好的工作流程从而提高工作效率，当然这一切好处的前提是正确并长期的执行了番茄法。</div></pre></td></tr></table></figure>\n<h2 id=\"番茄工作法需要哪些工具？\"><a href=\"#番茄工作法需要哪些工具？\" class=\"headerlink\" title=\"番茄工作法需要哪些工具？\"></a>番茄工作法需要哪些工具？</h2><p>一个番茄钟<br>铅笔/橡皮<br>三张表格(活动清单、今日待办、记录)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3a5435880d169f91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender.jpg\"></p>\n<h2 id=\"番茄工作法流程详解\"><a href=\"#番茄工作法流程详解\" class=\"headerlink\" title=\"番茄工作法流程详解\"></a>番茄工作法流程详解</h2><h3 id=\"将近期要完成的活动-任务加入到活动清单\"><a href=\"#将近期要完成的活动-任务加入到活动清单\" class=\"headerlink\" title=\"将近期要完成的活动/任务加入到活动清单\"></a>将近期要完成的活动/任务加入到活动清单</h3><p>把近几天准备工作的内容填写到活动清单中，活动清单内容力求简洁，不要求别人看懂，只需要自己几个月后仍能看懂即可。<br>如果某件事明确了必须在某时间之前完成，则可以在活动末尾加上最后期限作为提醒。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-bcb5ae9b4fa83b5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(1).jpg\"></p>\n<h3 id=\"从活动清单中选择今日要完成的几项抄入到今日待办中\"><a href=\"#从活动清单中选择今日要完成的几项抄入到今日待办中\" class=\"headerlink\" title=\"从活动清单中选择今日要完成的几项抄入到今日待办中\"></a>从活动清单中选择今日要完成的几项抄入到今日待办中</h3><p>今日待办的任务一定是要从活动清单抄入过来的，如果是自己又单独创建的那活动清单有何意义？填写今日待办时要注意划分优先级(事情的重要程度)，然后给每个待办预估需要多少番茄钟来完成，在待办后面用方格表示出来。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6386cf28a2aa20ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(4).jpg\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">从开始的活动清单列举，到今日待办的筛选，有没有觉得原本杂乱无章的事情，现在有了头绪而且当天\b目标已经明确只需要放手去做了。无形中注意力已经转移到所选活动了。</div></pre></td></tr></table></figure>\n<h3 id=\"准备好工作后，启动番茄钟时间设定为25分钟。\"><a href=\"#准备好工作后，启动番茄钟时间设定为25分钟。\" class=\"headerlink\" title=\"准备好工作后，启动番茄钟时间设定为25分钟。\"></a>准备好工作后，启动番茄钟时间设定为25分钟。</h3><p>注意每个番茄钟都是原子性的，即不能再分割，一旦番茄钟启动，25分钟必须从一而终。<br>可能有人会有疑问：如果番茄钟期间渴了怎么办？有人打电话或者有同事来询问怎么办？别急，这些都是中断，参见步骤4。</p>\n<h3 id=\"开始工作，直到番茄钟响铃结束\"><a href=\"#开始工作，直到番茄钟响铃结束\" class=\"headerlink\" title=\"开始工作，直到番茄钟响铃结束\"></a>开始工作，直到番茄钟响铃结束</h3><p>工作期间可能会受到中断，在日常工作中，中断是不可完全避免的，需要自己处理好中断。<br>中断有两种形式：内部中断和外部中断。<br><figure class=\"highlight plain\"><figcaption><span>是自己造成的，是直觉向大脑发出信号，告诉我让我去专注当下活动以外的事情。```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">比如工作了一会，突然想打开qq去群里扯皮几句，想起有个电话没有回复，水杯没水了要去续杯等，这些都是来自自身内部的本能，其实是想拖延，这时该怎么办？接受、记录然后继续番茄钟。</div><div class=\"line\">首先看引起中断原因，如果是突然想起没有做的事情，那么可以在今日待办(如果想起的事情不紧急可以直接加入到活动清单中，并在左边加一个“U”表示计划外事件“unplanned”)下方添加一个“计划外紧急”栏目，记录中断原因(下图中的③)，并在今日待办的当前活动后面添加一个 撇号 &apos; (下图中的①)，表示当下活动产生一个内部中断，记录完成继续番茄钟。</div><div class=\"line\"> 至于说要聊天扯皮和续杯，等到番茄钟结束后再去，当然如果只是喝水那你想喝多少喝多少。</div><div class=\"line\">如果作为初学者感觉内部中断太多，可以尝试缩小番茄钟为5、10、15分钟。当然番茄钟的每次更改至少要保持两个星期再次更改。</div><div class=\"line\">```外部中断 是别人造成的，有人向你询问请你帮忙，等你答复，外部中断往往具有互动性。但是我们不能因为保护番茄钟就拒绝帮忙同事，毕竟低头不见抬头见的。</div></pre></td></tr></table></figure></p>\n<p>可以在番茄钟期间手机、邮件静音，<br>同事来面谈，如果比较急可以商量稍后推迟下，用下一个番茄钟来解决中断事件，而不是在当前活动直接中断处理；如果不着急可以添加到计划外事件，同时在当前活动后添加一个减号 -(下图中的②)，表示受到一次外部中断；如果非常着急，那么不得已只有废弃当前的番茄钟，先帮同事解决问题，过后休息一会然后开启新的番茄钟开始专注起来。</p>\n<p>每个番茄钟结束都要在今日待办的当下活动方格中画×。如果当下活动已经完成则可以给活动内容划一条横线表示完成状态(下图中的③)。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-4ab23cde90bb31c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(5).jpg\"></p>\n<h3 id=\"休息\"><a href=\"#休息\" class=\"headerlink\" title=\"休息\"></a>休息</h3><p>小休时间一般为3-5分钟，每隔4个番茄钟就大休一次，大休一般15-30分钟。注意休息期间要站起来走动一下，让自己能消除对上一个番茄钟的思考，完全抽身出来放松下。可以泡杯茶或咖啡，去个厕所，窗台发呆等，总之拒绝任何用脑的活动。<br>以下说明了休息时箭头所指从最佳到最差休息方式：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-32cc2cfdbfaad96f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(3).jpg\"></p>\n<h3 id=\"开始下一个番茄钟，重复3-5步\"><a href=\"#开始下一个番茄钟，重复3-5步\" class=\"headerlink\" title=\"开始下一个番茄钟，重复3-5步\"></a>开始下一个番茄钟，重复3-5步</h3><h3 id=\"下班前记录\"><a href=\"#下班前记录\" class=\"headerlink\" title=\"下班前记录\"></a>下班前记录</h3><p>记录什么内容？记录当天完成的番茄钟数、被打断数、今日待办完成数等，通过记录可以知晓自己承诺完成了多少，相差多少，如果差距很大，就要寻找原因。经过一段时间的记录，数据可视化，看自己的承诺和已完成是否越来越接近。通过记录发现总结不足，在以后的清单中持续改善。</p>\n<p>以上只介绍了番茄工作法流程和一些需要注意的点，其他一些边缘内容或者没有get到的点欢迎探讨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天花了点时间把番茄工作法这本书看完了，和以前上学时45分钟每节课的感觉差不多，只是这个时间更短，流程也更细化，容易让人集中注意力。</p>\n<p>先来几个问题看看中刀的人有多少：<br>1.有拖延症，上午的工作要拖到下午，下午的工作要拖到明天或者有反正周六要加班，那就周五多玩玩，刷刷微博这样的思想。<br>2.经常我们想看一本书，看了一点后就厌烦抛诸脑后，等过一段时间兴致又来了想继续读，发现前面的内容已经忘了不得已要从头开始，如此往复，一年到头一本书还在原地徘徊，年终总结时才悔恨不已。<br>3.上班就开始干活，但是手头的事情刚干了一点，又一摊新的工作挤进来，然后倒手又去忙新的事情，经常下班了感觉忙了一天却没有一件拿得出手的已完成的活来交差。<br>如果你有上面的一种或者几种那么番茄工作法适合你。</p>\n<h2 id=\"番茄工作法的历史\"><a href=\"#番茄工作法的历史\" class=\"headerlink\" title=\"番茄工作法的历史\"></a>番茄工作法的历史</h2><p>番茄工作法是由弗朗西斯科·西里洛在1992年创建的，但其实在更早的时候西里洛就已经使用了。20世纪80年代西里洛还在大学时，由于学习效率低下作业完不成，就在想怎么让自己踏实的学一会，哪怕十分钟也行。如果有人监督帮忙掐表，会不会很好，后来西里洛找到了厨房定时器，形状酷似番茄，就这样他邂逅了番茄钟。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-be51678192608453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"未命名.png\"></p>\n<h2 id=\"什么是番茄工作法？\"><a href=\"#什么是番茄工作法？\" class=\"headerlink\" title=\"什么是番茄工作法？\"></a>什么是番茄工作法？</h2><p>简单的说就是列出要做的事，标记当天要完成的，设置闹钟为25分钟，然后从第一件事情开始做。还要有每日回顾、每日承诺、中断和预估等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">番茄工作法是一套简单的流程，它可以让我们提高时间观念、提升注意力、加强自我决策意识、改善目前不好的工作流程从而提高工作效率，当然这一切好处的前提是正确并长期的执行了番茄法。</div></pre></td></tr></table></figure>\n<h2 id=\"番茄工作法需要哪些工具？\"><a href=\"#番茄工作法需要哪些工具？\" class=\"headerlink\" title=\"番茄工作法需要哪些工具？\"></a>番茄工作法需要哪些工具？</h2><p>一个番茄钟<br>铅笔/橡皮<br>三张表格(活动清单、今日待办、记录)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-3a5435880d169f91.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender.jpg\"></p>\n<h2 id=\"番茄工作法流程详解\"><a href=\"#番茄工作法流程详解\" class=\"headerlink\" title=\"番茄工作法流程详解\"></a>番茄工作法流程详解</h2><h3 id=\"将近期要完成的活动-任务加入到活动清单\"><a href=\"#将近期要完成的活动-任务加入到活动清单\" class=\"headerlink\" title=\"将近期要完成的活动/任务加入到活动清单\"></a>将近期要完成的活动/任务加入到活动清单</h3><p>把近几天准备工作的内容填写到活动清单中，活动清单内容力求简洁，不要求别人看懂，只需要自己几个月后仍能看懂即可。<br>如果某件事明确了必须在某时间之前完成，则可以在活动末尾加上最后期限作为提醒。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-bcb5ae9b4fa83b5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(1).jpg\"></p>\n<h3 id=\"从活动清单中选择今日要完成的几项抄入到今日待办中\"><a href=\"#从活动清单中选择今日要完成的几项抄入到今日待办中\" class=\"headerlink\" title=\"从活动清单中选择今日要完成的几项抄入到今日待办中\"></a>从活动清单中选择今日要完成的几项抄入到今日待办中</h3><p>今日待办的任务一定是要从活动清单抄入过来的，如果是自己又单独创建的那活动清单有何意义？填写今日待办时要注意划分优先级(事情的重要程度)，然后给每个待办预估需要多少番茄钟来完成，在待办后面用方格表示出来。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6386cf28a2aa20ff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(4).jpg\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">从开始的活动清单列举，到今日待办的筛选，有没有觉得原本杂乱无章的事情，现在有了头绪而且当天\b目标已经明确只需要放手去做了。无形中注意力已经转移到所选活动了。</div></pre></td></tr></table></figure>\n<h3 id=\"准备好工作后，启动番茄钟时间设定为25分钟。\"><a href=\"#准备好工作后，启动番茄钟时间设定为25分钟。\" class=\"headerlink\" title=\"准备好工作后，启动番茄钟时间设定为25分钟。\"></a>准备好工作后，启动番茄钟时间设定为25分钟。</h3><p>注意每个番茄钟都是原子性的，即不能再分割，一旦番茄钟启动，25分钟必须从一而终。<br>可能有人会有疑问：如果番茄钟期间渴了怎么办？有人打电话或者有同事来询问怎么办？别急，这些都是中断，参见步骤4。</p>\n<h3 id=\"开始工作，直到番茄钟响铃结束\"><a href=\"#开始工作，直到番茄钟响铃结束\" class=\"headerlink\" title=\"开始工作，直到番茄钟响铃结束\"></a>开始工作，直到番茄钟响铃结束</h3><p>工作期间可能会受到中断，在日常工作中，中断是不可完全避免的，需要自己处理好中断。<br>中断有两种形式：内部中断和外部中断。<br><figure class=\"highlight plain\"><figcaption><span>是自己造成的，是直觉向大脑发出信号，告诉我让我去专注当下活动以外的事情。```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">比如工作了一会，突然想打开qq去群里扯皮几句，想起有个电话没有回复，水杯没水了要去续杯等，这些都是来自自身内部的本能，其实是想拖延，这时该怎么办？接受、记录然后继续番茄钟。</div><div class=\"line\">首先看引起中断原因，如果是突然想起没有做的事情，那么可以在今日待办(如果想起的事情不紧急可以直接加入到活动清单中，并在左边加一个“U”表示计划外事件“unplanned”)下方添加一个“计划外紧急”栏目，记录中断原因(下图中的③)，并在今日待办的当前活动后面添加一个 撇号 &apos; (下图中的①)，表示当下活动产生一个内部中断，记录完成继续番茄钟。</div><div class=\"line\"> 至于说要聊天扯皮和续杯，等到番茄钟结束后再去，当然如果只是喝水那你想喝多少喝多少。</div><div class=\"line\">如果作为初学者感觉内部中断太多，可以尝试缩小番茄钟为5、10、15分钟。当然番茄钟的每次更改至少要保持两个星期再次更改。</div><div class=\"line\">```外部中断 是别人造成的，有人向你询问请你帮忙，等你答复，外部中断往往具有互动性。但是我们不能因为保护番茄钟就拒绝帮忙同事，毕竟低头不见抬头见的。</div></pre></td></tr></table></figure></p>\n<p>可以在番茄钟期间手机、邮件静音，<br>同事来面谈，如果比较急可以商量稍后推迟下，用下一个番茄钟来解决中断事件，而不是在当前活动直接中断处理；如果不着急可以添加到计划外事件，同时在当前活动后添加一个减号 -(下图中的②)，表示受到一次外部中断；如果非常着急，那么不得已只有废弃当前的番茄钟，先帮同事解决问题，过后休息一会然后开启新的番茄钟开始专注起来。</p>\n<p>每个番茄钟结束都要在今日待办的当下活动方格中画×。如果当下活动已经完成则可以给活动内容划一条横线表示完成状态(下图中的③)。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-4ab23cde90bb31c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(5).jpg\"></p>\n<h3 id=\"休息\"><a href=\"#休息\" class=\"headerlink\" title=\"休息\"></a>休息</h3><p>小休时间一般为3-5分钟，每隔4个番茄钟就大休一次，大休一般15-30分钟。注意休息期间要站起来走动一下，让自己能消除对上一个番茄钟的思考，完全抽身出来放松下。可以泡杯茶或咖啡，去个厕所，窗台发呆等，总之拒绝任何用脑的活动。<br>以下说明了休息时箭头所指从最佳到最差休息方式：<br><img src=\"http://upload-images.jianshu.io/upload_images/1796052-32cc2cfdbfaad96f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"fullsizerender(3).jpg\"></p>\n<h3 id=\"开始下一个番茄钟，重复3-5步\"><a href=\"#开始下一个番茄钟，重复3-5步\" class=\"headerlink\" title=\"开始下一个番茄钟，重复3-5步\"></a>开始下一个番茄钟，重复3-5步</h3><h3 id=\"下班前记录\"><a href=\"#下班前记录\" class=\"headerlink\" title=\"下班前记录\"></a>下班前记录</h3><p>记录什么内容？记录当天完成的番茄钟数、被打断数、今日待办完成数等，通过记录可以知晓自己承诺完成了多少，相差多少，如果差距很大，就要寻找原因。经过一段时间的记录，数据可视化，看自己的承诺和已完成是否越来越接近。通过记录发现总结不足，在以后的清单中持续改善。</p>\n<p>以上只介绍了番茄工作法流程和一些需要注意的点，其他一些边缘内容或者没有get到的点欢迎探讨。</p>\n"},{"title":"数学归纳法","date":"2017-05-16T06:08:56.000Z","_content":"\n# 什么是数学归纳法\n\n数学归纳法就是证明一个命题在自然数范围内成立\n\n这里命题也可以当成是断言。\n\n比如断言自然数n，nx2为偶数。\n\n\n\n# 求储蓄罐里的钱\n\n有一个空储蓄罐，\n\n第一天，往里面存1元钱；\n\n第二天，往里面存2元钱；\n\n第三天，往里面存3元钱；\n\n第四天，往里面存4元钱；\n\n。\n\n。\n\n。\n\n每天都存钱，第一百天时储蓄罐里一共有多少钱？\n\n这个问题如何求解呢？其实最直接的方法就是从1开始加，一直加到100，但是这种暴力求解效率极差。\n\n 德国9岁孩子高斯也遇到了同样问题，但是他却马上得出了答案。\n\n他是这么考虑的：\n\n1+2+3…+100顺序计算结果和100+99+98...+1这样的逆序结果是一样的。\n\n这样的话，顺序的1+逆序的100，顺序的2+逆序的99，顺序的3+逆序的98，这样最后结果是100个101相加 = 100x101 = 10100 。因为逆序和顺序相等，所以这个和是2倍的顺序，所以顺序的和为10100/2 =5050。最终得出1加到100的和为5050。\n\n高斯据此得出以下公式：\n\n1+2+3…+100 = （100+1）x100/2；\n\n当然上面只是求1到100的和，那如果要求1到1000，到10000呢，公式是不是仍然成立？\n\n高斯断言：对于任意自然数n：1+2+3…+n = （n+1)xn/2都成立；\n\n接下来要证明高斯的断言是否成立。\n\n# 数学归纳法证明\n\n最简单的数学归纳法是证明当n等于任意一个自然数时断言成立，证明包括两步：\n\n1.证明n=1时，断言p(1)成立\n\n2.证明n=k为任何自然数时，若p(k)成立，则p(k+1)也成立。\n\n\n\n由此，关于高斯公式的证明如下：\n\n1.当n=1时， 1 = （1+1）x1/2 = 1，高斯公式成立；\n\n2.当n=k时，1+2+...+k = (k+1)xk/2 成立;\n\n3.当n=k+1时，证明1+2+...+k+(k+1) = ((k+1)+1)x(k+1)/2成立；\n\n因为2成立，所以3中公式代入后：\n\n (k+1)xk/2+（k+1） = ((k+1)+1)x(k+1)/2\n\n（k+1）x（k+2）/2 =  （k+1）x（k+2）/2 \n\n左右两边相等，\n\n得出结论：对于自然数n，断言p(n)都成立。\n\n\n\n# 为什么数学归纳法只证明两步就成立了\n\n\n\n1.证明断言p(1)成立，也就是n=1成立；\n\n2.通过p(m)成立推导出p(m+1)也成立。\n\n3.根据上面结论，p(1+1)也就是p(2)成立；\n\n4.p(2+1)也就是p(3)成立；\n\n5.p(3+1)也就是p(4)成立；\n\n6.循环推导，最终推导出值为n时p(n)成立。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/数学归纳法.md","raw":"---\ntitle: 数学归纳法\ndate: 2017-05-16 14:08:56\ntags: 程序员的数学\ncategories: 程序员的数学\n---\n\n# 什么是数学归纳法\n\n数学归纳法就是证明一个命题在自然数范围内成立\n\n这里命题也可以当成是断言。\n\n比如断言自然数n，nx2为偶数。\n\n\n\n# 求储蓄罐里的钱\n\n有一个空储蓄罐，\n\n第一天，往里面存1元钱；\n\n第二天，往里面存2元钱；\n\n第三天，往里面存3元钱；\n\n第四天，往里面存4元钱；\n\n。\n\n。\n\n。\n\n每天都存钱，第一百天时储蓄罐里一共有多少钱？\n\n这个问题如何求解呢？其实最直接的方法就是从1开始加，一直加到100，但是这种暴力求解效率极差。\n\n 德国9岁孩子高斯也遇到了同样问题，但是他却马上得出了答案。\n\n他是这么考虑的：\n\n1+2+3…+100顺序计算结果和100+99+98...+1这样的逆序结果是一样的。\n\n这样的话，顺序的1+逆序的100，顺序的2+逆序的99，顺序的3+逆序的98，这样最后结果是100个101相加 = 100x101 = 10100 。因为逆序和顺序相等，所以这个和是2倍的顺序，所以顺序的和为10100/2 =5050。最终得出1加到100的和为5050。\n\n高斯据此得出以下公式：\n\n1+2+3…+100 = （100+1）x100/2；\n\n当然上面只是求1到100的和，那如果要求1到1000，到10000呢，公式是不是仍然成立？\n\n高斯断言：对于任意自然数n：1+2+3…+n = （n+1)xn/2都成立；\n\n接下来要证明高斯的断言是否成立。\n\n# 数学归纳法证明\n\n最简单的数学归纳法是证明当n等于任意一个自然数时断言成立，证明包括两步：\n\n1.证明n=1时，断言p(1)成立\n\n2.证明n=k为任何自然数时，若p(k)成立，则p(k+1)也成立。\n\n\n\n由此，关于高斯公式的证明如下：\n\n1.当n=1时， 1 = （1+1）x1/2 = 1，高斯公式成立；\n\n2.当n=k时，1+2+...+k = (k+1)xk/2 成立;\n\n3.当n=k+1时，证明1+2+...+k+(k+1) = ((k+1)+1)x(k+1)/2成立；\n\n因为2成立，所以3中公式代入后：\n\n (k+1)xk/2+（k+1） = ((k+1)+1)x(k+1)/2\n\n（k+1）x（k+2）/2 =  （k+1）x（k+2）/2 \n\n左右两边相等，\n\n得出结论：对于自然数n，断言p(n)都成立。\n\n\n\n# 为什么数学归纳法只证明两步就成立了\n\n\n\n1.证明断言p(1)成立，也就是n=1成立；\n\n2.通过p(m)成立推导出p(m+1)也成立。\n\n3.根据上面结论，p(1+1)也就是p(2)成立；\n\n4.p(2+1)也就是p(3)成立；\n\n5.p(3+1)也就是p(4)成立；\n\n6.循环推导，最终推导出值为n时p(n)成立。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"数学归纳法","published":1,"updated":"2017-05-17T03:38:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ot003z449cqc6utnix","content":"<h1 id=\"什么是数学归纳法\"><a href=\"#什么是数学归纳法\" class=\"headerlink\" title=\"什么是数学归纳法\"></a>什么是数学归纳法</h1><p>数学归纳法就是证明一个命题在自然数范围内成立</p>\n<p>这里命题也可以当成是断言。</p>\n<p>比如断言自然数n，nx2为偶数。</p>\n<h1 id=\"求储蓄罐里的钱\"><a href=\"#求储蓄罐里的钱\" class=\"headerlink\" title=\"求储蓄罐里的钱\"></a>求储蓄罐里的钱</h1><p>有一个空储蓄罐，</p>\n<p>第一天，往里面存1元钱；</p>\n<p>第二天，往里面存2元钱；</p>\n<p>第三天，往里面存3元钱；</p>\n<p>第四天，往里面存4元钱；</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p>每天都存钱，第一百天时储蓄罐里一共有多少钱？</p>\n<p>这个问题如何求解呢？其实最直接的方法就是从1开始加，一直加到100，但是这种暴力求解效率极差。</p>\n<p> 德国9岁孩子高斯也遇到了同样问题，但是他却马上得出了答案。</p>\n<p>他是这么考虑的：</p>\n<p>1+2+3…+100顺序计算结果和100+99+98…+1这样的逆序结果是一样的。</p>\n<p>这样的话，顺序的1+逆序的100，顺序的2+逆序的99，顺序的3+逆序的98，这样最后结果是100个101相加 = 100x101 = 10100 。因为逆序和顺序相等，所以这个和是2倍的顺序，所以顺序的和为10100/2 =5050。最终得出1加到100的和为5050。</p>\n<p>高斯据此得出以下公式：</p>\n<p>1+2+3…+100 = （100+1）x100/2；</p>\n<p>当然上面只是求1到100的和，那如果要求1到1000，到10000呢，公式是不是仍然成立？</p>\n<p>高斯断言：对于任意自然数n：1+2+3…+n = （n+1)xn/2都成立；</p>\n<p>接下来要证明高斯的断言是否成立。</p>\n<h1 id=\"数学归纳法证明\"><a href=\"#数学归纳法证明\" class=\"headerlink\" title=\"数学归纳法证明\"></a>数学归纳法证明</h1><p>最简单的数学归纳法是证明当n等于任意一个自然数时断言成立，证明包括两步：</p>\n<p>1.证明n=1时，断言p(1)成立</p>\n<p>2.证明n=k为任何自然数时，若p(k)成立，则p(k+1)也成立。</p>\n<p>由此，关于高斯公式的证明如下：</p>\n<p>1.当n=1时， 1 = （1+1）x1/2 = 1，高斯公式成立；</p>\n<p>2.当n=k时，1+2+…+k = (k+1)xk/2 成立;</p>\n<p>3.当n=k+1时，证明1+2+…+k+(k+1) = ((k+1)+1)x(k+1)/2成立；</p>\n<p>因为2成立，所以3中公式代入后：</p>\n<p> (k+1)xk/2+（k+1） = ((k+1)+1)x(k+1)/2</p>\n<p>（k+1）x（k+2）/2 =  （k+1）x（k+2）/2 </p>\n<p>左右两边相等，</p>\n<p>得出结论：对于自然数n，断言p(n)都成立。</p>\n<h1 id=\"为什么数学归纳法只证明两步就成立了\"><a href=\"#为什么数学归纳法只证明两步就成立了\" class=\"headerlink\" title=\"为什么数学归纳法只证明两步就成立了\"></a>为什么数学归纳法只证明两步就成立了</h1><p>1.证明断言p(1)成立，也就是n=1成立；</p>\n<p>2.通过p(m)成立推导出p(m+1)也成立。</p>\n<p>3.根据上面结论，p(1+1)也就是p(2)成立；</p>\n<p>4.p(2+1)也就是p(3)成立；</p>\n<p>5.p(3+1)也就是p(4)成立；</p>\n<p>6.循环推导，最终推导出值为n时p(n)成立。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是数学归纳法\"><a href=\"#什么是数学归纳法\" class=\"headerlink\" title=\"什么是数学归纳法\"></a>什么是数学归纳法</h1><p>数学归纳法就是证明一个命题在自然数范围内成立</p>\n<p>这里命题也可以当成是断言。</p>\n<p>比如断言自然数n，nx2为偶数。</p>\n<h1 id=\"求储蓄罐里的钱\"><a href=\"#求储蓄罐里的钱\" class=\"headerlink\" title=\"求储蓄罐里的钱\"></a>求储蓄罐里的钱</h1><p>有一个空储蓄罐，</p>\n<p>第一天，往里面存1元钱；</p>\n<p>第二天，往里面存2元钱；</p>\n<p>第三天，往里面存3元钱；</p>\n<p>第四天，往里面存4元钱；</p>\n<p>。</p>\n<p>。</p>\n<p>。</p>\n<p>每天都存钱，第一百天时储蓄罐里一共有多少钱？</p>\n<p>这个问题如何求解呢？其实最直接的方法就是从1开始加，一直加到100，但是这种暴力求解效率极差。</p>\n<p> 德国9岁孩子高斯也遇到了同样问题，但是他却马上得出了答案。</p>\n<p>他是这么考虑的：</p>\n<p>1+2+3…+100顺序计算结果和100+99+98…+1这样的逆序结果是一样的。</p>\n<p>这样的话，顺序的1+逆序的100，顺序的2+逆序的99，顺序的3+逆序的98，这样最后结果是100个101相加 = 100x101 = 10100 。因为逆序和顺序相等，所以这个和是2倍的顺序，所以顺序的和为10100/2 =5050。最终得出1加到100的和为5050。</p>\n<p>高斯据此得出以下公式：</p>\n<p>1+2+3…+100 = （100+1）x100/2；</p>\n<p>当然上面只是求1到100的和，那如果要求1到1000，到10000呢，公式是不是仍然成立？</p>\n<p>高斯断言：对于任意自然数n：1+2+3…+n = （n+1)xn/2都成立；</p>\n<p>接下来要证明高斯的断言是否成立。</p>\n<h1 id=\"数学归纳法证明\"><a href=\"#数学归纳法证明\" class=\"headerlink\" title=\"数学归纳法证明\"></a>数学归纳法证明</h1><p>最简单的数学归纳法是证明当n等于任意一个自然数时断言成立，证明包括两步：</p>\n<p>1.证明n=1时，断言p(1)成立</p>\n<p>2.证明n=k为任何自然数时，若p(k)成立，则p(k+1)也成立。</p>\n<p>由此，关于高斯公式的证明如下：</p>\n<p>1.当n=1时， 1 = （1+1）x1/2 = 1，高斯公式成立；</p>\n<p>2.当n=k时，1+2+…+k = (k+1)xk/2 成立;</p>\n<p>3.当n=k+1时，证明1+2+…+k+(k+1) = ((k+1)+1)x(k+1)/2成立；</p>\n<p>因为2成立，所以3中公式代入后：</p>\n<p> (k+1)xk/2+（k+1） = ((k+1)+1)x(k+1)/2</p>\n<p>（k+1）x（k+2）/2 =  （k+1）x（k+2）/2 </p>\n<p>左右两边相等，</p>\n<p>得出结论：对于自然数n，断言p(n)都成立。</p>\n<h1 id=\"为什么数学归纳法只证明两步就成立了\"><a href=\"#为什么数学归纳法只证明两步就成立了\" class=\"headerlink\" title=\"为什么数学归纳法只证明两步就成立了\"></a>为什么数学归纳法只证明两步就成立了</h1><p>1.证明断言p(1)成立，也就是n=1成立；</p>\n<p>2.通过p(m)成立推导出p(m+1)也成立。</p>\n<p>3.根据上面结论，p(1+1)也就是p(2)成立；</p>\n<p>4.p(2+1)也就是p(3)成立；</p>\n<p>5.p(3+1)也就是p(4)成立；</p>\n<p>6.循环推导，最终推导出值为n时p(n)成立。</p>\n"},{"title":"算法之朴素模式匹配","date":"2017-05-25T07:49:26.000Z","_content":"\n# 0x00 前言\n\n不论英文还是中文，在看文章时经常会遇到查找某个单词或字组的时候，把一篇文章看作是一个大的字符串，要查找的内容作为子串，这种在大串中查找子串的操作叫做串的模式匹配。\n\n我们知道了这种行为叫串的模式匹配，但我们不清楚的是到底如何匹配，具体的操作是什么？\n\n# 0x01 我如何操作\n\n在我看来要从大串中寻找子串，最直接的方法就是从大串起始位置开始，挨个字符比对，如果存在子串总会找出来。这种简单直接的方法称为 **朴素的模式匹配算法**\n\n# 0x02 代码实现\n\n如果借用字符串截取操作，直接实现子串的查找就比较方便：\n\n```\n\tpublic static int index(String s, String t, int pos) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\twhile (pos <= (m - n + 1)) {\n\t\t\tString sub = s.substring(pos, n);\n\t\t\t//直接在对比位置截取和子串相同长度的一个串来和子串对比\n\t\t\tif (t.equals(sub)) {\n\t\t\t\treturn pos;\n\t\t\t} else {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n```\n\n\n\n\n\n\n\n","source":"_posts/算法之朴素模式匹配.md","raw":"---\ntitle: 算法之朴素模式匹配\ndate: 2017-05-25 15:49:26\ntags: 算法\ncategories: 算法\n---\n\n# 0x00 前言\n\n不论英文还是中文，在看文章时经常会遇到查找某个单词或字组的时候，把一篇文章看作是一个大的字符串，要查找的内容作为子串，这种在大串中查找子串的操作叫做串的模式匹配。\n\n我们知道了这种行为叫串的模式匹配，但我们不清楚的是到底如何匹配，具体的操作是什么？\n\n# 0x01 我如何操作\n\n在我看来要从大串中寻找子串，最直接的方法就是从大串起始位置开始，挨个字符比对，如果存在子串总会找出来。这种简单直接的方法称为 **朴素的模式匹配算法**\n\n# 0x02 代码实现\n\n如果借用字符串截取操作，直接实现子串的查找就比较方便：\n\n```\n\tpublic static int index(String s, String t, int pos) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\twhile (pos <= (m - n + 1)) {\n\t\t\tString sub = s.substring(pos, n);\n\t\t\t//直接在对比位置截取和子串相同长度的一个串来和子串对比\n\t\t\tif (t.equals(sub)) {\n\t\t\t\treturn pos;\n\t\t\t} else {\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n```\n\n\n\n\n\n\n\n","slug":"算法之朴素模式匹配","published":1,"updated":"2017-05-25T09:47:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7oy0042449cieqwrvlr","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>不论英文还是中文，在看文章时经常会遇到查找某个单词或字组的时候，把一篇文章看作是一个大的字符串，要查找的内容作为子串，这种在大串中查找子串的操作叫做串的模式匹配。</p>\n<p>我们知道了这种行为叫串的模式匹配，但我们不清楚的是到底如何匹配，具体的操作是什么？</p>\n<h1 id=\"0x01-我如何操作\"><a href=\"#0x01-我如何操作\" class=\"headerlink\" title=\"0x01 我如何操作\"></a>0x01 我如何操作</h1><p>在我看来要从大串中寻找子串，最直接的方法就是从大串起始位置开始，挨个字符比对，如果存在子串总会找出来。这种简单直接的方法称为 <strong>朴素的模式匹配算法</strong></p>\n<h1 id=\"0x02-代码实现\"><a href=\"#0x02-代码实现\" class=\"headerlink\" title=\"0x02 代码实现\"></a>0x02 代码实现</h1><p>如果借用字符串截取操作，直接实现子串的查找就比较方便：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int index(String s, String t, int pos) &#123;</div><div class=\"line\">\tint m = s.length();</div><div class=\"line\">\tint n = t.length();</div><div class=\"line\">\twhile (pos &lt;= (m - n + 1)) &#123;</div><div class=\"line\">\t\tString sub = s.substring(pos, n);</div><div class=\"line\">\t\t//直接在对比位置截取和子串相同长度的一个串来和子串对比</div><div class=\"line\">\t\tif (t.equals(sub)) &#123;</div><div class=\"line\">\t\t\treturn pos;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tpos++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>不论英文还是中文，在看文章时经常会遇到查找某个单词或字组的时候，把一篇文章看作是一个大的字符串，要查找的内容作为子串，这种在大串中查找子串的操作叫做串的模式匹配。</p>\n<p>我们知道了这种行为叫串的模式匹配，但我们不清楚的是到底如何匹配，具体的操作是什么？</p>\n<h1 id=\"0x01-我如何操作\"><a href=\"#0x01-我如何操作\" class=\"headerlink\" title=\"0x01 我如何操作\"></a>0x01 我如何操作</h1><p>在我看来要从大串中寻找子串，最直接的方法就是从大串起始位置开始，挨个字符比对，如果存在子串总会找出来。这种简单直接的方法称为 <strong>朴素的模式匹配算法</strong></p>\n<h1 id=\"0x02-代码实现\"><a href=\"#0x02-代码实现\" class=\"headerlink\" title=\"0x02 代码实现\"></a>0x02 代码实现</h1><p>如果借用字符串截取操作，直接实现子串的查找就比较方便：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int index(String s, String t, int pos) &#123;</div><div class=\"line\">\tint m = s.length();</div><div class=\"line\">\tint n = t.length();</div><div class=\"line\">\twhile (pos &lt;= (m - n + 1)) &#123;</div><div class=\"line\">\t\tString sub = s.substring(pos, n);</div><div class=\"line\">\t\t//直接在对比位置截取和子串相同长度的一个串来和子串对比</div><div class=\"line\">\t\tif (t.equals(sub)) &#123;</div><div class=\"line\">\t\t\treturn pos;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tpos++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"设计一个有获取元素最小值getMin的栈","date":"2017-05-17T08:24:42.000Z","_content":"\n# 0x00 前言\n\n栈可以看成一个瓶子，只有一个口，另一端被封底。这样数据进出都只能从一个口经过。这样就导致的一个直接结果就是数据FILO问题。要找到栈中最小数据，单靠一个栈不能完成，需要外部提供辅助。\n\n# 0x01 分析\n\n\n\n一个存好数据的栈，要从里面找到最小数值，不可避免的要把数据出栈，然后进行对比。这时有个问题就来了，找到最小数值后，其他数据还有用吗？换句话说，其他数据还要不要了？如果不要的话，比较完成后不用再次存储，如果要德话，比较期间还要注意数据的保存。这里注意要分这两种情况来考虑。\n\n# 0x02 不要其他数据的实现\n\n既然不需要其他数据，那就直接把数据弹出栈就好了，每次弹栈时对比临时值，如果当前弹栈数据比临时值大则直接弹栈，否则就把值赋给临时值。\n\n```\npublic class StackMin {\n\tprivate Stack<Integer> stack = new Stack<>();\n\n\tpublic int getStackMin() {\n\t\tint min = 0;\n\t\twhile (!stack.isEmpty()) {\n\t\t\tint current = stack.pop();\n\t\t\tif (min != 0) {\n\t\t\t\tif (min > current) {\n\t\t\t\t\tmin = current;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackMin stackMin = new StackMin();\n\t\tstackMin.stack.push(9);\n\t\tstackMin.stack.push(5);\n\t\tstackMin.stack.push(2);\n\t\tstackMin.stack.push(7);\n\t\tSystem.out.println(stackMin.getStackMin());\n\t}\n}\n\n```\n\n这里代码只实现了getStackMin方法，栈的其他方法就直接定义一个方法后直接调用Stack方法即可。\n\n# 0x03 需要其他数据的实现\n\n如果要保留栈的数据，那最直接的想法是在弹栈比较期间，把弹出栈的数据顺路给入道一个新的栈中，这里相比上面，需要多一个栈即可实现。\n\n```\npublic class StackMin {\n\tprivate Stack<Integer> stack = new Stack<>();\n\tprivate Stack<Integer> backUp = new Stack<>();//备份栈\n\n\tpublic int getStackMin() {\n\t\tint min = 0;\n\t\twhile (!stack.isEmpty()) {\n\t\t\tint current = stack.pop();\n\t\t\tif (min != 0) {\n\t\t\t\tif (min > current) {\n\t\t\t\t\tmin = current;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t\tbackUp.push(current);//弹出栈时进入备份栈\n\t\t}\n\t\treturn min;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackMin stackMin = new StackMin();\n\t\tstackMin.stack.push(9);\n\t\tstackMin.stack.push(5);\n\t\tstackMin.stack.push(2);\n\t\tstackMin.stack.push(7);\n\t\tSystem.out.println(stackMin.getStackMin());\n\t}\n}\n\n```\n\n","source":"_posts/设计一个有获取元素最小值getMin的栈.md","raw":"---\ntitle: 设计一个有获取元素最小值getMin的栈\ndate: 2017-05-17 16:24:42\ntags: 算法\ncategories: 算法\n---\n\n# 0x00 前言\n\n栈可以看成一个瓶子，只有一个口，另一端被封底。这样数据进出都只能从一个口经过。这样就导致的一个直接结果就是数据FILO问题。要找到栈中最小数据，单靠一个栈不能完成，需要外部提供辅助。\n\n# 0x01 分析\n\n\n\n一个存好数据的栈，要从里面找到最小数值，不可避免的要把数据出栈，然后进行对比。这时有个问题就来了，找到最小数值后，其他数据还有用吗？换句话说，其他数据还要不要了？如果不要的话，比较完成后不用再次存储，如果要德话，比较期间还要注意数据的保存。这里注意要分这两种情况来考虑。\n\n# 0x02 不要其他数据的实现\n\n既然不需要其他数据，那就直接把数据弹出栈就好了，每次弹栈时对比临时值，如果当前弹栈数据比临时值大则直接弹栈，否则就把值赋给临时值。\n\n```\npublic class StackMin {\n\tprivate Stack<Integer> stack = new Stack<>();\n\n\tpublic int getStackMin() {\n\t\tint min = 0;\n\t\twhile (!stack.isEmpty()) {\n\t\t\tint current = stack.pop();\n\t\t\tif (min != 0) {\n\t\t\t\tif (min > current) {\n\t\t\t\t\tmin = current;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackMin stackMin = new StackMin();\n\t\tstackMin.stack.push(9);\n\t\tstackMin.stack.push(5);\n\t\tstackMin.stack.push(2);\n\t\tstackMin.stack.push(7);\n\t\tSystem.out.println(stackMin.getStackMin());\n\t}\n}\n\n```\n\n这里代码只实现了getStackMin方法，栈的其他方法就直接定义一个方法后直接调用Stack方法即可。\n\n# 0x03 需要其他数据的实现\n\n如果要保留栈的数据，那最直接的想法是在弹栈比较期间，把弹出栈的数据顺路给入道一个新的栈中，这里相比上面，需要多一个栈即可实现。\n\n```\npublic class StackMin {\n\tprivate Stack<Integer> stack = new Stack<>();\n\tprivate Stack<Integer> backUp = new Stack<>();//备份栈\n\n\tpublic int getStackMin() {\n\t\tint min = 0;\n\t\twhile (!stack.isEmpty()) {\n\t\t\tint current = stack.pop();\n\t\t\tif (min != 0) {\n\t\t\t\tif (min > current) {\n\t\t\t\t\tmin = current;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t\tbackUp.push(current);//弹出栈时进入备份栈\n\t\t}\n\t\treturn min;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tStackMin stackMin = new StackMin();\n\t\tstackMin.stack.push(9);\n\t\tstackMin.stack.push(5);\n\t\tstackMin.stack.push(2);\n\t\tstackMin.stack.push(7);\n\t\tSystem.out.println(stackMin.getStackMin());\n\t}\n}\n\n```\n\n","slug":"设计一个有获取元素最小值getMin的栈","published":1,"updated":"2017-05-18T08:28:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7p00045449cro1route","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>栈可以看成一个瓶子，只有一个口，另一端被封底。这样数据进出都只能从一个口经过。这样就导致的一个直接结果就是数据FILO问题。要找到栈中最小数据，单靠一个栈不能完成，需要外部提供辅助。</p>\n<h1 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h1><p>一个存好数据的栈，要从里面找到最小数值，不可避免的要把数据出栈，然后进行对比。这时有个问题就来了，找到最小数值后，其他数据还有用吗？换句话说，其他数据还要不要了？如果不要的话，比较完成后不用再次存储，如果要德话，比较期间还要注意数据的保存。这里注意要分这两种情况来考虑。</p>\n<h1 id=\"0x02-不要其他数据的实现\"><a href=\"#0x02-不要其他数据的实现\" class=\"headerlink\" title=\"0x02 不要其他数据的实现\"></a>0x02 不要其他数据的实现</h1><p>既然不需要其他数据，那就直接把数据弹出栈就好了，每次弹栈时对比临时值，如果当前弹栈数据比临时值大则直接弹栈，否则就把值赋给临时值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StackMin &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\tpublic int getStackMin() &#123;</div><div class=\"line\">\t\tint min = 0;</div><div class=\"line\">\t\twhile (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tint current = stack.pop();</div><div class=\"line\">\t\t\tif (min != 0) &#123;</div><div class=\"line\">\t\t\t\tif (min &gt; current) &#123;</div><div class=\"line\">\t\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn min;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackMin stackMin = new StackMin();</div><div class=\"line\">\t\tstackMin.stack.push(9);</div><div class=\"line\">\t\tstackMin.stack.push(5);</div><div class=\"line\">\t\tstackMin.stack.push(2);</div><div class=\"line\">\t\tstackMin.stack.push(7);</div><div class=\"line\">\t\tSystem.out.println(stackMin.getStackMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里代码只实现了getStackMin方法，栈的其他方法就直接定义一个方法后直接调用Stack方法即可。</p>\n<h1 id=\"0x03-需要其他数据的实现\"><a href=\"#0x03-需要其他数据的实现\" class=\"headerlink\" title=\"0x03 需要其他数据的实现\"></a>0x03 需要其他数据的实现</h1><p>如果要保留栈的数据，那最直接的想法是在弹栈比较期间，把弹出栈的数据顺路给入道一个新的栈中，这里相比上面，需要多一个栈即可实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StackMin &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; backUp = new Stack&lt;&gt;();//备份栈</div><div class=\"line\"></div><div class=\"line\">\tpublic int getStackMin() &#123;</div><div class=\"line\">\t\tint min = 0;</div><div class=\"line\">\t\twhile (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tint current = stack.pop();</div><div class=\"line\">\t\t\tif (min != 0) &#123;</div><div class=\"line\">\t\t\t\tif (min &gt; current) &#123;</div><div class=\"line\">\t\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tbackUp.push(current);//弹出栈时进入备份栈</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn min;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackMin stackMin = new StackMin();</div><div class=\"line\">\t\tstackMin.stack.push(9);</div><div class=\"line\">\t\tstackMin.stack.push(5);</div><div class=\"line\">\t\tstackMin.stack.push(2);</div><div class=\"line\">\t\tstackMin.stack.push(7);</div><div class=\"line\">\t\tSystem.out.println(stackMin.getStackMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>栈可以看成一个瓶子，只有一个口，另一端被封底。这样数据进出都只能从一个口经过。这样就导致的一个直接结果就是数据FILO问题。要找到栈中最小数据，单靠一个栈不能完成，需要外部提供辅助。</p>\n<h1 id=\"0x01-分析\"><a href=\"#0x01-分析\" class=\"headerlink\" title=\"0x01 分析\"></a>0x01 分析</h1><p>一个存好数据的栈，要从里面找到最小数值，不可避免的要把数据出栈，然后进行对比。这时有个问题就来了，找到最小数值后，其他数据还有用吗？换句话说，其他数据还要不要了？如果不要的话，比较完成后不用再次存储，如果要德话，比较期间还要注意数据的保存。这里注意要分这两种情况来考虑。</p>\n<h1 id=\"0x02-不要其他数据的实现\"><a href=\"#0x02-不要其他数据的实现\" class=\"headerlink\" title=\"0x02 不要其他数据的实现\"></a>0x02 不要其他数据的实现</h1><p>既然不需要其他数据，那就直接把数据弹出栈就好了，每次弹栈时对比临时值，如果当前弹栈数据比临时值大则直接弹栈，否则就把值赋给临时值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StackMin &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\tpublic int getStackMin() &#123;</div><div class=\"line\">\t\tint min = 0;</div><div class=\"line\">\t\twhile (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tint current = stack.pop();</div><div class=\"line\">\t\t\tif (min != 0) &#123;</div><div class=\"line\">\t\t\t\tif (min &gt; current) &#123;</div><div class=\"line\">\t\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn min;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackMin stackMin = new StackMin();</div><div class=\"line\">\t\tstackMin.stack.push(9);</div><div class=\"line\">\t\tstackMin.stack.push(5);</div><div class=\"line\">\t\tstackMin.stack.push(2);</div><div class=\"line\">\t\tstackMin.stack.push(7);</div><div class=\"line\">\t\tSystem.out.println(stackMin.getStackMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里代码只实现了getStackMin方法，栈的其他方法就直接定义一个方法后直接调用Stack方法即可。</p>\n<h1 id=\"0x03-需要其他数据的实现\"><a href=\"#0x03-需要其他数据的实现\" class=\"headerlink\" title=\"0x03 需要其他数据的实现\"></a>0x03 需要其他数据的实现</h1><p>如果要保留栈的数据，那最直接的想法是在弹栈比较期间，把弹出栈的数据顺路给入道一个新的栈中，这里相比上面，需要多一个栈即可实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StackMin &#123;</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\">\tprivate Stack&lt;Integer&gt; backUp = new Stack&lt;&gt;();//备份栈</div><div class=\"line\"></div><div class=\"line\">\tpublic int getStackMin() &#123;</div><div class=\"line\">\t\tint min = 0;</div><div class=\"line\">\t\twhile (!stack.isEmpty()) &#123;</div><div class=\"line\">\t\t\tint current = stack.pop();</div><div class=\"line\">\t\t\tif (min != 0) &#123;</div><div class=\"line\">\t\t\t\tif (min &gt; current) &#123;</div><div class=\"line\">\t\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tmin = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tbackUp.push(current);//弹出栈时进入备份栈</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn min;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tStackMin stackMin = new StackMin();</div><div class=\"line\">\t\tstackMin.stack.push(9);</div><div class=\"line\">\t\tstackMin.stack.push(5);</div><div class=\"line\">\t\tstackMin.stack.push(2);</div><div class=\"line\">\t\tstackMin.stack.push(7);</div><div class=\"line\">\t\tSystem.out.println(stackMin.getStackMin());</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"详解设计模式之单例模式","date":"2017-04-21T14:22:50.000Z","_content":"####1、什么是单例?\n单例顾名思义就是单个实例。日常工作都是自由的通过构造方法创建对象的，所以听到单例时，我们应该意识到其下是暗含了2层意思的，①构造方法不在为你所用，你不需要知道如何创建对象。②我会给你提供获取实例的方法，不需要你自己动手创建。\n\n![单例示意图.png](http://upload-images.jianshu.io/upload_images/1796052-fc54578715942157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不清楚uml类关系的请移步[UML--类图详解](http://www.jianshu.com/p/bf23234d5d2b)\n####2、\b什么情况下使用单例?\n当你需要内存中只有一个对象的时候。\n\n####3、为什么使用单例？\n单例保证了内存中数据的唯一性，同时也降低了内存的开销。\n####3、\b如何实现单例？\n在1中了解到两层含义后，对我们创建单例类是有帮助的，总结下就是：①私有化构造方法  ②对外提供获取实例方法\n\n- 饿汉式\n所谓饿汉式，就是在类加载的时候就迫不及待的创建对象，等到调用获取实例方法直接拿到对象返回即可。\n看实现代码：\n\n```\npublic class HungarySingleton {\n\tprivate static HungarySingleton intance = new HungarySingleton();\n\t\n\tprivate HungarySingleton(){\n\t\t\n\t}\n\tpublic static HungarySingleton getInstance(){\n\t\treturn intance;\n\t}\n}\n```\n*懒汉式是最简单的单例模式，在类加载的时候就实例化，避免了多线程问题的同时保证了实例唯一性。缺点是即使不需要时候也会被实例，会占用内存。所以推荐在实例占用内存不多的情况下使用，否则请使用下面几种方式。*\n\n- 懒汉式\n懒汉式，就是在首次调用的时候才会创建实例，相比饿汉式，延迟了初始化。\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tinstance = new LayzySingleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n上面代码有个问题，就是在多线程调用中会有产生多个实例的隐患，所以需要使用线程同步：\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic synchronized LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tinstance = new LayzySingleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n*synchronized的加入虽然解决了多实例的隐患，但是又带来了性能低下的问题，因为我们只需要在首次创建对象时让同步产生作用即可，其后的调用无需同步，现在只要是调用该方法就同步，看来还需要改进*\n下面使用双重校验加锁(DCL)：\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic  LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tsynchronized(LayzySingleton.class){\n\t\t\t\tif (null == instance) {\n\t\t\t\t\tinstance = new LayzySingleton();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n现在多线程问题解决了，性能也得到优化了是不是双重校验加锁就完美了呢？\nNO~\n在Java并发编程中的指令重排序中有讲到双重校验加锁失效问题。\n要禁止指令重排序需要使用volatile修饰变量\n\n\n```\n\tprivate volatile static LayzySingleton instance = null;\n```\n\n- 静态内部类\n如果觉得饿汉式占内存，懒汉式又要考虑多线程问题，那么可以使用静态内部类可能是你想要的：\n\n```\npublic class Singleton {\n\t\n\tprivate Singleton(){\n\t\t\n\t}\n\tpublic Singleton getInstance(){\n\t\treturn Holder.instance;\n\t}\n\tprivate class Holder{\n\t\tprivate  static final  Singleton instance = new Singleton();\n\t}\n}\n```\n*静态内部类避免了加载Singleton类时就初始化问题，只有在调用getInstance时才会致使Holder类被加载并初始化，同时也避免了线程安全问题和性能问题，推荐使用此方法。*\n\n- 枚举式\n  如果觉得上面的还是麻烦，可以使用枚举单例，\n代码实现：\n\n```\npublic enum EnumSingleton {\n\t\n\tINSTANCE ;\n\t\n\tint num = 33;\n\tString config = \"jenson\";\n\t\n\tpublic void doSomething(){\n\t\t\n\t}\n}\n```\n*枚举单例也可以有属性可以有方法，重要的是枚举默认就是线程安全的。*","source":"_posts/详解设计模式之单例模式.md","raw":"---\ntitle: 详解设计模式之单例模式\ndate: 2017-04-21 22:22:50\ntags: 设计模式\ncategories: 设计模式\n---\n####1、什么是单例?\n单例顾名思义就是单个实例。日常工作都是自由的通过构造方法创建对象的，所以听到单例时，我们应该意识到其下是暗含了2层意思的，①构造方法不在为你所用，你不需要知道如何创建对象。②我会给你提供获取实例的方法，不需要你自己动手创建。\n\n![单例示意图.png](http://upload-images.jianshu.io/upload_images/1796052-fc54578715942157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n不清楚uml类关系的请移步[UML--类图详解](http://www.jianshu.com/p/bf23234d5d2b)\n####2、\b什么情况下使用单例?\n当你需要内存中只有一个对象的时候。\n\n####3、为什么使用单例？\n单例保证了内存中数据的唯一性，同时也降低了内存的开销。\n####3、\b如何实现单例？\n在1中了解到两层含义后，对我们创建单例类是有帮助的，总结下就是：①私有化构造方法  ②对外提供获取实例方法\n\n- 饿汉式\n所谓饿汉式，就是在类加载的时候就迫不及待的创建对象，等到调用获取实例方法直接拿到对象返回即可。\n看实现代码：\n\n```\npublic class HungarySingleton {\n\tprivate static HungarySingleton intance = new HungarySingleton();\n\t\n\tprivate HungarySingleton(){\n\t\t\n\t}\n\tpublic static HungarySingleton getInstance(){\n\t\treturn intance;\n\t}\n}\n```\n*懒汉式是最简单的单例模式，在类加载的时候就实例化，避免了多线程问题的同时保证了实例唯一性。缺点是即使不需要时候也会被实例，会占用内存。所以推荐在实例占用内存不多的情况下使用，否则请使用下面几种方式。*\n\n- 懒汉式\n懒汉式，就是在首次调用的时候才会创建实例，相比饿汉式，延迟了初始化。\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tinstance = new LayzySingleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n上面代码有个问题，就是在多线程调用中会有产生多个实例的隐患，所以需要使用线程同步：\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic synchronized LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tinstance = new LayzySingleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n*synchronized的加入虽然解决了多实例的隐患，但是又带来了性能低下的问题，因为我们只需要在首次创建对象时让同步产生作用即可，其后的调用无需同步，现在只要是调用该方法就同步，看来还需要改进*\n下面使用双重校验加锁(DCL)：\n\n```\npublic class LayzySingleton {\n\tprivate static LayzySingleton instance = null;\n\n\tprivate LayzySingleton() {\n\n\t}\n\tpublic  LayzySingleton getInstatnce() {\n\t\tif (null == instance) {\n\t\t\tsynchronized(LayzySingleton.class){\n\t\t\t\tif (null == instance) {\n\t\t\t\t\tinstance = new LayzySingleton();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n现在多线程问题解决了，性能也得到优化了是不是双重校验加锁就完美了呢？\nNO~\n在Java并发编程中的指令重排序中有讲到双重校验加锁失效问题。\n要禁止指令重排序需要使用volatile修饰变量\n\n\n```\n\tprivate volatile static LayzySingleton instance = null;\n```\n\n- 静态内部类\n如果觉得饿汉式占内存，懒汉式又要考虑多线程问题，那么可以使用静态内部类可能是你想要的：\n\n```\npublic class Singleton {\n\t\n\tprivate Singleton(){\n\t\t\n\t}\n\tpublic Singleton getInstance(){\n\t\treturn Holder.instance;\n\t}\n\tprivate class Holder{\n\t\tprivate  static final  Singleton instance = new Singleton();\n\t}\n}\n```\n*静态内部类避免了加载Singleton类时就初始化问题，只有在调用getInstance时才会致使Holder类被加载并初始化，同时也避免了线程安全问题和性能问题，推荐使用此方法。*\n\n- 枚举式\n  如果觉得上面的还是麻烦，可以使用枚举单例，\n代码实现：\n\n```\npublic enum EnumSingleton {\n\t\n\tINSTANCE ;\n\t\n\tint num = 33;\n\tString config = \"jenson\";\n\t\n\tpublic void doSomething(){\n\t\t\n\t}\n}\n```\n*枚举单例也可以有属性可以有方法，重要的是枚举默认就是线程安全的。*","slug":"详解设计模式之单例模式","published":1,"updated":"2017-04-22T10:32:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7p6004a449cruecsjei","content":"<p>####1、什么是单例?<br>单例顾名思义就是单个实例。日常工作都是自由的通过构造方法创建对象的，所以听到单例时，我们应该意识到其下是暗含了2层意思的，①构造方法不在为你所用，你不需要知道如何创建对象。②我会给你提供获取实例的方法，不需要你自己动手创建。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fc54578715942157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单例示意图.png\"></p>\n<p>不清楚uml类关系的请移步<a href=\"http://www.jianshu.com/p/bf23234d5d2b\" target=\"_blank\" rel=\"external\">UML–类图详解</a></p>\n<p>####2、\b什么情况下使用单例?<br>当你需要内存中只有一个对象的时候。</p>\n<p>####3、为什么使用单例？<br>单例保证了内存中数据的唯一性，同时也降低了内存的开销。</p>\n<p>####3、\b如何实现单例？<br>在1中了解到两层含义后，对我们创建单例类是有帮助的，总结下就是：①私有化构造方法  ②对外提供获取实例方法</p>\n<ul>\n<li>饿汉式<br>所谓饿汉式，就是在类加载的时候就迫不及待的创建对象，等到调用获取实例方法直接拿到对象返回即可。<br>看实现代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HungarySingleton &#123;</div><div class=\"line\">\tprivate static HungarySingleton intance = new HungarySingleton();</div><div class=\"line\">\t</div><div class=\"line\">\tprivate HungarySingleton()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static HungarySingleton getInstance()&#123;</div><div class=\"line\">\t\treturn intance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>懒汉式是最简单的单例模式，在类加载的时候就实例化，避免了多线程问题的同时保证了实例唯一性。缺点是即使不需要时候也会被实例，会占用内存。所以推荐在实例占用内存不多的情况下使用，否则请使用下面几种方式。</em></p>\n<ul>\n<li>懒汉式<br>懒汉式，就是在首次调用的时候才会创建实例，相比饿汉式，延迟了初始化。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码有个问题，就是在多线程调用中会有产生多个实例的隐患，所以需要使用线程同步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic synchronized LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>synchronized的加入虽然解决了多实例的隐患，但是又带来了性能低下的问题，因为我们只需要在首次创建对象时让同步产生作用即可，其后的调用无需同步，现在只要是调用该方法就同步，看来还需要改进</em><br>下面使用双重校验加锁(DCL)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic  LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tsynchronized(LayzySingleton.class)&#123;</div><div class=\"line\">\t\t\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在多线程问题解决了，性能也得到优化了是不是双重校验加锁就完美了呢？<br>NO~<br>在Java并发编程中的指令重排序中有讲到双重校验加锁失效问题。<br>要禁止指令重排序需要使用volatile修饰变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private volatile static LayzySingleton instance = null;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类<br>如果觉得饿汉式占内存，懒汉式又要考虑多线程问题，那么可以使用静态内部类可能是你想要的：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Singleton()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic Singleton getInstance()&#123;</div><div class=\"line\">\t\treturn Holder.instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprivate class Holder&#123;</div><div class=\"line\">\t\tprivate  static final  Singleton instance = new Singleton();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>静态内部类避免了加载Singleton类时就初始化问题，只有在调用getInstance时才会致使Holder类被加载并初始化，同时也避免了线程安全问题和性能问题，推荐使用此方法。</em></p>\n<ul>\n<li>枚举式<br>如果觉得上面的还是麻烦，可以使用枚举单例，<br>代码实现：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum EnumSingleton &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tINSTANCE ;</div><div class=\"line\">\t</div><div class=\"line\">\tint num = 33;</div><div class=\"line\">\tString config = &quot;jenson&quot;;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void doSomething()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>枚举单例也可以有属性可以有方法，重要的是枚举默认就是线程安全的。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####1、什么是单例?<br>单例顾名思义就是单个实例。日常工作都是自由的通过构造方法创建对象的，所以听到单例时，我们应该意识到其下是暗含了2层意思的，①构造方法不在为你所用，你不需要知道如何创建对象。②我会给你提供获取实例的方法，不需要你自己动手创建。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-fc54578715942157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"单例示意图.png\"></p>\n<p>不清楚uml类关系的请移步<a href=\"http://www.jianshu.com/p/bf23234d5d2b\">UML–类图详解</a></p>\n<p>####2、\b什么情况下使用单例?<br>当你需要内存中只有一个对象的时候。</p>\n<p>####3、为什么使用单例？<br>单例保证了内存中数据的唯一性，同时也降低了内存的开销。</p>\n<p>####3、\b如何实现单例？<br>在1中了解到两层含义后，对我们创建单例类是有帮助的，总结下就是：①私有化构造方法  ②对外提供获取实例方法</p>\n<ul>\n<li>饿汉式<br>所谓饿汉式，就是在类加载的时候就迫不及待的创建对象，等到调用获取实例方法直接拿到对象返回即可。<br>看实现代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HungarySingleton &#123;</div><div class=\"line\">\tprivate static HungarySingleton intance = new HungarySingleton();</div><div class=\"line\">\t</div><div class=\"line\">\tprivate HungarySingleton()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static HungarySingleton getInstance()&#123;</div><div class=\"line\">\t\treturn intance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>懒汉式是最简单的单例模式，在类加载的时候就实例化，避免了多线程问题的同时保证了实例唯一性。缺点是即使不需要时候也会被实例，会占用内存。所以推荐在实例占用内存不多的情况下使用，否则请使用下面几种方式。</em></p>\n<ul>\n<li>懒汉式<br>懒汉式，就是在首次调用的时候才会创建实例，相比饿汉式，延迟了初始化。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码有个问题，就是在多线程调用中会有产生多个实例的隐患，所以需要使用线程同步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic synchronized LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>synchronized的加入虽然解决了多实例的隐患，但是又带来了性能低下的问题，因为我们只需要在首次创建对象时让同步产生作用即可，其后的调用无需同步，现在只要是调用该方法就同步，看来还需要改进</em><br>下面使用双重校验加锁(DCL)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class LayzySingleton &#123;</div><div class=\"line\">\tprivate static LayzySingleton instance = null;</div><div class=\"line\"></div><div class=\"line\">\tprivate LayzySingleton() &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic  LayzySingleton getInstatnce() &#123;</div><div class=\"line\">\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\tsynchronized(LayzySingleton.class)&#123;</div><div class=\"line\">\t\t\t\tif (null == instance) &#123;</div><div class=\"line\">\t\t\t\t\tinstance = new LayzySingleton();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在多线程问题解决了，性能也得到优化了是不是双重校验加锁就完美了呢？<br>NO~<br>在Java并发编程中的指令重排序中有讲到双重校验加锁失效问题。<br>要禁止指令重排序需要使用volatile修饰变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private volatile static LayzySingleton instance = null;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态内部类<br>如果觉得饿汉式占内存，懒汉式又要考虑多线程问题，那么可以使用静态内部类可能是你想要的：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Singleton &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate Singleton()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic Singleton getInstance()&#123;</div><div class=\"line\">\t\treturn Holder.instance;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprivate class Holder&#123;</div><div class=\"line\">\t\tprivate  static final  Singleton instance = new Singleton();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>静态内部类避免了加载Singleton类时就初始化问题，只有在调用getInstance时才会致使Holder类被加载并初始化，同时也避免了线程安全问题和性能问题，推荐使用此方法。</em></p>\n<ul>\n<li>枚举式<br>如果觉得上面的还是麻烦，可以使用枚举单例，<br>代码实现：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum EnumSingleton &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tINSTANCE ;</div><div class=\"line\">\t</div><div class=\"line\">\tint num = 33;</div><div class=\"line\">\tString config = &quot;jenson&quot;;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void doSomething()&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>枚举单例也可以有属性可以有方法，重要的是枚举默认就是线程安全的。</em></p>\n"},{"title":"算法查找之二分查找","date":"2017-05-03T14:52:40.000Z","_content":"\n# 实现目标\n\n查看24是否在数组{ 8，14，24，28，30，31，32 }中，\n\n如果在数组中则返回数组元素下标，否则返回-1 。\n\n数组下标从0开始，查找24时最终返回下标2。\n\n# 实现分析\n\n- 说明\n\n  二分法前提是数组是有序的；\n\n  要查找的数我们称为关键值\n\n- 阐述实现\n\n  在一个有序数组中二分查找一个数，数组长度为n。\n\n  1、设置左右下标变量：left，right，初始时left为0，right为n-1。\n\n  2、求出中间下标，得到中间数\n\n  3、如果中间数等于关键值则直接返回下标，\n\n  ​\t如果中间数大于关键值则 right为中间下标-1\n\n  ​\t如果中间数小于关键值则 left为中间下标+1\n\n  4、如果未结束，则重复步骤2和3，重复的前提是不管left和right的值\t\t\t如何改变，都要保证left<right。\n\n- 阐述转换通用代码\n\n  步骤1：` int left=0,right =n-1;`\n\n  步骤4中说重复2和3步，说明这是一个循环，循环条件是left<right，\n\n  所以使用` while(left<right)`\n\n\n\n# 代码实现\n\n```\n\tpublic static int binarySearch(int[] arr, int key) {\n\t\tint left = 0, right = arr.length - 1;\n\t\twhile (left < right) {\n\t\t\tint mid = (left + right) >> 1;\n\t\t\tif (arr[mid] == key) {\n\t\t\t\treturn mid;\n\t\t\t} else if (arr[mid] > key) {\n\t\t\t\tright = mid - 1;\n\t\t\t} else {\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n```\n\n","source":"_posts/算法查找之二分查找.md","raw":"---\ntitle: 算法查找之二分查找\ndate: 2017-05-03 22:52:40\ntags: 算法\ncategories: 算法\n---\n\n# 实现目标\n\n查看24是否在数组{ 8，14，24，28，30，31，32 }中，\n\n如果在数组中则返回数组元素下标，否则返回-1 。\n\n数组下标从0开始，查找24时最终返回下标2。\n\n# 实现分析\n\n- 说明\n\n  二分法前提是数组是有序的；\n\n  要查找的数我们称为关键值\n\n- 阐述实现\n\n  在一个有序数组中二分查找一个数，数组长度为n。\n\n  1、设置左右下标变量：left，right，初始时left为0，right为n-1。\n\n  2、求出中间下标，得到中间数\n\n  3、如果中间数等于关键值则直接返回下标，\n\n  ​\t如果中间数大于关键值则 right为中间下标-1\n\n  ​\t如果中间数小于关键值则 left为中间下标+1\n\n  4、如果未结束，则重复步骤2和3，重复的前提是不管left和right的值\t\t\t如何改变，都要保证left<right。\n\n- 阐述转换通用代码\n\n  步骤1：` int left=0,right =n-1;`\n\n  步骤4中说重复2和3步，说明这是一个循环，循环条件是left<right，\n\n  所以使用` while(left<right)`\n\n\n\n# 代码实现\n\n```\n\tpublic static int binarySearch(int[] arr, int key) {\n\t\tint left = 0, right = arr.length - 1;\n\t\twhile (left < right) {\n\t\t\tint mid = (left + right) >> 1;\n\t\t\tif (arr[mid] == key) {\n\t\t\t\treturn mid;\n\t\t\t} else if (arr[mid] > key) {\n\t\t\t\tright = mid - 1;\n\t\t\t} else {\n\t\t\t\tleft = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n```\n\n","slug":"算法查找之二分查找","published":1,"updated":"2017-05-03T16:14:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7pd004d449cw33xotzw","content":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>查看24是否在数组{ 8，14，24，28，30，31，32 }中，</p>\n<p>如果在数组中则返回数组元素下标，否则返回-1 。</p>\n<p>数组下标从0开始，查找24时最终返回下标2。</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><ul>\n<li><p>说明</p>\n<p>二分法前提是数组是有序的；</p>\n<p>要查找的数我们称为关键值</p>\n</li>\n<li><p>阐述实现</p>\n<p>在一个有序数组中二分查找一个数，数组长度为n。</p>\n<p>1、设置左右下标变量：left，right，初始时left为0，right为n-1。</p>\n<p>2、求出中间下标，得到中间数</p>\n<p>3、如果中间数等于关键值则直接返回下标，</p>\n<p>​    如果中间数大于关键值则 right为中间下标-1</p>\n<p>​    如果中间数小于关键值则 left为中间下标+1</p>\n<p>4、如果未结束，则重复步骤2和3，重复的前提是不管left和right的值            如何改变，都要保证left&lt;right。</p>\n</li>\n<li><p>阐述转换通用代码</p>\n<p>步骤1：<code>int left=0,right =n-1;</code></p>\n<p>步骤4中说重复2和3步，说明这是一个循环，循环条件是left&lt;right，</p>\n<p>所以使用<code>while(left&lt;right)</code></p>\n</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int binarySearch(int[] arr, int key) &#123;</div><div class=\"line\">\tint left = 0, right = arr.length - 1;</div><div class=\"line\">\twhile (left &lt; right) &#123;</div><div class=\"line\">\t\tint mid = (left + right) &gt;&gt; 1;</div><div class=\"line\">\t\tif (arr[mid] == key) &#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else if (arr[mid] &gt; key) &#123;</div><div class=\"line\">\t\t\tright = mid - 1;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tleft = mid + 1;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn -1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>查看24是否在数组{ 8，14，24，28，30，31，32 }中，</p>\n<p>如果在数组中则返回数组元素下标，否则返回-1 。</p>\n<p>数组下标从0开始，查找24时最终返回下标2。</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><ul>\n<li><p>说明</p>\n<p>二分法前提是数组是有序的；</p>\n<p>要查找的数我们称为关键值</p>\n</li>\n<li><p>阐述实现</p>\n<p>在一个有序数组中二分查找一个数，数组长度为n。</p>\n<p>1、设置左右下标变量：left，right，初始时left为0，right为n-1。</p>\n<p>2、求出中间下标，得到中间数</p>\n<p>3、如果中间数等于关键值则直接返回下标，</p>\n<p>​    如果中间数大于关键值则 right为中间下标-1</p>\n<p>​    如果中间数小于关键值则 left为中间下标+1</p>\n<p>4、如果未结束，则重复步骤2和3，重复的前提是不管left和right的值            如何改变，都要保证left&lt;right。</p>\n</li>\n<li><p>阐述转换通用代码</p>\n<p>步骤1：<code>int left=0,right =n-1;</code></p>\n<p>步骤4中说重复2和3步，说明这是一个循环，循环条件是left&lt;right，</p>\n<p>所以使用<code>while(left&lt;right)</code></p>\n</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int binarySearch(int[] arr, int key) &#123;</div><div class=\"line\">\tint left = 0, right = arr.length - 1;</div><div class=\"line\">\twhile (left &lt; right) &#123;</div><div class=\"line\">\t\tint mid = (left + right) &gt;&gt; 1;</div><div class=\"line\">\t\tif (arr[mid] == key) &#123;</div><div class=\"line\">\t\t\treturn mid;</div><div class=\"line\">\t\t&#125; else if (arr[mid] &gt; key) &#123;</div><div class=\"line\">\t\t\tright = mid - 1;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\tleft = mid + 1;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn -1;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"详解设计模式之简单工厂模式","date":"2017-04-21T14:22:50.000Z","_content":"####1、什么是简单工厂模式？\n把一些相关类的对象的创建封装在另一个类中，这样在上层的客户端不需要明白相关类对象是如何创建的，只需要调用另一个类的相关方法获取实例即可。另一个类就是所说的工厂类。为了避免每次使用工厂时都创建工厂实例，获取相关类实例的方法一般使用静态方法，所以简单工厂一般也叫静态工厂。\n\n####2、\b什么时候使用工厂模式？\n当你要对上层隐藏一些对象从而达到解耦的效果时可以使用简单工厂。\n####3、\b如何使用工厂模式？\n- 先看下不使用模式如何创建接口实例\n\n![不使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-6f2ed596ea68547b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n汽车接口代码：\n```\npublic interface CarApi {\n\tpublic void run();\n}\n```\n起亚汽车实现代码：\n\n```\npublic class KiaImpl implements CarApi {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"起亚跑起来\");\n\t}\n\n}\n```\n客户端代码：\n\n\n```\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tCarApi carApi = new KiaImpl();\n\t\tcarApi.run();\n\t}\n}\n```  \n如上，不使用模式的时候，客户端不仅依赖接口，更知道了接口的实现类是KiaImpl。要知道Java面向接口编程就是为了封装隔离，达到解耦模块的目的。这里虽然使用了接口，但是充其量只用到了其多态，至于封装隔离还是没影的事儿。\n- 看下使用简单工厂是如何实现的\n\n![使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-cc51abbba4547d5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n汽车接口和起亚实现代码如上不变，宝马实现代码如下：\n\n```\npublic class BmwImpl implements CarApi {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"宝马跑起来\");\n\t}\n\n}\n```\n汽车工厂代码如下：\n\n```\npublic class CarFactory {\n\tpublic static CarApi getCar(int type) {\n\t\tCarApi car;\n\t\tif (type == 0) {\n\t\t\tcar = new KiaImpl();\n\t\t} else {\n\t\t\tcar = new BmwImpl();\n\t\t}\n\t\treturn car;\n\t}\n}\n```\n客户端代码如下：\n\n```\n public class Client {\n\tpublic static void main(String[] args) {\n//\t\tCarApi carApi = new KiaImpl();\n//\t\tcarApi.run();\n\t\tCarApi kia = CarFactory.getCar(0);\n\t\tkia.run();\n\t\tCarApi bmw = CarFactory.getCar(1);\n\t\tbmw.run();\n\t}\n}\n```\n\n通过客户端代码可知，把实现类封装在工厂后，客户端只需要调用工厂静态方法就能拿到实现类实例，而不需要知道这些实现类是如何创建实现的，达到了解耦的目的。\n\n有一点要注意：如果接口有多个实现类，在工厂中如何确定想要获取哪个实例？这时就要在静态方法中传入参数，这时客户端就要知道参数类型代表的意思。所以此时底层要向上层暴露一些信息以供使用。","source":"_posts/详解设计模式之简单工厂模式.md","raw":"---\ntitle: 详解设计模式之简单工厂模式\ndate: 2017-04-21 22:22:50\ntags: 设计模式\ncategories: 设计模式\n---\n####1、什么是简单工厂模式？\n把一些相关类的对象的创建封装在另一个类中，这样在上层的客户端不需要明白相关类对象是如何创建的，只需要调用另一个类的相关方法获取实例即可。另一个类就是所说的工厂类。为了避免每次使用工厂时都创建工厂实例，获取相关类实例的方法一般使用静态方法，所以简单工厂一般也叫静态工厂。\n\n####2、\b什么时候使用工厂模式？\n当你要对上层隐藏一些对象从而达到解耦的效果时可以使用简单工厂。\n####3、\b如何使用工厂模式？\n- 先看下不使用模式如何创建接口实例\n\n![不使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-6f2ed596ea68547b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n汽车接口代码：\n```\npublic interface CarApi {\n\tpublic void run();\n}\n```\n起亚汽车实现代码：\n\n```\npublic class KiaImpl implements CarApi {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"起亚跑起来\");\n\t}\n\n}\n```\n客户端代码：\n\n\n```\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tCarApi carApi = new KiaImpl();\n\t\tcarApi.run();\n\t}\n}\n```  \n如上，不使用模式的时候，客户端不仅依赖接口，更知道了接口的实现类是KiaImpl。要知道Java面向接口编程就是为了封装隔离，达到解耦模块的目的。这里虽然使用了接口，但是充其量只用到了其多态，至于封装隔离还是没影的事儿。\n- 看下使用简单工厂是如何实现的\n\n![使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-cc51abbba4547d5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n汽车接口和起亚实现代码如上不变，宝马实现代码如下：\n\n```\npublic class BmwImpl implements CarApi {\n\n\t@Override\n\tpublic void run() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"宝马跑起来\");\n\t}\n\n}\n```\n汽车工厂代码如下：\n\n```\npublic class CarFactory {\n\tpublic static CarApi getCar(int type) {\n\t\tCarApi car;\n\t\tif (type == 0) {\n\t\t\tcar = new KiaImpl();\n\t\t} else {\n\t\t\tcar = new BmwImpl();\n\t\t}\n\t\treturn car;\n\t}\n}\n```\n客户端代码如下：\n\n```\n public class Client {\n\tpublic static void main(String[] args) {\n//\t\tCarApi carApi = new KiaImpl();\n//\t\tcarApi.run();\n\t\tCarApi kia = CarFactory.getCar(0);\n\t\tkia.run();\n\t\tCarApi bmw = CarFactory.getCar(1);\n\t\tbmw.run();\n\t}\n}\n```\n\n通过客户端代码可知，把实现类封装在工厂后，客户端只需要调用工厂静态方法就能拿到实现类实例，而不需要知道这些实现类是如何创建实现的，达到了解耦的目的。\n\n有一点要注意：如果接口有多个实现类，在工厂中如何确定想要获取哪个实例？这时就要在静态方法中传入参数，这时客户端就要知道参数类型代表的意思。所以此时底层要向上层暴露一些信息以供使用。","slug":"详解设计模式之简单工厂模式","published":1,"updated":"2017-04-22T10:34:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7ph004i449ctuvrmok3","content":"<p>####1、什么是简单工厂模式？<br>把一些相关类的对象的创建封装在另一个类中，这样在上层的客户端不需要明白相关类对象是如何创建的，只需要调用另一个类的相关方法获取实例即可。另一个类就是所说的工厂类。为了避免每次使用工厂时都创建工厂实例，获取相关类实例的方法一般使用静态方法，所以简单工厂一般也叫静态工厂。</p>\n<p>####2、\b什么时候使用工厂模式？<br>当你要对上层隐藏一些对象从而达到解耦的效果时可以使用简单工厂。</p>\n<p>####3、\b如何使用工厂模式？</p>\n<ul>\n<li>先看下不使用模式如何创建接口实例</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6f2ed596ea68547b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"不使用模式.png\"><br>汽车接口代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface CarApi &#123;</div><div class=\"line\">\tpublic void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>起亚汽车实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class KiaImpl implements CarApi &#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tSystem.out.println(&quot;起亚跑起来&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Client &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tCarApi carApi = new KiaImpl();</div><div class=\"line\">\t\tcarApi.run();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">```  </div><div class=\"line\">如上，不使用模式的时候，客户端不仅依赖接口，更知道了接口的实现类是KiaImpl。要知道Java面向接口编程就是为了封装隔离，达到解耦模块的目的。这里虽然使用了接口，但是充其量只用到了其多态，至于封装隔离还是没影的事儿。</div><div class=\"line\">- 看下使用简单工厂是如何实现的</div><div class=\"line\"></div><div class=\"line\">![使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-cc51abbba4547d5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\">汽车接口和起亚实现代码如上不变，宝马实现代码如下：</div></pre></td></tr></table></figure>\n<p>public class BmwImpl implements CarApi {</p>\n<pre><code>@Override\npublic void run() {\n    // TODO Auto-generated method stub\n    System.out.println(&quot;宝马跑起来&quot;);\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">汽车工厂代码如下：</div></pre></td></tr></table></figure></p>\n<p>public class CarFactory {<br>    public static CarApi getCar(int type) {<br>        CarApi car;<br>        if (type == 0) {<br>            car = new KiaImpl();<br>        } else {<br>            car = new BmwImpl();<br>        }<br>        return car;<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端代码如下：</div></pre></td></tr></table></figure></p>\n<p> public class Client {<br>    public static void main(String[] args) {<br>//        CarApi carApi = new KiaImpl();<br>//        carApi.run();<br>        CarApi kia = CarFactory.getCar(0);<br>        kia.run();<br>        CarApi bmw = CarFactory.getCar(1);<br>        bmw.run();<br>    }<br>}<br>```</p>\n<p>通过客户端代码可知，把实现类封装在工厂后，客户端只需要调用工厂静态方法就能拿到实现类实例，而不需要知道这些实现类是如何创建实现的，达到了解耦的目的。</p>\n<p>有一点要注意：如果接口有多个实现类，在工厂中如何确定想要获取哪个实例？这时就要在静态方法中传入参数，这时客户端就要知道参数类型代表的意思。所以此时底层要向上层暴露一些信息以供使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>####1、什么是简单工厂模式？<br>把一些相关类的对象的创建封装在另一个类中，这样在上层的客户端不需要明白相关类对象是如何创建的，只需要调用另一个类的相关方法获取实例即可。另一个类就是所说的工厂类。为了避免每次使用工厂时都创建工厂实例，获取相关类实例的方法一般使用静态方法，所以简单工厂一般也叫静态工厂。</p>\n<p>####2、\b什么时候使用工厂模式？<br>当你要对上层隐藏一些对象从而达到解耦的效果时可以使用简单工厂。</p>\n<p>####3、\b如何使用工厂模式？</p>\n<ul>\n<li>先看下不使用模式如何创建接口实例</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1796052-6f2ed596ea68547b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"不使用模式.png\"><br>汽车接口代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface CarApi &#123;</div><div class=\"line\">\tpublic void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>起亚汽车实现代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class KiaImpl implements CarApi &#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tSystem.out.println(&quot;起亚跑起来&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Client &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tCarApi carApi = new KiaImpl();</div><div class=\"line\">\t\tcarApi.run();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">```  </div><div class=\"line\">如上，不使用模式的时候，客户端不仅依赖接口，更知道了接口的实现类是KiaImpl。要知道Java面向接口编程就是为了封装隔离，达到解耦模块的目的。这里虽然使用了接口，但是充其量只用到了其多态，至于封装隔离还是没影的事儿。</div><div class=\"line\">- 看下使用简单工厂是如何实现的</div><div class=\"line\"></div><div class=\"line\">![使用模式.png](http://upload-images.jianshu.io/upload_images/1796052-cc51abbba4547d5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class=\"line\">汽车接口和起亚实现代码如上不变，宝马实现代码如下：</div></pre></td></tr></table></figure>\n<p>public class BmwImpl implements CarApi {</p>\n<pre><code>@Override\npublic void run() {\n    // TODO Auto-generated method stub\n    System.out.println(&quot;宝马跑起来&quot;);\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">汽车工厂代码如下：</div></pre></td></tr></table></figure></p>\n<p>public class CarFactory {<br>    public static CarApi getCar(int type) {<br>        CarApi car;<br>        if (type == 0) {<br>            car = new KiaImpl();<br>        } else {<br>            car = new BmwImpl();<br>        }<br>        return car;<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">客户端代码如下：</div></pre></td></tr></table></figure></p>\n<p> public class Client {<br>    public static void main(String[] args) {<br>//        CarApi carApi = new KiaImpl();<br>//        carApi.run();<br>        CarApi kia = CarFactory.getCar(0);<br>        kia.run();<br>        CarApi bmw = CarFactory.getCar(1);<br>        bmw.run();<br>    }<br>}<br>```</p>\n<p>通过客户端代码可知，把实现类封装在工厂后，客户端只需要调用工厂静态方法就能拿到实现类实例，而不需要知道这些实现类是如何创建实现的，达到了解耦的目的。</p>\n<p>有一点要注意：如果接口有多个实现类，在工厂中如何确定想要获取哪个实例？这时就要在静态方法中传入参数，这时客户端就要知道参数类型代表的意思。所以此时底层要向上层暴露一些信息以供使用。</p>\n"},{"title":"算法排序之交换排序","date":"2017-05-03T13:04:13.000Z","_content":"\n# 实现目标\n\n本例中希望通过交换排序，使得数组最终按非递减顺序排列。\n\n数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }\n\n数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }\n\n# 实现分析\n\n- 说明\n\n  希望数组按非递减顺序排列，我们可以得到两点消息：1、数组中可能会有重复的元素，所以才说是非递减。2、排序后第一个元素是最小值 ，最后一个元素是最大值。\n\n- 阐述实现\n\n  第一轮，第一个元素分别与后面的每个元素比较，如果大于后面的元素则进行交换，把较小值交换到第一个元素位置，本轮结束后的第一个元素就是数组中最小值。\n\n  第二轮，由于第一轮的第一个元素已经求出了最小值，所以第二轮从第二个元素开始，与后面的每个元素分别比较，如果大于后面的元素则进行交换，把较小值交换到第二个元素位置，本轮结束后的第二个元素就是数组中倒数第二小的值。\n\n  以此类推，进行n-1轮比较，n为数组长度。之所以是n-1轮而不是n轮，是因为第i轮的i个元素要和后面的元素进行比较，如果是n轮，它本身就是最后的元素，不需要比较了。\n\n- 阐述转换通用代码\n\n  交换方法提取：\n\n  ```\n  void swap(int[] arr, int i,int j){\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp ;\n  }\n  ```\n\n  第一轮：\n\n  ```\n  int i=0；\n  for(int j=i+1;j<n;j++){\n    if(arr[i]>arr[j]){\n      swap(arr,i,j);\n    }\n  }\n  ```\n\n  第二轮：\n\n  ```\n  int i=1；\n  for(int j=i+1;j<n;j++){\n    if(arr[i]>arr[j]){\n      swap(arr,i,j);\n    }\n  }\n  ```\n\n  每轮遍历出一个当前未排序中最小值，以此类推，遍历n-1轮：\n\n  ```\n  for(int i=0;i<n-1;i++){\n    \n  }\n  ```\n\n  ​\n\n\n\n# 代码实现\n\n```\n\tpublic static void swapSort(int[] arr) {\n\t\tint length = arr.length;\n\t\tfor (int i = 0; i < length-1 ; i++) {\n\t\t\tfor (int j = i + 1; j < length; j++) {\n\t\t\t\tif (arr[i] >  arr[j]) {\n\t\t\t\t\tint tmp = arr[i];\n\t\t\t\t\tarr[i] = arr[j];\n\t\t\t\t\tarr[j] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n","source":"_posts/算法排序之交换排序.md","raw":"---\ntitle: 算法排序之交换排序\ndate: 2017-05-03 21:04:13\ntags: 算法\ncategories: 算法\n---\n\n# 实现目标\n\n本例中希望通过交换排序，使得数组最终按非递减顺序排列。\n\n数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }\n\n数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }\n\n# 实现分析\n\n- 说明\n\n  希望数组按非递减顺序排列，我们可以得到两点消息：1、数组中可能会有重复的元素，所以才说是非递减。2、排序后第一个元素是最小值 ，最后一个元素是最大值。\n\n- 阐述实现\n\n  第一轮，第一个元素分别与后面的每个元素比较，如果大于后面的元素则进行交换，把较小值交换到第一个元素位置，本轮结束后的第一个元素就是数组中最小值。\n\n  第二轮，由于第一轮的第一个元素已经求出了最小值，所以第二轮从第二个元素开始，与后面的每个元素分别比较，如果大于后面的元素则进行交换，把较小值交换到第二个元素位置，本轮结束后的第二个元素就是数组中倒数第二小的值。\n\n  以此类推，进行n-1轮比较，n为数组长度。之所以是n-1轮而不是n轮，是因为第i轮的i个元素要和后面的元素进行比较，如果是n轮，它本身就是最后的元素，不需要比较了。\n\n- 阐述转换通用代码\n\n  交换方法提取：\n\n  ```\n  void swap(int[] arr, int i,int j){\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp ;\n  }\n  ```\n\n  第一轮：\n\n  ```\n  int i=0；\n  for(int j=i+1;j<n;j++){\n    if(arr[i]>arr[j]){\n      swap(arr,i,j);\n    }\n  }\n  ```\n\n  第二轮：\n\n  ```\n  int i=1；\n  for(int j=i+1;j<n;j++){\n    if(arr[i]>arr[j]){\n      swap(arr,i,j);\n    }\n  }\n  ```\n\n  每轮遍历出一个当前未排序中最小值，以此类推，遍历n-1轮：\n\n  ```\n  for(int i=0;i<n-1;i++){\n    \n  }\n  ```\n\n  ​\n\n\n\n# 代码实现\n\n```\n\tpublic static void swapSort(int[] arr) {\n\t\tint length = arr.length;\n\t\tfor (int i = 0; i < length-1 ; i++) {\n\t\t\tfor (int j = i + 1; j < length; j++) {\n\t\t\t\tif (arr[i] >  arr[j]) {\n\t\t\t\t\tint tmp = arr[i];\n\t\t\t\t\tarr[i] = arr[j];\n\t\t\t\t\tarr[j] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n","slug":"算法排序之交换排序","published":1,"updated":"2017-05-03T14:27:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7pm004l449c2nmxuadm","content":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>本例中希望通过交换排序，使得数组最终按非递减顺序排列。</p>\n<p>数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }</p>\n<p>数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><ul>\n<li><p>说明</p>\n<p>希望数组按非递减顺序排列，我们可以得到两点消息：1、数组中可能会有重复的元素，所以才说是非递减。2、排序后第一个元素是最小值 ，最后一个元素是最大值。</p>\n</li>\n<li><p>阐述实现</p>\n<p>第一轮，第一个元素分别与后面的每个元素比较，如果大于后面的元素则进行交换，把较小值交换到第一个元素位置，本轮结束后的第一个元素就是数组中最小值。</p>\n<p>第二轮，由于第一轮的第一个元素已经求出了最小值，所以第二轮从第二个元素开始，与后面的每个元素分别比较，如果大于后面的元素则进行交换，把较小值交换到第二个元素位置，本轮结束后的第二个元素就是数组中倒数第二小的值。</p>\n<p>以此类推，进行n-1轮比较，n为数组长度。之所以是n-1轮而不是n轮，是因为第i轮的i个元素要和后面的元素进行比较，如果是n轮，它本身就是最后的元素，不需要比较了。</p>\n</li>\n<li><p>阐述转换通用代码</p>\n<p>交换方法提取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">void swap(int[] arr, int i,int j)&#123;</div><div class=\"line\">  int tmp = arr[i];</div><div class=\"line\">  arr[i] = arr[j];</div><div class=\"line\">  arr[j] = tmp ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i=0；</div><div class=\"line\">for(int j=i+1;j&lt;n;j++)&#123;</div><div class=\"line\">  if(arr[i]&gt;arr[j])&#123;</div><div class=\"line\">    swap(arr,i,j);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i=1；</div><div class=\"line\">for(int j=i+1;j&lt;n;j++)&#123;</div><div class=\"line\">  if(arr[i]&gt;arr[j])&#123;</div><div class=\"line\">    swap(arr,i,j);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每轮遍历出一个当前未排序中最小值，以此类推，遍历n-1轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(int i=0;i&lt;n-1;i++)&#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void swapSort(int[] arr) &#123;</div><div class=\"line\">\tint length = arr.length;</div><div class=\"line\">\tfor (int i = 0; i &lt; length-1 ; i++) &#123;</div><div class=\"line\">\t\tfor (int j = i + 1; j &lt; length; j++) &#123;</div><div class=\"line\">\t\t\tif (arr[i] &gt;  arr[j]) &#123;</div><div class=\"line\">\t\t\t\tint tmp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = tmp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>本例中希望通过交换排序，使得数组最终按非递减顺序排列。</p>\n<p>数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }</p>\n<p>数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><ul>\n<li><p>说明</p>\n<p>希望数组按非递减顺序排列，我们可以得到两点消息：1、数组中可能会有重复的元素，所以才说是非递减。2、排序后第一个元素是最小值 ，最后一个元素是最大值。</p>\n</li>\n<li><p>阐述实现</p>\n<p>第一轮，第一个元素分别与后面的每个元素比较，如果大于后面的元素则进行交换，把较小值交换到第一个元素位置，本轮结束后的第一个元素就是数组中最小值。</p>\n<p>第二轮，由于第一轮的第一个元素已经求出了最小值，所以第二轮从第二个元素开始，与后面的每个元素分别比较，如果大于后面的元素则进行交换，把较小值交换到第二个元素位置，本轮结束后的第二个元素就是数组中倒数第二小的值。</p>\n<p>以此类推，进行n-1轮比较，n为数组长度。之所以是n-1轮而不是n轮，是因为第i轮的i个元素要和后面的元素进行比较，如果是n轮，它本身就是最后的元素，不需要比较了。</p>\n</li>\n<li><p>阐述转换通用代码</p>\n<p>交换方法提取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">void swap(int[] arr, int i,int j)&#123;</div><div class=\"line\">  int tmp = arr[i];</div><div class=\"line\">  arr[i] = arr[j];</div><div class=\"line\">  arr[j] = tmp ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i=0；</div><div class=\"line\">for(int j=i+1;j&lt;n;j++)&#123;</div><div class=\"line\">  if(arr[i]&gt;arr[j])&#123;</div><div class=\"line\">    swap(arr,i,j);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i=1；</div><div class=\"line\">for(int j=i+1;j&lt;n;j++)&#123;</div><div class=\"line\">  if(arr[i]&gt;arr[j])&#123;</div><div class=\"line\">    swap(arr,i,j);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每轮遍历出一个当前未排序中最小值，以此类推，遍历n-1轮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(int i=0;i&lt;n-1;i++)&#123;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void swapSort(int[] arr) &#123;</div><div class=\"line\">\tint length = arr.length;</div><div class=\"line\">\tfor (int i = 0; i &lt; length-1 ; i++) &#123;</div><div class=\"line\">\t\tfor (int j = i + 1; j &lt; length; j++) &#123;</div><div class=\"line\">\t\t\tif (arr[i] &gt;  arr[j]) &#123;</div><div class=\"line\">\t\t\t\tint tmp = arr[i];</div><div class=\"line\">\t\t\t\tarr[i] = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = tmp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"详解设计模式之责任链模式","date":"2017-05-10T04:36:14.000Z","_content":"\n# 说在前面的话\n\n责任链模式也叫职责链，抛开设计模式不谈，单看“责任链”这三个字，关注点一下子就放到了“链”字上了。链即锁链、链条，像链子一样环环相扣的东西。比如我们数据结构中的链表，当前对象持有下一个对象的地址。同样，设计模式中的责任链也是如此，任务一环套一环，环环相扣。\n\n# 面试流程分析\n\n作为技术人员离职再就业少不了要面试的，那么我们就拿面试流程来细说。假设面试流程分为三步：组长面试，CTO面试，HR终面，一共三面。\n\n## 不考虑其他任何方面的优化，一个人的面试如何实现？\n\n```\n\t//面试类\n\tstatic class Viewer {\n\t\tpublic void interview(int level) {\n\n\t\t\tif (0 == level) {// 组长面试\n\t\t\t\t// TODO\n\t\t\t} else if (1 == level) {// CTO面试\n\t\t\t\t// TODO\n\t\t\t} else if (2 == level) {// HR终面\n\t\t\t\t// TODO\n\t\t\t}\n\t\t}\n\t}\n```\n\n```\n\t//客户端\n\tpublic static void main(String[] args) {\n\n\t\tViewer viewer = new Viewer();\n\t\tviewer.interview(0);\n\t\tviewer.interview(1);\n\t\tviewer.interview(2);\n\n\t}\n```\n\n从上面实现方式可以看出，面试方法，如果要面试三次，那么客户端要调用三次，面试方法interview中对level判断，不同级别有不同人面试，如果以后增加四面，那么就要修改interview方法。\n\n另外每次的面试 `viewer.interview` 都在客户端调用，但是按照正常流程组长面试完，如果觉得可以，应该流程传递到CTO哪里了，CTO谈完了觉得技术良好，最后交给HR谈待遇，流程抽象提取后是这样：\n\n\n\n![屏幕快照 2017-05-10 下午4.21.27](详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png)\n\n这不就是开头说的“链”吗？\n\n## 下面看看用链如何实现面试的：\n\n\n\n先定义一个链接口来控制面试流程：\n\n```\npublic interface Chain {\n\n\t/**\n\t * 面试方法\n\t * \n\t * @param level\n\t */\n\tvoid interview();\n\n\t/**\n\t * 是否通过\n\t * \n\t * @return\n\t */\n\tboolean isCross();\n\n\t/**\n\t * 下一个面试官\n\t * \n\t * @param chain\n\t */\n\tvoid next(Chain chain);\n}\n```\n\n然后定义组长Grouper、CTO、HR三个面试官类实现Chain接口。\n\n```\n\tstatic class Grouper implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tSystem.out.println(\"组长面试通过\");\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tthis.next = chain;\n\t\t}\n\n\t}\n\n\tstatic class CTO implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tSystem.out.println(\"CTO面试通过\");\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tthis.next = chain;\n\t\t}\n\n\t}\n\n\tstatic class HR implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tSystem.out.println(\"HR面试通过\");\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\n\t}\n```\n\n然后看看客户端调用：\n\n```\n\tpublic static void main(String[] args) {\n\t\tGrouper grouper = new Grouper();\n\t\tCTO cto = new CTO();\n\t\tHR hr = new HR();\n\t\tgrouper.next(cto);\n\t\tcto.next(hr);\n\t\tgrouper.interview();\n\t}\n```\n\n通过` grouper.next(cto);`和`cto.next(hr);` 设置完链式关系，最后只要通过`grouper.interview();` 调用一次面试就可以了。因为grouper最为链首，其中存储了下一个链元素next。只要条件达成（本次面试通过），则自动执行下一个任务，这就是任务链的好处。\n\n可能还有一个疑问：`grouper.next(cto);` 等流程还是在客户端设置的，这无疑要增加了客户端对底层这些类的认知度。\n\n其实完全可以把这些细节隐藏在底层的。比如我们把流程在Grouper构造方法中设置：\n\n```\n\t\tpublic Grouper() {\n\t\t\tCTO cto = new CTO();\n\t\t\tHR hr = new HR();\n\t\t\tnext(cto);\n\t\t\tcto.next(hr);\n\t\t}\n```\n\n这时客户端是如此的简洁：\n\n```\n\tpublic static void main(String[] args) {\n\t\tGrouper grouper = new Grouper();\n\t\tgrouper.interview();\n\t}\n```\n\n其实上面的一般方法还有其他的实现方法，但是无疑常见的实现要么耦合性较强，要么需要客户端对底层认知度高。\n\n说了半天，现在来步入主题看看到底什么是责任链\n\n\n\n# 责任链模式\n\n- 模式出现意图\n\n  让多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象串成一条链，并沿着链传递请求，直到有一个对象处理它或者处理完毕为止。\n\n\n\n- 责任链uml图\n\n![屏幕快照 2017-05-10 下午5.17.19](详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png)\n\n","source":"_posts/详解设计模式之责任链模式.md","raw":"---\ntitle: 详解设计模式之责任链模式\ndate: 2017-05-10 12:36:14\ntags: 设计模式\ncategories: 设计模式\n---\n\n# 说在前面的话\n\n责任链模式也叫职责链，抛开设计模式不谈，单看“责任链”这三个字，关注点一下子就放到了“链”字上了。链即锁链、链条，像链子一样环环相扣的东西。比如我们数据结构中的链表，当前对象持有下一个对象的地址。同样，设计模式中的责任链也是如此，任务一环套一环，环环相扣。\n\n# 面试流程分析\n\n作为技术人员离职再就业少不了要面试的，那么我们就拿面试流程来细说。假设面试流程分为三步：组长面试，CTO面试，HR终面，一共三面。\n\n## 不考虑其他任何方面的优化，一个人的面试如何实现？\n\n```\n\t//面试类\n\tstatic class Viewer {\n\t\tpublic void interview(int level) {\n\n\t\t\tif (0 == level) {// 组长面试\n\t\t\t\t// TODO\n\t\t\t} else if (1 == level) {// CTO面试\n\t\t\t\t// TODO\n\t\t\t} else if (2 == level) {// HR终面\n\t\t\t\t// TODO\n\t\t\t}\n\t\t}\n\t}\n```\n\n```\n\t//客户端\n\tpublic static void main(String[] args) {\n\n\t\tViewer viewer = new Viewer();\n\t\tviewer.interview(0);\n\t\tviewer.interview(1);\n\t\tviewer.interview(2);\n\n\t}\n```\n\n从上面实现方式可以看出，面试方法，如果要面试三次，那么客户端要调用三次，面试方法interview中对level判断，不同级别有不同人面试，如果以后增加四面，那么就要修改interview方法。\n\n另外每次的面试 `viewer.interview` 都在客户端调用，但是按照正常流程组长面试完，如果觉得可以，应该流程传递到CTO哪里了，CTO谈完了觉得技术良好，最后交给HR谈待遇，流程抽象提取后是这样：\n\n\n\n![屏幕快照 2017-05-10 下午4.21.27](详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png)\n\n这不就是开头说的“链”吗？\n\n## 下面看看用链如何实现面试的：\n\n\n\n先定义一个链接口来控制面试流程：\n\n```\npublic interface Chain {\n\n\t/**\n\t * 面试方法\n\t * \n\t * @param level\n\t */\n\tvoid interview();\n\n\t/**\n\t * 是否通过\n\t * \n\t * @return\n\t */\n\tboolean isCross();\n\n\t/**\n\t * 下一个面试官\n\t * \n\t * @param chain\n\t */\n\tvoid next(Chain chain);\n}\n```\n\n然后定义组长Grouper、CTO、HR三个面试官类实现Chain接口。\n\n```\n\tstatic class Grouper implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tSystem.out.println(\"组长面试通过\");\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tthis.next = chain;\n\t\t}\n\n\t}\n\n\tstatic class CTO implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tSystem.out.println(\"CTO面试通过\");\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tthis.next = chain;\n\t\t}\n\n\t}\n\n\tstatic class HR implements Chain {\n\t\tprivate Chain next = null;\n\n\t\t@Override\n\t\tpublic void interview() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tSystem.out.println(\"HR面试通过\");\n\t\t\tif (isCross() && next != null) {\n\t\t\t\tnext.interview();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean isCross() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn true;\n\t\t}\n\n\t\t@Override\n\t\tpublic void next(Chain chain) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t}\n\n\t}\n```\n\n然后看看客户端调用：\n\n```\n\tpublic static void main(String[] args) {\n\t\tGrouper grouper = new Grouper();\n\t\tCTO cto = new CTO();\n\t\tHR hr = new HR();\n\t\tgrouper.next(cto);\n\t\tcto.next(hr);\n\t\tgrouper.interview();\n\t}\n```\n\n通过` grouper.next(cto);`和`cto.next(hr);` 设置完链式关系，最后只要通过`grouper.interview();` 调用一次面试就可以了。因为grouper最为链首，其中存储了下一个链元素next。只要条件达成（本次面试通过），则自动执行下一个任务，这就是任务链的好处。\n\n可能还有一个疑问：`grouper.next(cto);` 等流程还是在客户端设置的，这无疑要增加了客户端对底层这些类的认知度。\n\n其实完全可以把这些细节隐藏在底层的。比如我们把流程在Grouper构造方法中设置：\n\n```\n\t\tpublic Grouper() {\n\t\t\tCTO cto = new CTO();\n\t\t\tHR hr = new HR();\n\t\t\tnext(cto);\n\t\t\tcto.next(hr);\n\t\t}\n```\n\n这时客户端是如此的简洁：\n\n```\n\tpublic static void main(String[] args) {\n\t\tGrouper grouper = new Grouper();\n\t\tgrouper.interview();\n\t}\n```\n\n其实上面的一般方法还有其他的实现方法，但是无疑常见的实现要么耦合性较强，要么需要客户端对底层认知度高。\n\n说了半天，现在来步入主题看看到底什么是责任链\n\n\n\n# 责任链模式\n\n- 模式出现意图\n\n  让多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象串成一条链，并沿着链传递请求，直到有一个对象处理它或者处理完毕为止。\n\n\n\n- 责任链uml图\n\n![屏幕快照 2017-05-10 下午5.17.19](详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png)\n\n","slug":"详解设计模式之责任链模式","published":1,"updated":"2017-05-10T09:18:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7pq004q449cvscypcmk","content":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>责任链模式也叫职责链，抛开设计模式不谈，单看“责任链”这三个字，关注点一下子就放到了“链”字上了。链即锁链、链条，像链子一样环环相扣的东西。比如我们数据结构中的链表，当前对象持有下一个对象的地址。同样，设计模式中的责任链也是如此，任务一环套一环，环环相扣。</p>\n<h1 id=\"面试流程分析\"><a href=\"#面试流程分析\" class=\"headerlink\" title=\"面试流程分析\"></a>面试流程分析</h1><p>作为技术人员离职再就业少不了要面试的，那么我们就拿面试流程来细说。假设面试流程分为三步：组长面试，CTO面试，HR终面，一共三面。</p>\n<h2 id=\"不考虑其他任何方面的优化，一个人的面试如何实现？\"><a href=\"#不考虑其他任何方面的优化，一个人的面试如何实现？\" class=\"headerlink\" title=\"不考虑其他任何方面的优化，一个人的面试如何实现？\"></a>不考虑其他任何方面的优化，一个人的面试如何实现？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//面试类</div><div class=\"line\">static class Viewer &#123;</div><div class=\"line\">\tpublic void interview(int level) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tif (0 == level) &#123;// 组长面试</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125; else if (1 == level) &#123;// CTO面试</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125; else if (2 == level) &#123;// HR终面</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//客户端</div><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">\tViewer viewer = new Viewer();</div><div class=\"line\">\tviewer.interview(0);</div><div class=\"line\">\tviewer.interview(1);</div><div class=\"line\">\tviewer.interview(2);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面实现方式可以看出，面试方法，如果要面试三次，那么客户端要调用三次，面试方法interview中对level判断，不同级别有不同人面试，如果以后增加四面，那么就要修改interview方法。</p>\n<p>另外每次的面试 <code>viewer.interview</code> 都在客户端调用，但是按照正常流程组长面试完，如果觉得可以，应该流程传递到CTO哪里了，CTO谈完了觉得技术良好，最后交给HR谈待遇，流程抽象提取后是这样：</p>\n<p><img src=\"/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png\" alt=\"屏幕快照 2017-05-10 下午4.21.27\"></p>\n<p>这不就是开头说的“链”吗？</p>\n<h2 id=\"下面看看用链如何实现面试的：\"><a href=\"#下面看看用链如何实现面试的：\" class=\"headerlink\" title=\"下面看看用链如何实现面试的：\"></a>下面看看用链如何实现面试的：</h2><p>先定义一个链接口来控制面试流程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Chain &#123;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 面试方法</div><div class=\"line\">\t * </div><div class=\"line\">\t * @param level</div><div class=\"line\">\t */</div><div class=\"line\">\tvoid interview();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 是否通过</div><div class=\"line\">\t * </div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tboolean isCross();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 下一个面试官</div><div class=\"line\">\t * </div><div class=\"line\">\t * @param chain</div><div class=\"line\">\t */</div><div class=\"line\">\tvoid next(Chain chain);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后定义组长Grouper、CTO、HR三个面试官类实现Chain接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Grouper implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\"></div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;组长面试通过&quot;);</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tthis.next = chain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static class CTO implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;CTO面试通过&quot;);</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tthis.next = chain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static class HR implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tSystem.out.println(&quot;HR面试通过&quot;);</div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后看看客户端调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">\tGrouper grouper = new Grouper();</div><div class=\"line\">\tCTO cto = new CTO();</div><div class=\"line\">\tHR hr = new HR();</div><div class=\"line\">\tgrouper.next(cto);</div><div class=\"line\">\tcto.next(hr);</div><div class=\"line\">\tgrouper.interview();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过<code>grouper.next(cto);</code>和<code>cto.next(hr);</code> 设置完链式关系，最后只要通过<code>grouper.interview();</code> 调用一次面试就可以了。因为grouper最为链首，其中存储了下一个链元素next。只要条件达成（本次面试通过），则自动执行下一个任务，这就是任务链的好处。</p>\n<p>可能还有一个疑问：<code>grouper.next(cto);</code> 等流程还是在客户端设置的，这无疑要增加了客户端对底层这些类的认知度。</p>\n<p>其实完全可以把这些细节隐藏在底层的。比如我们把流程在Grouper构造方法中设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Grouper() &#123;</div><div class=\"line\">\tCTO cto = new CTO();</div><div class=\"line\">\tHR hr = new HR();</div><div class=\"line\">\tnext(cto);</div><div class=\"line\">\tcto.next(hr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时客户端是如此的简洁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">\tGrouper grouper = new Grouper();</div><div class=\"line\">\tgrouper.interview();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实上面的一般方法还有其他的实现方法，但是无疑常见的实现要么耦合性较强，要么需要客户端对底层认知度高。</p>\n<p>说了半天，现在来步入主题看看到底什么是责任链</p>\n<h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><ul>\n<li><p>模式出现意图</p>\n<p>让多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象串成一条链，并沿着链传递请求，直到有一个对象处理它或者处理完毕为止。</p>\n</li>\n</ul>\n<ul>\n<li>责任链uml图</li>\n</ul>\n<p><img src=\"/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png\" alt=\"屏幕快照 2017-05-10 下午5.17.19\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"说在前面的话\"><a href=\"#说在前面的话\" class=\"headerlink\" title=\"说在前面的话\"></a>说在前面的话</h1><p>责任链模式也叫职责链，抛开设计模式不谈，单看“责任链”这三个字，关注点一下子就放到了“链”字上了。链即锁链、链条，像链子一样环环相扣的东西。比如我们数据结构中的链表，当前对象持有下一个对象的地址。同样，设计模式中的责任链也是如此，任务一环套一环，环环相扣。</p>\n<h1 id=\"面试流程分析\"><a href=\"#面试流程分析\" class=\"headerlink\" title=\"面试流程分析\"></a>面试流程分析</h1><p>作为技术人员离职再就业少不了要面试的，那么我们就拿面试流程来细说。假设面试流程分为三步：组长面试，CTO面试，HR终面，一共三面。</p>\n<h2 id=\"不考虑其他任何方面的优化，一个人的面试如何实现？\"><a href=\"#不考虑其他任何方面的优化，一个人的面试如何实现？\" class=\"headerlink\" title=\"不考虑其他任何方面的优化，一个人的面试如何实现？\"></a>不考虑其他任何方面的优化，一个人的面试如何实现？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//面试类</div><div class=\"line\">static class Viewer &#123;</div><div class=\"line\">\tpublic void interview(int level) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tif (0 == level) &#123;// 组长面试</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125; else if (1 == level) &#123;// CTO面试</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125; else if (2 == level) &#123;// HR终面</div><div class=\"line\">\t\t\t// TODO</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//客户端</div><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\"></div><div class=\"line\">\tViewer viewer = new Viewer();</div><div class=\"line\">\tviewer.interview(0);</div><div class=\"line\">\tviewer.interview(1);</div><div class=\"line\">\tviewer.interview(2);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面实现方式可以看出，面试方法，如果要面试三次，那么客户端要调用三次，面试方法interview中对level判断，不同级别有不同人面试，如果以后增加四面，那么就要修改interview方法。</p>\n<p>另外每次的面试 <code>viewer.interview</code> 都在客户端调用，但是按照正常流程组长面试完，如果觉得可以，应该流程传递到CTO哪里了，CTO谈完了觉得技术良好，最后交给HR谈待遇，流程抽象提取后是这样：</p>\n<p><img src=\"/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png\" alt=\"屏幕快照 2017-05-10 下午4.21.27\"></p>\n<p>这不就是开头说的“链”吗？</p>\n<h2 id=\"下面看看用链如何实现面试的：\"><a href=\"#下面看看用链如何实现面试的：\" class=\"headerlink\" title=\"下面看看用链如何实现面试的：\"></a>下面看看用链如何实现面试的：</h2><p>先定义一个链接口来控制面试流程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Chain &#123;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 面试方法</div><div class=\"line\">\t * </div><div class=\"line\">\t * @param level</div><div class=\"line\">\t */</div><div class=\"line\">\tvoid interview();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 是否通过</div><div class=\"line\">\t * </div><div class=\"line\">\t * @return</div><div class=\"line\">\t */</div><div class=\"line\">\tboolean isCross();</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 下一个面试官</div><div class=\"line\">\t * </div><div class=\"line\">\t * @param chain</div><div class=\"line\">\t */</div><div class=\"line\">\tvoid next(Chain chain);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后定义组长Grouper、CTO、HR三个面试官类实现Chain接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Grouper implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\"></div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;组长面试通过&quot;);</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tthis.next = chain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static class CTO implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;CTO面试通过&quot;);</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tthis.next = chain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static class HR implements Chain &#123;</div><div class=\"line\">\tprivate Chain next = null;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void interview() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\tSystem.out.println(&quot;HR面试通过&quot;);</div><div class=\"line\">\t\tif (isCross() &amp;&amp; next != null) &#123;</div><div class=\"line\">\t\t\tnext.interview();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic boolean isCross() &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\">\t\treturn true;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void next(Chain chain) &#123;</div><div class=\"line\">\t\t// TODO Auto-generated method stub</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后看看客户端调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">\tGrouper grouper = new Grouper();</div><div class=\"line\">\tCTO cto = new CTO();</div><div class=\"line\">\tHR hr = new HR();</div><div class=\"line\">\tgrouper.next(cto);</div><div class=\"line\">\tcto.next(hr);</div><div class=\"line\">\tgrouper.interview();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过<code>grouper.next(cto);</code>和<code>cto.next(hr);</code> 设置完链式关系，最后只要通过<code>grouper.interview();</code> 调用一次面试就可以了。因为grouper最为链首，其中存储了下一个链元素next。只要条件达成（本次面试通过），则自动执行下一个任务，这就是任务链的好处。</p>\n<p>可能还有一个疑问：<code>grouper.next(cto);</code> 等流程还是在客户端设置的，这无疑要增加了客户端对底层这些类的认知度。</p>\n<p>其实完全可以把这些细节隐藏在底层的。比如我们把流程在Grouper构造方法中设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Grouper() &#123;</div><div class=\"line\">\tCTO cto = new CTO();</div><div class=\"line\">\tHR hr = new HR();</div><div class=\"line\">\tnext(cto);</div><div class=\"line\">\tcto.next(hr);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时客户端是如此的简洁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args) &#123;</div><div class=\"line\">\tGrouper grouper = new Grouper();</div><div class=\"line\">\tgrouper.interview();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其实上面的一般方法还有其他的实现方法，但是无疑常见的实现要么耦合性较强，要么需要客户端对底层认知度高。</p>\n<p>说了半天，现在来步入主题看看到底什么是责任链</p>\n<h1 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h1><ul>\n<li><p>模式出现意图</p>\n<p>让多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象串成一条链，并沿着链传递请求，直到有一个对象处理它或者处理完毕为止。</p>\n</li>\n</ul>\n<ul>\n<li>责任链uml图</li>\n</ul>\n<p><img src=\"/2017/05/10/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png\" alt=\"屏幕快照 2017-05-10 下午5.17.19\"></p>\n"},{"title":"算法排序之快速排序","date":"2017-05-16T10:21:50.000Z","_content":"\n# 实现目标\n\n本例中希望通过快速排序，使得数组最终按非递减顺序排列。\n\n数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }\n\n数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }\n\n\n\n# 实现分析\n\n快排是根据分治思想，\n\n①选取一个基数，\n\n②将无序数组分为大小两个数组，其中一个数组值全都比基数小，另一个数组值全都比基数大。\n\n③然后将这两个数组分别再次分组，递归重复①②的步骤直到每个拆分后的数组不可再分割为止。也就是说最后每个元素单独为一个数组为止。\n\n④最后得出数组就是排序好的。\n\n\n\n# 代码实现\n\n```\n\tpublic static int partition3(int[] arr, int low, int high) {\n\t\tint i, j;\n\t\ti = low;\n\t\tint base = arr[i];\n\t\tfor (j = i + 1; j <= high; j++) {\n\t\t\tif (arr[j] < base) {\n\t\t\t\ti++;\n\t\t\t\tswap(arr, i, j);\n\t\t\t}\n\t\t}\n\t\tswap(arr, low, i);\n\t\treturn i;\n\t}\n\n\t/**\n\t*交换数组中两个值\n\t**/\n\tpublic static void swap(int[] arr, int i, int j) {\n\t\tif (i != j) {\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = tmp;\n\t\t}\n\t}\n\n\t/**\n\t*right为数组最大下标而不是数组长度\n\t**/\n\tpublic static void quickSort(int[] arr, int left, int right) {\n\t\tif (left < right) {\n\t\t\tint piv = partition3(arr, left, right);\n\t\t\tquickSort(arr, left, piv - 1);\n\t\t\tquickSort(arr, piv + 1, right);\n\t\t}\n\n\t}\n```\n\n\n\n","source":"_posts/算法排序之快速排序.md","raw":"---\ntitle: 算法排序之快速排序\ndate: 2017-05-16 18:21:50\ntags: 算法\ncategories: 算法\n---\n\n# 实现目标\n\n本例中希望通过快速排序，使得数组最终按非递减顺序排列。\n\n数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }\n\n数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }\n\n\n\n# 实现分析\n\n快排是根据分治思想，\n\n①选取一个基数，\n\n②将无序数组分为大小两个数组，其中一个数组值全都比基数小，另一个数组值全都比基数大。\n\n③然后将这两个数组分别再次分组，递归重复①②的步骤直到每个拆分后的数组不可再分割为止。也就是说最后每个元素单独为一个数组为止。\n\n④最后得出数组就是排序好的。\n\n\n\n# 代码实现\n\n```\n\tpublic static int partition3(int[] arr, int low, int high) {\n\t\tint i, j;\n\t\ti = low;\n\t\tint base = arr[i];\n\t\tfor (j = i + 1; j <= high; j++) {\n\t\t\tif (arr[j] < base) {\n\t\t\t\ti++;\n\t\t\t\tswap(arr, i, j);\n\t\t\t}\n\t\t}\n\t\tswap(arr, low, i);\n\t\treturn i;\n\t}\n\n\t/**\n\t*交换数组中两个值\n\t**/\n\tpublic static void swap(int[] arr, int i, int j) {\n\t\tif (i != j) {\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = tmp;\n\t\t}\n\t}\n\n\t/**\n\t*right为数组最大下标而不是数组长度\n\t**/\n\tpublic static void quickSort(int[] arr, int left, int right) {\n\t\tif (left < right) {\n\t\t\tint piv = partition3(arr, left, right);\n\t\t\tquickSort(arr, left, piv - 1);\n\t\t\tquickSort(arr, piv + 1, right);\n\t\t}\n\n\t}\n```\n\n\n\n","slug":"算法排序之快速排序","published":1,"updated":"2017-05-16T15:39:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7px004t449cebbxtr64","content":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>本例中希望通过快速排序，使得数组最终按非递减顺序排列。</p>\n<p>数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }</p>\n<p>数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><p>快排是根据分治思想，</p>\n<p>①选取一个基数，</p>\n<p>②将无序数组分为大小两个数组，其中一个数组值全都比基数小，另一个数组值全都比基数大。</p>\n<p>③然后将这两个数组分别再次分组，递归重复①②的步骤直到每个拆分后的数组不可再分割为止。也就是说最后每个元素单独为一个数组为止。</p>\n<p>④最后得出数组就是排序好的。</p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int partition3(int[] arr, int low, int high) &#123;</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\ti = low;</div><div class=\"line\">\tint base = arr[i];</div><div class=\"line\">\tfor (j = i + 1; j &lt;= high; j++) &#123;</div><div class=\"line\">\t\tif (arr[j] &lt; base) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t\tswap(arr, i, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tswap(arr, low, i);</div><div class=\"line\">\treturn i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*交换数组中两个值</div><div class=\"line\">**/</div><div class=\"line\">public static void swap(int[] arr, int i, int j) &#123;</div><div class=\"line\">\tif (i != j) &#123;</div><div class=\"line\">\t\tint tmp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[j];</div><div class=\"line\">\t\tarr[j] = tmp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*right为数组最大下标而不是数组长度</div><div class=\"line\">**/</div><div class=\"line\">public static void quickSort(int[] arr, int left, int right) &#123;</div><div class=\"line\">\tif (left &lt; right) &#123;</div><div class=\"line\">\t\tint piv = partition3(arr, left, right);</div><div class=\"line\">\t\tquickSort(arr, left, piv - 1);</div><div class=\"line\">\t\tquickSort(arr, piv + 1, right);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h1><p>本例中希望通过快速排序，使得数组最终按非递减顺序排列。</p>\n<p>数组初始值为：{ 156, 141, 35, 94, 88, 61, 111 }</p>\n<p>数组最终值为：{ 35, 61, 88, 94, 111, 141, 156 }</p>\n<h1 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h1><p>快排是根据分治思想，</p>\n<p>①选取一个基数，</p>\n<p>②将无序数组分为大小两个数组，其中一个数组值全都比基数小，另一个数组值全都比基数大。</p>\n<p>③然后将这两个数组分别再次分组，递归重复①②的步骤直到每个拆分后的数组不可再分割为止。也就是说最后每个元素单独为一个数组为止。</p>\n<p>④最后得出数组就是排序好的。</p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int partition3(int[] arr, int low, int high) &#123;</div><div class=\"line\">\tint i, j;</div><div class=\"line\">\ti = low;</div><div class=\"line\">\tint base = arr[i];</div><div class=\"line\">\tfor (j = i + 1; j &lt;= high; j++) &#123;</div><div class=\"line\">\t\tif (arr[j] &lt; base) &#123;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t\tswap(arr, i, j);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tswap(arr, low, i);</div><div class=\"line\">\treturn i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*交换数组中两个值</div><div class=\"line\">**/</div><div class=\"line\">public static void swap(int[] arr, int i, int j) &#123;</div><div class=\"line\">\tif (i != j) &#123;</div><div class=\"line\">\t\tint tmp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[j];</div><div class=\"line\">\t\tarr[j] = tmp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*right为数组最大下标而不是数组长度</div><div class=\"line\">**/</div><div class=\"line\">public static void quickSort(int[] arr, int left, int right) &#123;</div><div class=\"line\">\tif (left &lt; right) &#123;</div><div class=\"line\">\t\tint piv = partition3(arr, left, right);</div><div class=\"line\">\t\tquickSort(arr, left, piv - 1);</div><div class=\"line\">\t\tquickSort(arr, piv + 1, right);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"详解设计模式之建造者模式","date":"2017-05-10T04:28:13.000Z","_content":"\n\n\n","source":"_posts/详解设计模式之建造者模式.md","raw":"---\ntitle: 详解设计模式之建造者模式\ndate: 2017-05-10 12:28:13\ntags: 设计模式\ncategories: 设计模式\n---\n\n\n\n","slug":"详解设计模式之建造者模式","published":1,"updated":"2017-05-10T07:24:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52ot7q1004w449cea1iwvbs","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.22.23.png","slug":"屏幕快照 2017-04-27 下午3.22.23.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/为什么每一个IT人员应该有一把人体工学电脑椅/58f074a8N70fcfb6a.jpg","slug":"58f074a8N70fcfb6a.jpg","post":"cj52ot7nj002q449cj26jq16r","modified":0,"renderable":0},{"_id":"source/_posts/Android网络框架执行流程分析/流程.png","slug":"流程.png","post":"cj52ot7m7001r449cks38pf4k","modified":0,"renderable":0},{"_id":"source/_posts/为什么每一个IT人员应该有一把人体工学电脑椅/1918606_151944_1.gif","slug":"1918606_151944_1.gif","post":"cj52ot7nj002q449cj26jq16r","modified":0,"renderable":0},{"_id":"source/_posts/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午4.21.27.png","slug":"屏幕快照 2017-05-10 下午4.21.27.png","post":"cj52ot7pq004q449cvscypcmk","modified":0,"renderable":0},{"_id":"source/_posts/详解设计模式之责任链模式/屏幕快照 2017-05-10 下午5.17.19.png","slug":"屏幕快照 2017-05-10 下午5.17.19.png","post":"cj52ot7pq004q449cvscypcmk","modified":0,"renderable":0},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.33.13.png","slug":"屏幕快照 2017-04-25 下午3.33.13.png","post":"cj52ot7nd002n449c6fh5dsm8","modified":0,"renderable":0},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.34.46.png","slug":"屏幕快照 2017-04-25 下午3.34.46.png","post":"cj52ot7nd002n449c6fh5dsm8","modified":0,"renderable":0},{"_id":"source/_posts/hexo本地图片发布后不能显示的问题/屏幕快照 2017-04-25 下午3.45.37.png","slug":"屏幕快照 2017-04-25 下午3.45.37.png","post":"cj52ot7nd002n449c6fh5dsm8","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112391191.jpg","slug":"mmexport1493112391191.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112393720.jpg","slug":"mmexport1493112393720.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112396013.jpg","slug":"mmexport1493112396013.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112398170.jpg","slug":"mmexport1493112398170.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112400267.jpg","slug":"mmexport1493112400267.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112402523.jpg","slug":"mmexport1493112402523.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2016圆明园荷花节/mmexport1493112405316.jpg","slug":"mmexport1493112405316.jpg","post":"cj52ot7ke0008449cf44fad8h","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb.jpeg","slug":"psb.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb1.jpeg","slug":"psb1.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb2.jpeg","slug":"psb2.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb3.jpeg","slug":"psb3.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb4.jpeg","slug":"psb4.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb5.jpeg","slug":"psb5.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb6.jpeg","slug":"psb6.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/2015圆明园荷花节/psb7.jpeg","slug":"psb7.jpeg","post":"cj52ot7jy0006449cs6uq05h3","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png","slug":"0B8D42B7-E5A5-431D-9658-2A99C923CF4E.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/1A94CD89-1BE9-46BC-9449-8B55EE34D741.png","slug":"1A94CD89-1BE9-46BC-9449-8B55EE34D741.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午1.49.26.png","slug":"屏幕快照 2017-04-27 下午1.49.26.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.08.27.png","slug":"屏幕快照 2017-04-27 下午2.08.27.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午2.21.48.png","slug":"屏幕快照 2017-04-27 下午2.21.48.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.11.33.png","slug":"屏幕快照 2017-04-27 下午3.11.33.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android内存分析工具之MAT详解/屏幕快照 2017-04-27 下午3.19.06.png","slug":"屏幕快照 2017-04-27 下午3.19.06.png","post":"cj52ot7kh000c449cdvrl7qnq","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午10.29.17.png","slug":"屏幕快照 2017-04-24 下午10.29.17.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.04.06.png","slug":"屏幕快照 2017-04-24 下午11.04.06.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.14.36.png","slug":"屏幕快照 2017-04-24 下午11.14.36.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午11.57.46.png","slug":"屏幕快照 2017-04-24 下午11.57.46.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-24 下午9.57.43.png","slug":"屏幕快照 2017-04-24 下午9.57.43.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午12.26.47.png","slug":"屏幕快照 2017-04-25 上午12.26.47.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 上午9.49.56.png","slug":"屏幕快照 2017-04-25 上午9.49.56.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午12.56.36.png","slug":"屏幕快照 2017-04-25 下午12.56.36.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/Android开发之JNI深入解析/屏幕快照 2017-04-25 下午2.54.18.png","slug":"屏幕快照 2017-04-25 下午2.54.18.png","post":"cj52ot7km000f449clfuma3fn","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075354_IMG_6200.JPG","slug":"20160610075354_IMG_6200.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075557_IMG_6209.JPG","slug":"20160610075557_IMG_6209.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610075842_IMG_6219.JPG","slug":"20160610075842_IMG_6219.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610080912_IMG_6235.JPG","slug":"20160610080912_IMG_6235.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610081259_IMG_6245.JPG","slug":"20160610081259_IMG_6245.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610082906_IMG_6261.JPG","slug":"20160610082906_IMG_6261.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610083541_IMG_6276.JPG","slug":"20160610083541_IMG_6276.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610084538_IMG_6283.JPG","slug":"20160610084538_IMG_6283.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610091441_IMG_6323.JPG","slug":"20160610091441_IMG_6323.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610095757_IMG_6325.JPG","slug":"20160610095757_IMG_6325.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610100357_IMG_6326.JPG","slug":"20160610100357_IMG_6326.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101211_IMG_6337.JPG","slug":"20160610101211_IMG_6337.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101300_IMG_6342.JPG","slug":"20160610101300_IMG_6342.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610101355_IMG_6343.JPG","slug":"20160610101355_IMG_6343.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610102213_IMG_6353.JPG","slug":"20160610102213_IMG_6353.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610104345_IMG_6371.JPG","slug":"20160610104345_IMG_6371.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0},{"_id":"source/_posts/2016公司清明节坝上草原/20160610110010_IMG_6396.JPG","slug":"20160610110010_IMG_6396.JPG","post":"cj52ot7j80000449cz3tjvh3x","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj52ot7j80000449cz3tjvh3x","category_id":"cj52ot7jr0004449csztgoes6","_id":"cj52ot7kj000d449cp6ek8nso"},{"post_id":"cj52ot7ke0008449cf44fad8h","category_id":"cj52ot7jr0004449csztgoes6","_id":"cj52ot7ku000i449clt0cxpxm"},{"post_id":"cj52ot7ji0002449cds6j97e5","category_id":"cj52ot7kf0009449cjp2ziduv","_id":"cj52ot7l1000m449cpr0f142k"},{"post_id":"cj52ot7jy0006449cs6uq05h3","category_id":"cj52ot7jr0004449csztgoes6","_id":"cj52ot7la000s449c502850ah"},{"post_id":"cj52ot7l3000p449cqgmyady5","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7le000x449cj6pdvj0z"},{"post_id":"cj52ot7k10007449cz0bt5xb3","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7lg0012449clo0jcy5p"},{"post_id":"cj52ot7kh000c449cdvrl7qnq","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7ll0016449c5iue4uz9"},{"post_id":"cj52ot7le000z449cn8n0jwtg","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7lq001b449ch3b256e7"},{"post_id":"cj52ot7km000f449clfuma3fn","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7lt001e449ccig4pjji"},{"post_id":"cj52ot7kv000j449cy3k36vmi","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7lz001k449cyukjyeca"},{"post_id":"cj52ot7lr001d449c6inq6sad","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7m6001p449c0cj4l1wu"},{"post_id":"cj52ot7ky000l449csrv9cg1i","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7m9001s449cin3fxri1"},{"post_id":"cj52ot7m3001o449c3ejimv5l","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7mf001x449cfxpeaai8"},{"post_id":"cj52ot7l8000r449ciu5hz7cu","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7mm0020449clpv1sjov"},{"post_id":"cj52ot7m7001r449cks38pf4k","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7ms0025449cxs0rgx9i"},{"post_id":"cj52ot7mg001z449c7lo5jbfa","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7mu0028449cyfm1r9e8"},{"post_id":"cj52ot7lb000w449c9kpgzxdi","category_id":"cj52ot7ma001u449cxlslhntt","_id":"cj52ot7mw002d449ca5eyy3mg"},{"post_id":"cj52ot7mo0022449ckj23zkih","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7n5002g449cz7d49a3p"},{"post_id":"cj52ot7lh0013449cr35ih9xr","category_id":"cj52ot7ma001u449cxlslhntt","_id":"cj52ot7nc002l449csf2uj1mp"},{"post_id":"cj52ot7mu002a449cqa8eruxk","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7nh002o449conixm42y"},{"post_id":"cj52ot7my002f449ctor43qre","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7nn002t449cb6p2tg4o"},{"post_id":"cj52ot7lj0015449cpe83fo40","category_id":"cj52ot7mv002b449c9v5np2c3","_id":"cj52ot7nr002w449c3x50me9b"},{"post_id":"cj52ot7n5002i449cqxj311fb","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7nu0031449cszulyhdi"},{"post_id":"cj52ot7nd002n449c6fh5dsm8","category_id":"cj52ot7kf0009449cjp2ziduv","_id":"cj52ot7ny0034449cq6rbac90"},{"post_id":"cj52ot7ln001a449cto51wr3a","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7o30039449cxsvqyfx7"},{"post_id":"cj52ot7nn002v449c0iijyjss","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7o5003c449c4wqovi36"},{"post_id":"cj52ot7lw001h449chj3esbra","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7o8003h449cmffph8fl"},{"post_id":"cj52ot7nr002y449c1fylxhkv","category_id":"cj52ot7kf0009449cjp2ziduv","_id":"cj52ot7oc003k449c3lu1uspe"},{"post_id":"cj52ot7nv0033449cbdgoc9h0","category_id":"cj52ot7kf0009449cjp2ziduv","_id":"cj52ot7on003p449cbmh3ecbj"},{"post_id":"cj52ot7ly001j449ccswr8id6","category_id":"cj52ot7m0001m449cxwjrpad1","_id":"cj52ot7or003s449cifdt6wr7"},{"post_id":"cj52ot7nz0036449c9wuuicbr","category_id":"cj52ot7kf0009449cjp2ziduv","_id":"cj52ot7os003v449cxw39goq1"},{"post_id":"cj52ot7o3003b449carm979x0","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7ox0040449cbodist5a"},{"post_id":"cj52ot7mc001w449cfcm03c9o","category_id":"cj52ot7o10037449crqkp7tp0","_id":"cj52ot7oz0043449cw80h0ggu"},{"post_id":"cj52ot7o5003e449cradyjqsy","category_id":"cj52ot7l1000n449cwr4rqd4g","_id":"cj52ot7p40048449cijba03dt"},{"post_id":"cj52ot7ms0027449c6udngl22","category_id":"cj52ot7mv002b449c9v5np2c3","_id":"cj52ot7pd004b449cnifflhsw"},{"post_id":"cj52ot7nj002q449cj26jq16r","category_id":"cj52ot7ok003n449cnxxgabtg","_id":"cj52ot7ph004g449cxaplry08"},{"post_id":"cj52ot7or003u449csrnzpra7","category_id":"cj52ot7ok003n449cnxxgabtg","_id":"cj52ot7pk004j449cxyrfi0vk"},{"post_id":"cj52ot7oy0042449cieqwrvlr","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7pq004o449cbz8yra3u"},{"post_id":"cj52ot7o8003j449cb6228938","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7pw004r449cbsmqfcdi"},{"post_id":"cj52ot7p00045449cro1route","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7q0004u449ccvxha1jb"},{"post_id":"cj52ot7p6004a449cruecsjei","category_id":"cj52ot7o10037449crqkp7tp0","_id":"cj52ot7q3004x449cxenpl2je"},{"post_id":"cj52ot7of003m449cawtemhfo","category_id":"cj52ot7p30046449cqoihvyjy","_id":"cj52ot7q5004z449comaq4mal"},{"post_id":"cj52ot7pd004d449cw33xotzw","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7q50051449ciw9d38xp"},{"post_id":"cj52ot7ph004i449ctuvrmok3","category_id":"cj52ot7o10037449crqkp7tp0","_id":"cj52ot7q50053449c1ujn42ir"},{"post_id":"cj52ot7op003r449cqx2ob9dd","category_id":"cj52ot7p30046449cqoihvyjy","_id":"cj52ot7q50055449cb6o73vc4"},{"post_id":"cj52ot7pm004l449c2nmxuadm","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7q60057449chdkz8c91"},{"post_id":"cj52ot7pq004q449cvscypcmk","category_id":"cj52ot7o10037449crqkp7tp0","_id":"cj52ot7q60059449czosrwzlo"},{"post_id":"cj52ot7ot003z449cqc6utnix","category_id":"cj52ot7pp004m449cuzc0x32a","_id":"cj52ot7q6005b449csrqcevag"},{"post_id":"cj52ot7px004t449cebbxtr64","category_id":"cj52ot7ot003x449ceqt4vjji","_id":"cj52ot7q6005d449c1ynkeo3b"},{"post_id":"cj52ot7q1004w449cea1iwvbs","category_id":"cj52ot7o10037449crqkp7tp0","_id":"cj52ot7q6005f449ct7i4ne97"}],"PostTag":[{"post_id":"cj52ot7j80000449cz3tjvh3x","tag_id":"cj52ot7jx0005449coipsnx2y","_id":"cj52ot7kh000b449crwrf3rso"},{"post_id":"cj52ot7ke0008449cf44fad8h","tag_id":"cj52ot7jx0005449coipsnx2y","_id":"cj52ot7kj000e449cs2esvv44"},{"post_id":"cj52ot7ji0002449cds6j97e5","tag_id":"cj52ot7kg000a449ch0o5q105","_id":"cj52ot7kx000k449clddrtn23"},{"post_id":"cj52ot7jy0006449cs6uq05h3","tag_id":"cj52ot7jx0005449coipsnx2y","_id":"cj52ot7l7000q449c8tz8hsmj"},{"post_id":"cj52ot7l3000p449cqgmyady5","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7lb000v449ccleqqn76"},{"post_id":"cj52ot7k10007449cz0bt5xb3","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7le000y449ckbebaenw"},{"post_id":"cj52ot7kh000c449cdvrl7qnq","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7lj0014449c29f4vnqa"},{"post_id":"cj52ot7le000z449cn8n0jwtg","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7ll0017449c3od0sn61"},{"post_id":"cj52ot7km000f449clfuma3fn","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7lq001c449cbzi956xg"},{"post_id":"cj52ot7kv000j449cy3k36vmi","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7lx001i449c7zsrngap"},{"post_id":"cj52ot7lr001d449c6inq6sad","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7m0001l449cr95zp03j"},{"post_id":"cj52ot7ky000l449csrv9cg1i","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7m6001q449cpkxxgzin"},{"post_id":"cj52ot7m3001o449c3ejimv5l","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7m9001t449cugls4krn"},{"post_id":"cj52ot7l8000r449ciu5hz7cu","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7mf001y449cx94yoqtq"},{"post_id":"cj52ot7m7001r449cks38pf4k","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7mn0021449cmhlgiyyr"},{"post_id":"cj52ot7mg001z449c7lo5jbfa","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7ms0026449cgxr7hfmh"},{"post_id":"cj52ot7lb000w449c9kpgzxdi","tag_id":"cj52ot7mb001v449ca52cfs8j","_id":"cj52ot7mu0029449c7iby4pdk"},{"post_id":"cj52ot7mo0022449ckj23zkih","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7mx002e449cejsw3jsc"},{"post_id":"cj52ot7lh0013449cr35ih9xr","tag_id":"cj52ot7mb001v449ca52cfs8j","_id":"cj52ot7n5002h449cbvwkel2a"},{"post_id":"cj52ot7mu002a449cqa8eruxk","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7nc002m449c0ebjdw7u"},{"post_id":"cj52ot7my002f449ctor43qre","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7nh002p449cttgd9fdg"},{"post_id":"cj52ot7lj0015449cpe83fo40","tag_id":"cj52ot7mw002c449ccrpywepg","_id":"cj52ot7nn002u449cdci3nz57"},{"post_id":"cj52ot7n5002i449cqxj311fb","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7nr002x449cbcsi4730"},{"post_id":"cj52ot7nd002n449c6fh5dsm8","tag_id":"cj52ot7kg000a449ch0o5q105","_id":"cj52ot7nu0032449c042cjm31"},{"post_id":"cj52ot7ln001a449cto51wr3a","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7nz0035449clrcb9g01"},{"post_id":"cj52ot7nn002v449c0iijyjss","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7o3003a449c6mogna7f"},{"post_id":"cj52ot7lw001h449chj3esbra","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7o5003d449cay55zp6w"},{"post_id":"cj52ot7nr002y449c1fylxhkv","tag_id":"cj52ot7kg000a449ch0o5q105","_id":"cj52ot7o8003i449ci8a9tlt3"},{"post_id":"cj52ot7nv0033449cbdgoc9h0","tag_id":"cj52ot7kg000a449ch0o5q105","_id":"cj52ot7oc003l449cyz7c03lx"},{"post_id":"cj52ot7ly001j449ccswr8id6","tag_id":"cj52ot7m1001n449cibflewg8","_id":"cj52ot7on003q449ca189oybt"},{"post_id":"cj52ot7nz0036449c9wuuicbr","tag_id":"cj52ot7kg000a449ch0o5q105","_id":"cj52ot7or003t449cekxhy39o"},{"post_id":"cj52ot7o3003b449carm979x0","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7ot003w449cegcdril1"},{"post_id":"cj52ot7mc001w449cfcm03c9o","tag_id":"cj52ot7o10038449csdiq35l5","_id":"cj52ot7ox0041449c1b86pxud"},{"post_id":"cj52ot7o5003e449cradyjqsy","tag_id":"cj52ot7l2000o449cwwx4gv65","_id":"cj52ot7p00044449cs5icgu48"},{"post_id":"cj52ot7ms0027449c6udngl22","tag_id":"cj52ot7mw002c449ccrpywepg","_id":"cj52ot7p50049449ckzlsjn0m"},{"post_id":"cj52ot7nj002q449cj26jq16r","tag_id":"cj52ot7om003o449cd3x7cgbf","_id":"cj52ot7pd004c449c1no3chxu"},{"post_id":"cj52ot7or003u449csrnzpra7","tag_id":"cj52ot7om003o449cd3x7cgbf","_id":"cj52ot7ph004h449cxgz1bu1v"},{"post_id":"cj52ot7oy0042449cieqwrvlr","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7pl004k449c3n0x8gr2"},{"post_id":"cj52ot7o8003j449cb6228938","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7pq004p449ca61z2q2n"},{"post_id":"cj52ot7p00045449cro1route","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7px004s449cyqcp1wtr"},{"post_id":"cj52ot7p6004a449cruecsjei","tag_id":"cj52ot7o10038449csdiq35l5","_id":"cj52ot7q0004v449c7zltrjec"},{"post_id":"cj52ot7of003m449cawtemhfo","tag_id":"cj52ot7p30047449cdfi4lpoy","_id":"cj52ot7q3004y449cn20h68po"},{"post_id":"cj52ot7pd004d449cw33xotzw","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7q50050449c4h8t4i2j"},{"post_id":"cj52ot7ph004i449ctuvrmok3","tag_id":"cj52ot7o10038449csdiq35l5","_id":"cj52ot7q50052449cz7ixatq0"},{"post_id":"cj52ot7op003r449cqx2ob9dd","tag_id":"cj52ot7p30047449cdfi4lpoy","_id":"cj52ot7q50054449ca7d4loz8"},{"post_id":"cj52ot7pm004l449c2nmxuadm","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7q50056449c3r3qhhjo"},{"post_id":"cj52ot7pq004q449cvscypcmk","tag_id":"cj52ot7o10038449csdiq35l5","_id":"cj52ot7q60058449ce3m59y0u"},{"post_id":"cj52ot7ot003z449cqc6utnix","tag_id":"cj52ot7pq004n449c3dzkabut","_id":"cj52ot7q6005a449cwbt9oxia"},{"post_id":"cj52ot7px004t449cebbxtr64","tag_id":"cj52ot7ot003y449csz1vg1ik","_id":"cj52ot7q6005c449c5g9w6dq4"},{"post_id":"cj52ot7q1004w449cea1iwvbs","tag_id":"cj52ot7o10038449csdiq35l5","_id":"cj52ot7q6005e449cjwji9jou"}],"Tag":[{"name":"生活","_id":"cj52ot7jx0005449coipsnx2y"},{"name":"网络","_id":"cj52ot7kg000a449ch0o5q105"},{"name":"Android","_id":"cj52ot7l2000o449cwwx4gv65"},{"name":"Python","_id":"cj52ot7m1001n449cibflewg8"},{"name":"Java","_id":"cj52ot7mb001v449ca52cfs8j"},{"name":"工具","_id":"cj52ot7mw002c449ccrpywepg"},{"name":"设计模式","_id":"cj52ot7o10038449csdiq35l5"},{"name":"职场杂谈","_id":"cj52ot7om003o449cd3x7cgbf"},{"name":"算法","_id":"cj52ot7ot003y449csz1vg1ik"},{"name":"趣题","_id":"cj52ot7p30047449cdfi4lpoy"},{"name":"程序员的数学","_id":"cj52ot7pq004n449c3dzkabut"}]}}